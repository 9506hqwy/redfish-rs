use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
pub struct RedfishError {
    #[serde(rename = "error")]
    pub error: RedfishErrorError,
}
#[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
pub struct RedfishErrorError {
    #[serde(rename = "code")]
    pub code: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(
        skip_serializing_if = "Option::is_none",
        rename = "@Message.ExtendedInfo"
    )]
    pub message_extended_info: Option<Vec<crate::message::v1_1_2::Message>>,
}
pub mod acceleration_function {
    pub mod v1_0_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AccelerationFunction {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccelerationFunctionType"
            )]
            pub acceleration_function_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::acceleration_function::v1_0_3::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FpgaReconfigurationSlots"
            )]
            pub fpga_reconfiguration_slots: Option<Vec<String>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::acceleration_function::v1_0_3::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AccelerationFunctionType {
            #[default]
            #[serde(rename = "AudioProcessing")]
            AudioProcessing,
            #[serde(rename = "Compression")]
            Compression,
            #[serde(rename = "Encryption")]
            Encryption,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PacketInspection")]
            PacketInspection,
            #[serde(rename = "PacketSwitch")]
            PacketSwitch,
            #[serde(rename = "Scheduler")]
            Scheduler,
            #[serde(rename = "VideoProcessing")]
            VideoProcessing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::acceleration_function::v1_0_3::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod acceleration_function_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct AccelerationFunctionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod account_service {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum MFABypass {
        AccountServiceV1N12N1MFABypass(crate::account_service::v1_12_1::MFABypass),
        AccountServiceV1N13N0MFABypass(crate::account_service::v1_13_0::MFABypass),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum MFABypassType {
        #[default]
        #[serde(rename = "All")]
        All,
        #[serde(rename = "ClientCertificate")]
        ClientCertificate,
        #[serde(rename = "GoogleAuthenticator")]
        GoogleAuthenticator,
        #[serde(rename = "MicrosoftAuthenticator")]
        MicrosoftAuthenticator,
        #[serde(rename = "OEM")]
        OEM,
        #[serde(rename = "SecurID")]
        SecurID,
    }
    pub mod v1_12_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MFABypass {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BypassTypes")]
            pub bypass_types: Option<Vec<String>>,
        }
    }
    pub mod v1_13_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AccountProviderTypes {
            #[default]
            #[serde(rename = "ActiveDirectoryService")]
            ActiveDirectoryService,
            #[serde(rename = "LDAPService")]
            LDAPService,
            #[serde(rename = "OAuth2")]
            OAuth2,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "RedfishService")]
            RedfishService,
            #[serde(rename = "TACACSplus")]
            TACACSplus,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AccountService {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountLockoutCounterResetAfter"
            )]
            pub account_lockout_counter_reset_after: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountLockoutCounterResetEnabled"
            )]
            pub account_lockout_counter_reset_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountLockoutDuration"
            )]
            pub account_lockout_duration: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountLockoutThreshold"
            )]
            pub account_lockout_threshold: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Accounts")]
            pub accounts: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::account_service::v1_13_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ActiveDirectory")]
            pub active_directory: Option<crate::account_service::v1_13_0::ExternalAccountProvider>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalExternalAccountProviders"
            )]
            pub additional_external_account_providers: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthFailureLoggingThreshold"
            )]
            pub auth_failure_logging_threshold: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LDAP")]
            pub ldap: Option<crate::account_service::v1_13_0::ExternalAccountProvider>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalAccountAuth")]
            pub local_account_auth: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPasswordLength")]
            pub max_password_length: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinPasswordLength")]
            pub min_password_length: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultiFactorAuth")]
            pub multi_factor_auth: Option<crate::account_service::v1_13_0::MultiFactorAuth>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OAuth2")]
            pub oauth2: Option<crate::account_service::v1_13_0::ExternalAccountProvider>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PasswordExpirationDays"
            )]
            pub password_expiration_days: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrivilegeMap")]
            pub privilege_map: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RestrictedOemPrivileges"
            )]
            pub restricted_oem_privileges: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RestrictedPrivileges"
            )]
            pub restricted_privileges: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Roles")]
            pub roles: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedAccountTypes"
            )]
            pub supported_account_types: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedOEMAccountTypes"
            )]
            pub supported_oem_account_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TACACSplus")]
            pub tacac_splus: Option<crate::account_service::v1_13_0::ExternalAccountProvider>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::account_service::v1_13_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Authentication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthenticationType")]
            pub authentication_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKey")]
            pub encryption_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKeySet")]
            pub encryption_key_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KerberosKeytab")]
            pub kerberos_keytab: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Token")]
            pub token: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AuthenticationTypes {
            #[default]
            #[serde(rename = "KerberosKeytab")]
            KerberosKeytab,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Token")]
            Token,
            #[serde(rename = "UsernameAndPassword")]
            UsernameAndPassword,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CertificateMappingAttribute {
            #[default]
            #[serde(rename = "CommonName")]
            CommonName,
            #[serde(rename = "UserPrincipalName")]
            UserPrincipalName,
            #[serde(rename = "Whole")]
            Whole,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClientCertificate {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CertificateMappingAttribute"
            )]
            pub certificate_mapping_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RespondToUnauthenticatedClients"
            )]
            pub respond_to_unauthenticated_clients: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ExternalAccountProvider {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountProviderType"
            )]
            pub account_provider_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Authentication")]
            pub authentication: Option<crate::account_service::v1_13_0::Authentication>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LDAPService")]
            pub ldap_service: Option<crate::account_service::v1_13_0::LDAPService>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OAuth2Service")]
            pub oauth2_service: Option<crate::account_service::v1_13_0::OAuth2Service>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PasswordSet")]
            pub password_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Priority")]
            pub priority: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteRoleMapping")]
            pub remote_role_mapping: Option<Vec<crate::account_service::v1_13_0::RoleMapping>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Retries")]
            pub retries: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceAddresses")]
            pub service_addresses: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TACACSplusService")]
            pub tacac_splus_service: Option<crate::account_service::v1_13_0::TACACSplusService>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TimeoutSeconds")]
            pub timeout_seconds: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GoogleAuthenticator {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecretKey")]
            pub secret_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecretKeySet")]
            pub secret_key_set: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LDAPSearchSettings {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BaseDistinguishedNames"
            )]
            pub base_distinguished_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupNameAttribute")]
            pub group_name_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupsAttribute")]
            pub groups_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSHKeyAttribute")]
            pub ssh_key_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UsernameAttribute")]
            pub username_attribute: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LDAPService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SearchSettings")]
            pub search_settings: Option<crate::account_service::v1_13_0::LDAPSearchSettings>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocalAccountAuth {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
            #[serde(rename = "Fallback")]
            Fallback,
            #[serde(rename = "LocalFirst")]
            LocalFirst,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MFABypass {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BypassTypes")]
            pub bypass_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MicrosoftAuthenticator {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecretKey")]
            pub secret_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecretKeySet")]
            pub secret_key_set: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MultiFactorAuth {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientCertificate")]
            pub client_certificate: Option<crate::account_service::v1_13_0::ClientCertificate>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "GoogleAuthenticator"
            )]
            pub google_authenticator: Option<crate::account_service::v1_13_0::GoogleAuthenticator>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MicrosoftAuthenticator"
            )]
            pub microsoft_authenticator:
                Option<crate::account_service::v1_13_0::MicrosoftAuthenticator>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecurID")]
            pub secur_id: Option<crate::account_service::v1_13_0::SecurID>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OAuth2Mode {
            #[default]
            #[serde(rename = "Discovery")]
            Discovery,
            #[serde(rename = "Offline")]
            Offline,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OAuth2Service {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Audience")]
            pub audience: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Issuer")]
            pub issuer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Mode")]
            pub mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OAuthServiceSigningKeys"
            )]
            pub oauth_service_signing_keys: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RoleMapping {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalRole")]
            pub local_role: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MFABypass")]
            pub mfa_bypass: Option<crate::account_service::MFABypass>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteGroup")]
            pub remote_group: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteUser")]
            pub remote_user: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurID {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientId")]
            pub client_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientSecret")]
            pub client_secret: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientSecretSet")]
            pub client_secret_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServerURI")]
            pub server_uri: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TACACSplusPasswordExchangeProtocol {
            #[default]
            #[serde(rename = "ASCII")]
            ASCII,
            #[serde(rename = "CHAP")]
            CHAP,
            #[serde(rename = "MSCHAPv1")]
            MSCHAPv1,
            #[serde(rename = "MSCHAPv2")]
            MSCHAPv2,
            #[serde(rename = "PAP")]
            PAP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TACACSplusService {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthorizationService"
            )]
            pub authorization_service: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PasswordExchangeProtocols"
            )]
            pub password_exchange_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrivilegeLevelArgument"
            )]
            pub privilege_level_argument: Option<String>,
        }
    }
}
pub mod address_pool {
    pub mod v1_2_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ASNumberRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::address_pool::v1_2_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddressPool {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::address_pool::v1_2_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ethernet")]
            pub ethernet: Option<crate::address_pool::v1_2_2::Ethernet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::address_pool::v1_2_2::GenZ>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::address_pool::v1_2_2::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BFDSingleHopOnly {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DemandModeEnabled")]
            pub demand_mode_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DesiredMinTxIntervalMilliseconds"
            )]
            pub desired_min_tx_interval_milliseconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyChain")]
            pub key_chain: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalMultiplier")]
            pub local_multiplier: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeticulousModeEnabled"
            )]
            pub meticulous_mode_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RequiredMinRxIntervalMilliseconds"
            )]
            pub required_min_rx_interval_milliseconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourcePort")]
            pub source_port: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BGPEvpn {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AnycastGatewayIPAddress"
            )]
            pub anycast_gateway_ip_address: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AnycastGatewayMACAddress"
            )]
            pub anycast_gateway_mac_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ARPProxyEnabled")]
            pub arp_proxy_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ARPSupressionEnabled"
            )]
            pub arp_supression_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ESINumberRange")]
            pub esi_number_range: Option<crate::address_pool::v1_2_2::ESINumberRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EVINumberRange")]
            pub evi_number_range: Option<crate::address_pool::v1_2_2::EVINumberRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GatewayIPAddress")]
            pub gateway_ip_address: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "GatewayIPAddressRange"
            )]
            pub gateway_ip_address_range:
                Option<crate::address_pool::v1_2_2::GatewayIPAddressRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NDPProxyEnabled")]
            pub ndp_proxy_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NDPSupressionEnabled"
            )]
            pub ndp_supression_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RouteDistinguisherAdministratorSubfield"
            )]
            pub route_distinguisher_administrator_subfield: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RouteDistinguisherRange"
            )]
            pub route_distinguisher_range:
                Option<crate::address_pool::v1_2_2::RouteDistinguisherRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RouteTargetAdministratorSubfield"
            )]
            pub route_target_administrator_subfield: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RouteTargetRange")]
            pub route_target_range: Option<crate::address_pool::v1_2_2::RouteTargetRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnderlayMulticastEnabled"
            )]
            pub underlay_multicast_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnknownUnicastSuppressionEnabled"
            )]
            pub unknown_unicast_suppression_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VLANIdentifierAddressRange"
            )]
            pub vlan_identifier_address_range:
                Option<crate::address_pool::v1_2_2::VLANIdentifierAddressRange>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BGPNeighbor {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowOwnASEnabled")]
            pub allow_own_as_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CIDR")]
            pub cidr: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectRetrySeconds"
            )]
            pub connect_retry_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HoldTimeSeconds")]
            pub hold_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "KeepaliveIntervalSeconds"
            )]
            pub keepalive_interval_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalAS")]
            pub local_as: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LogStateChangesEnabled"
            )]
            pub log_state_changes_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPrefix")]
            pub max_prefix: Option<crate::address_pool::v1_2_2::MaxPrefix>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinimumAdvertisementIntervalSeconds"
            )]
            pub minimum_advertisement_interval_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PassiveModeEnabled")]
            pub passive_mode_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PathMTUDiscoveryEnabled"
            )]
            pub path_mtu_discovery_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PeerAS")]
            pub peer_as: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplacePeerASEnabled"
            )]
            pub replace_peer_as_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TCPMaxSegmentSizeBytes"
            )]
            pub tcp_max_segment_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TreatAsWithdrawEnabled"
            )]
            pub treat_as_withdraw_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BGPRoute {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdvertiseInactiveRoutesEnabled"
            )]
            pub advertise_inactive_routes_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DistanceExternal")]
            pub distance_external: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DistanceInternal")]
            pub distance_internal: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DistanceLocal")]
            pub distance_local: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExternalCompareRouterIdEnabled"
            )]
            pub external_compare_router_id_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FlapDampingEnabled")]
            pub flap_damping_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SendDefaultRouteEnabled"
            )]
            pub send_default_route_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CommonBGPProperties {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ASNumberRange")]
            pub as_number_range: Option<crate::address_pool::v1_2_2::ASNumberRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPNeighbor")]
            pub bgp_neighbor: Option<crate::address_pool::v1_2_2::BGPNeighbor>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPRoute")]
            pub bgp_route: Option<crate::address_pool::v1_2_2::BGPRoute>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GracefulRestart")]
            pub graceful_restart: Option<crate::address_pool::v1_2_2::GracefulRestart>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultiplePaths")]
            pub multiple_paths: Option<crate::address_pool::v1_2_2::MultiplePaths>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SendCommunityEnabled"
            )]
            pub send_community_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DHCP {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DHCPInterfaceMTUBytes"
            )]
            pub dhcp_interface_mtu_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPRelayEnabled")]
            pub dhcp_relay_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPServer")]
            pub dhcp_server: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EBGP {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowDuplicateASEnabled"
            )]
            pub allow_duplicate_as_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowOverrideASEnabled"
            )]
            pub allow_override_as_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AlwaysCompareMEDEnabled"
            )]
            pub always_compare_med_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ASNumberRange")]
            pub as_number_range: Option<crate::address_pool::v1_2_2::ASNumberRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPLocalPreference")]
            pub bgp_local_preference: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPNeighbor")]
            pub bgp_neighbor: Option<crate::address_pool::v1_2_2::BGPNeighbor>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPRoute")]
            pub bgp_route: Option<crate::address_pool::v1_2_2::BGPRoute>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPWeight")]
            pub bgp_weight: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GracefulRestart")]
            pub graceful_restart: Option<crate::address_pool::v1_2_2::GracefulRestart>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MED")]
            pub med: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultihopEnabled")]
            pub multihop_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultihopTTL")]
            pub multihop_ttl: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultiplePaths")]
            pub multiple_paths: Option<crate::address_pool::v1_2_2::MultiplePaths>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SendCommunityEnabled"
            )]
            pub send_community_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ESINumberRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EVINumberRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Ethernet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BFDSingleHopOnly")]
            pub bfd_single_hop_only: Option<crate::address_pool::v1_2_2::BFDSingleHopOnly>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BGPEvpn")]
            pub bgp_evpn: Option<crate::address_pool::v1_2_2::BGPEvpn>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EBGP")]
            pub ebgp: Option<crate::address_pool::v1_2_2::EBGP>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv4")]
            pub ipv4: Option<crate::address_pool::v1_2_2::IPv4>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultiProtocolEBGP")]
            pub multi_protocol_ebgp: Option<crate::address_pool::v1_2_2::EBGP>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MultiProtocolIBGP")]
            pub multi_protocol_ibgp: Option<crate::address_pool::v1_2_2::CommonBGPProperties>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GatewayIPAddressRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZ {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessKey")]
            pub access_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxCID")]
            pub max_cid: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSID")]
            pub max_sid: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinCID")]
            pub min_cid: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinSID")]
            pub min_sid: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GracefulRestart {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "GracefulRestartEnabled"
            )]
            pub graceful_restart_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HelperModeEnabled")]
            pub helper_mode_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StaleRoutesTimeSeconds"
            )]
            pub stale_routes_time_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TimeSeconds")]
            pub time_seconds: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv4 {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AnycastGatewayIPAddress"
            )]
            pub anycast_gateway_ip_address: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AnycastGatewayMACAddress"
            )]
            pub anycast_gateway_mac_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCP")]
            pub dhcp: Option<crate::address_pool::v1_2_2::DHCP>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DistributeIntoUnderlayEnabled"
            )]
            pub distribute_into_underlay_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DNSDomainName")]
            pub dns_domain_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DNSServer")]
            pub dns_server: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EBGPAddressRange")]
            pub ebgp_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FabricLinkAddressRange"
            )]
            pub fabric_link_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GatewayIPAddress")]
            pub gateway_ip_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostAddressRange")]
            pub host_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IBGPAddressRange")]
            pub ibgp_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LoopbackAddressRange"
            )]
            pub loopback_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressRange"
            )]
            pub management_address_range: Option<crate::address_pool::v1_2_2::IPv4AddressRange>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NativeVLAN")]
            pub native_vlan: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NTPOffsetHoursMinutes"
            )]
            pub ntp_offset_hours_minutes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NTPServer")]
            pub ntp_server: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NTPTimezone")]
            pub ntp_timezone: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemMACRange")]
            pub system_mac_range: Option<crate::address_pool::v1_2_2::SystemMACRange>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VLANIdentifierAddressRange"
            )]
            pub vlan_identifier_address_range:
                Option<crate::address_pool::v1_2_2::VLANIdentifierAddressRange>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv4AddressRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones")]
            pub zones: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones@odata.count")]
            pub zones_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MaxPrefix {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPrefixNumber")]
            pub max_prefix_number: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RestartTimerSeconds"
            )]
            pub restart_timer_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ShutdownThresholdPercentage"
            )]
            pub shutdown_threshold_percentage: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThresholdWarningOnlyEnabled"
            )]
            pub threshold_warning_only_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MultiplePaths {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaximumPaths")]
            pub maximum_paths: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UseMultiplePathsEnabled"
            )]
            pub use_multiple_paths_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RouteDistinguisherRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RouteTargetRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SystemMACRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLANIdentifierAddressRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lower")]
            pub lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Upper")]
            pub upper: Option<i64>,
        }
    }
}
pub mod address_pool_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct AddressPoolCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod aggregate {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Aggregate.AddElements"
            )]
            pub aggregate_add_elements: Option<crate::aggregate::v1_0_1::AddElements>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Aggregate.RemoveElements"
            )]
            pub aggregate_remove_elements: Option<crate::aggregate::v1_0_1::RemoveElements>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Aggregate.Reset")]
            pub aggregate_reset: Option<crate::aggregate::v1_0_1::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Aggregate.SetDefaultBootOrder"
            )]
            pub aggregate_set_default_boot_order:
                Option<crate::aggregate::v1_0_1::SetDefaultBootOrder>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::aggregate::v1_0_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddElements {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddElementsRequestBody {
            #[serde(rename = "Elements")]
            pub elements: Vec<crate::resource::Resource>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Aggregate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::aggregate::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Elements")]
            pub elements: Vec<crate::resource::Resource>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElementsCount")]
            pub elements_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Elements@odata.count"
            )]
            pub elements_odata_count: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveElements {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveElementsRequestBody {
            #[serde(rename = "Elements")]
            pub elements: Vec<crate::resource::Resource>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BatchSize")]
            pub batch_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DelayBetweenBatchesInSeconds"
            )]
            pub delay_between_batches_in_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrder {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrderRequestBody {}
    }
}
pub mod aggregate_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct AggregateCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod aggregation_service {
    pub mod v1_0_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#AggregationService.Reset"
            )]
            pub aggregation_service_reset: Option<crate::aggregation_service::v1_0_2::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#AggregationService.SetDefaultBootOrder"
            )]
            pub aggregation_service_set_default_boot_order:
                Option<crate::aggregation_service::v1_0_2::SetDefaultBootOrder>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::aggregation_service::v1_0_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AggregationService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::aggregation_service::v1_0_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Aggregates")]
            pub aggregates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AggregationSources")]
            pub aggregation_sources: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectionMethods")]
            pub connection_methods: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BatchSize")]
            pub batch_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DelayBetweenBatchesInSeconds"
            )]
            pub delay_between_batches_in_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
            #[serde(rename = "TargetURIs")]
            pub target_ur_is: Vec<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrder {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrderRequestBody {
            #[serde(rename = "Systems")]
            pub systems: Vec<crate::odata_v4::IdRef>,
        }
    }
}
pub mod aggregation_source {
    pub mod v1_3_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#AggregationSource.GenerateSSHIdentityKeyPair"
            )]
            pub aggregation_source_generate_ssh_identity_key_pair:
                Option<crate::aggregation_source::v1_3_1::GenerateSSHIdentityKeyPair>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#AggregationSource.RemoveSSHIdentityKeyPair"
            )]
            pub aggregation_source_remove_ssh_identity_key_pair:
                Option<crate::aggregation_source::v1_3_1::RemoveSSHIdentityKeyPair>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::aggregation_source::v1_3_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AggregationSource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::aggregation_source::v1_3_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AggregationType")]
            pub aggregation_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostName")]
            pub host_name: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::aggregation_source::v1_3_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SNMP")]
            pub snmp: Option<crate::aggregation_source::v1_3_1::SNMPSettings>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSHSettings")]
            pub ssh_settings: Option<crate::aggregation_source::v1_3_1::SSHSettingsType>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserName")]
            pub user_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AggregationType {
            #[default]
            #[serde(rename = "Full")]
            Full,
            #[serde(rename = "NotificationsOnly")]
            NotificationsOnly,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ECDSACurveType {
            #[default]
            #[serde(rename = "NISTB233")]
            NISTB233,
            #[serde(rename = "NISTB409")]
            NISTB409,
            #[serde(rename = "NISTK163")]
            NISTK163,
            #[serde(rename = "NISTK233")]
            NISTK233,
            #[serde(rename = "NISTK283")]
            NISTK283,
            #[serde(rename = "NISTK409")]
            NISTK409,
            #[serde(rename = "NISTP192")]
            NISTP192,
            #[serde(rename = "NISTP224")]
            NISTP224,
            #[serde(rename = "NISTP256")]
            NISTP256,
            #[serde(rename = "NISTP384")]
            NISTP384,
            #[serde(rename = "NISTP521")]
            NISTP521,
            #[serde(rename = "NISTT571")]
            NISTT571,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenerateSSHIdentityKeyPair {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenerateSSHIdentityKeyPairRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Curve")]
            pub curve: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyLength")]
            pub key_length: Option<i64>,
            #[serde(rename = "KeyType")]
            pub key_type: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectionMethod")]
            pub connection_method: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourcesAccessed")]
            pub resources_accessed: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResourcesAccessed@odata.count"
            )]
            pub resources_accessed_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveSSHIdentityKeyPair {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveSSHIdentityKeyPairRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPAuthenticationProtocols {
            #[default]
            #[serde(rename = "CommunityString")]
            CommunityString,
            #[serde(rename = "HMAC128_SHA224")]
            HMAC128SHA224,
            #[serde(rename = "HMAC192_SHA256")]
            HMAC192SHA256,
            #[serde(rename = "HMAC256_SHA384")]
            HMAC256SHA384,
            #[serde(rename = "HMAC384_SHA512")]
            HMAC384SHA512,
            #[serde(rename = "HMAC_MD5")]
            HMACMD5,
            #[serde(rename = "HMAC_SHA96")]
            HMACSHA96,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPEncryptionProtocols {
            #[default]
            #[serde(rename = "CBC_DES")]
            CBCDES,
            #[serde(rename = "CFB128_AES128")]
            CFB128AES128,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SNMPSettings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthenticationKey")]
            pub authentication_key: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationKeySet"
            )]
            pub authentication_key_set: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationProtocol"
            )]
            pub authentication_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKey")]
            pub encryption_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKeySet")]
            pub encryption_key_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionProtocol")]
            pub encryption_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TrapCommunity")]
            pub trap_community: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SSHKeyType {
            #[default]
            #[serde(rename = "DSA")]
            DSA,
            #[serde(rename = "ECDSA")]
            ECDSA,
            #[serde(rename = "Ed25519")]
            Ed25519,
            #[serde(rename = "RSA")]
            RSA,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SSHSettingsType {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PresentedPublicHostKey"
            )]
            pub presented_public_host_key: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PresentedPublicHostKeyTimestamp"
            )]
            pub presented_public_host_key_timestamp: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PublicIdentityKey")]
            pub public_identity_key: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrustedPublicHostKeys"
            )]
            pub trusted_public_host_keys: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UserAuthenticationMethod"
            )]
            pub user_authentication_method: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum UserAuthenticationMethod {
            #[default]
            #[serde(rename = "Password")]
            Password,
            #[serde(rename = "PublicKey")]
            PublicKey,
        }
    }
}
pub mod aggregation_source_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct AggregationSourceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod allow_deny {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::allow_deny::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AllowDeny {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::allow_deny::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowType")]
            pub allow_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DestinationPortLower"
            )]
            pub destination_port_lower: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DestinationPortUpper"
            )]
            pub destination_port_upper: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Direction")]
            pub direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IANAProtocolNumber")]
            pub iana_protocol_number: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPAddressLower")]
            pub ip_address_lower: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPAddressType")]
            pub ip_address_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPAddressUpper")]
            pub ip_address_upper: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourcePortLower")]
            pub source_port_lower: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourcePortUpper")]
            pub source_port_upper: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StatefulSession")]
            pub stateful_session: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AllowType {
            #[default]
            #[serde(rename = "Allow")]
            Allow,
            #[serde(rename = "Deny")]
            Deny,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DataDirection {
            #[default]
            #[serde(rename = "Egress")]
            Egress,
            #[serde(rename = "Ingress")]
            Ingress,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPAddressType {
            #[default]
            #[serde(rename = "IPv4")]
            IPv4,
            #[serde(rename = "IPv6")]
            IPv6,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod allow_deny_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct AllowDenyCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod assembly {
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::assembly::v1_4_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Assembly {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::assembly::v1_4_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assemblies")]
            pub assemblies: Option<Vec<crate::assembly::v1_4_0::AssemblyData>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Assemblies@odata.count"
            )]
            pub assemblies_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AssemblyData {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::assembly::v1_4_0::AssemblyDataActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BinaryDataURI")]
            pub binary_data_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EngineeringChangeLevel"
            )]
            pub engineering_change_level: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Producer")]
            pub producer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Vendor")]
            pub vendor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AssemblyDataActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::assembly::v1_4_0::AssemblyDataOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AssemblyDataOemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod battery {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Battery.Calibrate")]
            pub battery_calibrate: Option<crate::battery::v1_2_1::Calibrate>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Battery.Reset")]
            pub battery_reset: Option<crate::battery::v1_2_1::Reset>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Battery.SelfTest")]
            pub battery_self_test: Option<crate::battery::v1_2_1::SelfTest>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::battery::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Battery {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::battery::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacityActualAmpHours"
            )]
            pub capacity_actual_amp_hours: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacityActualWattHours"
            )]
            pub capacity_actual_watt_hours: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacityRatedAmpHours"
            )]
            pub capacity_rated_amp_hours: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacityRatedWattHours"
            )]
            pub capacity_rated_watt_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChargeState")]
            pub charge_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::battery::v1_2_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxChargeRateAmps")]
            pub max_charge_rate_amps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxChargeVoltage")]
            pub max_charge_voltage: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxDischargeRateAmps"
            )]
            pub max_discharge_rate_amps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StateOfHealthPercent"
            )]
            pub state_of_health_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Calibrate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CalibrateRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ChargeState {
            #[default]
            #[serde(rename = "Charging")]
            Charging,
            #[serde(rename = "Discharging")]
            Discharging,
            #[serde(rename = "Idle")]
            Idle,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory@odata.count")]
            pub memory_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageControllers")]
            pub storage_controllers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageControllers@odata.count"
            )]
            pub storage_controllers_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SelfTest {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SelfTestRequestBody {}
    }
}
pub mod battery_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct BatteryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod battery_metrics {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::battery_metrics::v1_0_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BatteryMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::battery_metrics::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CellVoltages")]
            pub cell_voltages: Option<Vec<crate::sensor::SensorVoltageExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CellVoltages@odata.count"
            )]
            pub cell_voltages_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChargePercent")]
            pub charge_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DischargeCycles")]
            pub discharge_cycles: Option<f64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputCurrentAmps")]
            pub input_current_amps: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputVoltage")]
            pub input_voltage: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutputCurrentAmps")]
            pub output_current_amps: Option<Vec<crate::sensor::SensorCurrentExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OutputCurrentAmps@odata.count"
            )]
            pub output_current_amps_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutputVoltages")]
            pub output_voltages: Option<Vec<crate::sensor::SensorVoltageExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OutputVoltages@odata.count"
            )]
            pub output_voltages_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StoredChargeAmpHours"
            )]
            pub stored_charge_amp_hours: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StoredEnergyWattHours"
            )]
            pub stored_energy_watt_hours: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TemperatureCelsius")]
            pub temperature_celsius: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod bios {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Bios.ChangePassword"
            )]
            pub bios_change_password: Option<crate::bios::v1_2_1::ChangePassword>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Bios.ResetBios")]
            pub bios_reset_bios: Option<crate::bios::v1_2_1::ResetBios>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::bios::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Attributes {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Bios {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::bios::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AttributeRegistry")]
            pub attribute_registry: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Attributes")]
            pub attributes: Option<crate::bios::v1_2_1::Attributes>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::bios::v1_2_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResetBiosToDefaultsPending"
            )]
            pub reset_bios_to_defaults_pending: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ChangePassword {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ChangePasswordRequestBody {
            #[serde(rename = "NewPassword")]
            pub new_password: String,
            #[serde(rename = "OldPassword")]
            pub old_password: String,
            #[serde(rename = "PasswordName")]
            pub password_name: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ActiveSoftwareImage"
            )]
            pub active_software_image: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareImages")]
            pub software_images: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SoftwareImages@odata.count"
            )]
            pub software_images_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetBios {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetBiosRequestBody {}
    }
}
pub mod boot_option {
    pub mod v1_0_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::boot_option::v1_0_4::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BootOption {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::boot_option::v1_0_4::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Alias")]
            pub alias: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootOptionEnabled")]
            pub boot_option_enabled: Option<bool>,
            #[serde(rename = "BootOptionReference")]
            pub boot_option_reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DisplayName")]
            pub display_name: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiDevicePath")]
            pub uefi_device_path: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod boot_option_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct BootOptionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod cable {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::cable::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Cable {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::cable::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CableClass")]
            pub cable_class: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CableStatus")]
            pub cable_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CableType")]
            pub cable_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DownstreamConnectorTypes"
            )]
            pub downstream_connector_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DownstreamName")]
            pub downstream_name: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LengthMeters")]
            pub length_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::cable::v1_2_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpstreamConnectorTypes"
            )]
            pub upstream_connector_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpstreamName")]
            pub upstream_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserDescription")]
            pub user_description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Vendor")]
            pub vendor: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CableClass {
            #[default]
            #[serde(rename = "Fabric")]
            Fabric,
            #[serde(rename = "Fan")]
            Fan,
            #[serde(rename = "General")]
            General,
            #[serde(rename = "Network")]
            Network,
            #[serde(rename = "PCIe")]
            PCIe,
            #[serde(rename = "Power")]
            Power,
            #[serde(rename = "Serial")]
            Serial,
            #[serde(rename = "Storage")]
            Storage,
            #[serde(rename = "USB")]
            USB,
            #[serde(rename = "Video")]
            Video,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CableStatus {
            #[default]
            #[serde(rename = "Degraded")]
            Degraded,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Failed")]
            Failed,
            #[serde(rename = "Normal")]
            Normal,
            #[serde(rename = "SetByService")]
            SetByService,
            #[serde(rename = "Testing")]
            Testing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectorType {
            #[default]
            #[serde(rename = "ACPower")]
            ACPower,
            #[serde(rename = "CDFP")]
            CDFP,
            #[serde(rename = "DB9")]
            DB9,
            #[serde(rename = "DCPower")]
            DCPower,
            #[serde(rename = "DisplayPort")]
            DisplayPort,
            #[serde(rename = "HDMI")]
            HDMI,
            #[serde(rename = "ICI")]
            ICI,
            #[serde(rename = "IPASS")]
            IPASS,
            #[serde(rename = "OSFP")]
            OSFP,
            #[serde(rename = "PCIe")]
            PCIe,
            #[serde(rename = "Proprietary")]
            Proprietary,
            #[serde(rename = "QSFP")]
            QSFP,
            #[serde(rename = "RJ45")]
            RJ45,
            #[serde(rename = "SATA")]
            SATA,
            #[serde(rename = "SCSI")]
            SCSI,
            #[serde(rename = "SFP")]
            SFP,
            #[serde(rename = "SFPPlus")]
            SFPPlus,
            #[serde(rename = "SlimSAS")]
            SlimSAS,
            #[serde(rename = "USBA")]
            USBA,
            #[serde(rename = "USBC")]
            USBC,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DownstreamChassis")]
            pub downstream_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DownstreamChassis@odata.count"
            )]
            pub downstream_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DownstreamPorts")]
            pub downstream_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DownstreamPorts@odata.count"
            )]
            pub downstream_ports_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DownstreamResources"
            )]
            pub downstream_resources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DownstreamResources@odata.count"
            )]
            pub downstream_resources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpstreamChassis")]
            pub upstream_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpstreamChassis@odata.count"
            )]
            pub upstream_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpstreamPorts")]
            pub upstream_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpstreamPorts@odata.count"
            )]
            pub upstream_ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpstreamResources")]
            pub upstream_resources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpstreamResources@odata.count"
            )]
            pub upstream_resources_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod cable_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CableCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod capacity {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum CapacitySource {
        CapacityV1N0N4CapacitySource(crate::capacity::v1_0_4::CapacitySource),
        CapacityV1N1N4CapacitySource(crate::capacity::v1_1_4::CapacitySource),
        CapacityV1N2N1CapacitySource(crate::capacity::v1_2_1::CapacitySource),
        OdataV4IdRef(crate::odata_v4::IdRef),
    }
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Capacity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Data")]
            pub data: Option<crate::capacity::v1_0_0::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsThinProvisioned")]
            pub is_thin_provisioned: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metadata")]
            pub metadata: Option<crate::capacity::v1_0_0::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Snapshot")]
            pub snapshot: Option<crate::capacity::v1_0_0::CapacityInfo>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacityInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedBytes")]
            pub allocated_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsumedBytes")]
            pub consumed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GuaranteedBytes")]
            pub guaranteed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvisionedBytes")]
            pub provisioned_bytes: Option<i64>,
        }
    }
    pub mod v1_0_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Capacity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Data")]
            pub data: Option<crate::capacity::v1_0_4::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsThinProvisioned")]
            pub is_thin_provisioned: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metadata")]
            pub metadata: Option<crate::capacity::v1_0_4::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Snapshot")]
            pub snapshot: Option<crate::capacity::v1_0_4::CapacityInfo>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacityInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedBytes")]
            pub allocated_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsumedBytes")]
            pub consumed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GuaranteedBytes")]
            pub guaranteed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvisionedBytes")]
            pub provisioned_bytes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacitySource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidedCapacity")]
            pub provided_capacity: Option<crate::capacity::v1_0_4::Capacity>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidedClassOfService"
            )]
            pub provided_class_of_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingDrives")]
            pub providing_drives: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingPools")]
            pub providing_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingVolumes")]
            pub providing_volumes: Option<crate::odata_v4::IdRef>,
        }
    }
    pub mod v1_1_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::capacity::v1_1_4::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Capacity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Data")]
            pub data: Option<crate::capacity::v1_1_4::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsThinProvisioned")]
            pub is_thin_provisioned: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metadata")]
            pub metadata: Option<crate::capacity::v1_1_4::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Snapshot")]
            pub snapshot: Option<crate::capacity::v1_1_4::CapacityInfo>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacityInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedBytes")]
            pub allocated_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsumedBytes")]
            pub consumed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GuaranteedBytes")]
            pub guaranteed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvisionedBytes")]
            pub provisioned_bytes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacitySource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::capacity::v1_1_4::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidedCapacity")]
            pub provided_capacity: Option<crate::capacity::v1_1_4::Capacity>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidedClassOfService"
            )]
            pub provided_class_of_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingDrives")]
            pub providing_drives: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingMemory")]
            pub providing_memory: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidingMemoryChunks"
            )]
            pub providing_memory_chunks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingPools")]
            pub providing_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingVolumes")]
            pub providing_volumes: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::capacity::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Capacity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Data")]
            pub data: Option<crate::capacity::v1_2_1::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsThinProvisioned")]
            pub is_thin_provisioned: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metadata")]
            pub metadata: Option<crate::capacity::v1_2_1::CapacityInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Snapshot")]
            pub snapshot: Option<crate::capacity::v1_2_1::CapacityInfo>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacityInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedBytes")]
            pub allocated_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsumedBytes")]
            pub consumed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GuaranteedBytes")]
            pub guaranteed_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvisionedBytes")]
            pub provisioned_bytes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CapacitySource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::capacity::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidedCapacity")]
            pub provided_capacity: Option<crate::capacity::v1_2_1::Capacity>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidedClassOfService"
            )]
            pub provided_class_of_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingDrives")]
            pub providing_drives: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingMemory")]
            pub providing_memory: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidingMemoryChunks"
            )]
            pub providing_memory_chunks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingPools")]
            pub providing_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvidingVolumes")]
            pub providing_volumes: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod certificate {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum CertificateType {
        #[default]
        #[serde(rename = "PEM")]
        PEM,
        #[serde(rename = "PEMchain")]
        PEMchain,
        #[serde(rename = "PKCS7")]
        PKCS7,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum KeyUsage {
        #[default]
        #[serde(rename = "CRLSigning")]
        CRLSigning,
        #[serde(rename = "ClientAuthentication")]
        ClientAuthentication,
        #[serde(rename = "CodeSigning")]
        CodeSigning,
        #[serde(rename = "DataEncipherment")]
        DataEncipherment,
        #[serde(rename = "DecipherOnly")]
        DecipherOnly,
        #[serde(rename = "DigitalSignature")]
        DigitalSignature,
        #[serde(rename = "EmailProtection")]
        EmailProtection,
        #[serde(rename = "EncipherOnly")]
        EncipherOnly,
        #[serde(rename = "KeyAgreement")]
        KeyAgreement,
        #[serde(rename = "KeyCertSign")]
        KeyCertSign,
        #[serde(rename = "KeyEncipherment")]
        KeyEncipherment,
        #[serde(rename = "NonRepudiation")]
        NonRepudiation,
        #[serde(rename = "OCSPSigning")]
        OCSPSigning,
        #[serde(rename = "ServerAuthentication")]
        ServerAuthentication,
        #[serde(rename = "Timestamping")]
        Timestamping,
    }
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Certificate.Rekey")]
            pub certificate_rekey: Option<crate::certificate::v1_7_0::Rekey>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Certificate.Renew")]
            pub certificate_renew: Option<crate::certificate::v1_7_0::Renew>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::certificate::v1_7_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Certificate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::certificate::v1_7_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CertificateString")]
            pub certificate_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CertificateType")]
            pub certificate_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CertificateUsageTypes"
            )]
            pub certificate_usage_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fingerprint")]
            pub fingerprint: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FingerprintHashAlgorithm"
            )]
            pub fingerprint_hash_algorithm: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Issuer")]
            pub issuer: Option<crate::certificate::v1_7_0::Identifier>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyUsage")]
            pub key_usage: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::certificate::v1_7_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignatureAlgorithm")]
            pub signature_algorithm: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SPDM")]
            pub spdm: Option<crate::certificate::v1_7_0::SPDM>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Subject")]
            pub subject: Option<crate::certificate::v1_7_0::Identifier>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiSignatureOwner")]
            pub uefi_signature_owner: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ValidNotAfter")]
            pub valid_not_after: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ValidNotBefore")]
            pub valid_not_before: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CertificateUsageType {
            #[default]
            #[serde(rename = "BIOS")]
            BIOS,
            #[serde(rename = "Device")]
            Device,
            #[serde(rename = "Platform")]
            Platform,
            #[serde(rename = "SSH")]
            SSH,
            #[serde(rename = "User")]
            User,
            #[serde(rename = "Web")]
            Web,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalCommonNames"
            )]
            pub additional_common_names: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalOrganizationalUnits"
            )]
            pub additional_organizational_units: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AlternativeNames")]
            pub alternative_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CommonName")]
            pub common_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DisplayString")]
            pub display_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DomainComponents")]
            pub domain_components: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Email")]
            pub email: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Organization")]
            pub organization: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OrganizationalUnit")]
            pub organizational_unit: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "State")]
            pub state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Issuer")]
            pub issuer: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Subjects")]
            pub subjects: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Subjects@odata.count"
            )]
            pub subjects_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rekey {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RekeyRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChallengePassword")]
            pub challenge_password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyBitLength")]
            pub key_bit_length: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyCurveId")]
            pub key_curve_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyPairAlgorithm")]
            pub key_pair_algorithm: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RekeyResponse {
            #[serde(rename = "Certificate")]
            pub certificate: crate::odata_v4::IdRef,
            #[serde(rename = "CSRString")]
            pub csr_string: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Renew {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RenewRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChallengePassword")]
            pub challenge_password: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RenewResponse {
            #[serde(rename = "Certificate")]
            pub certificate: crate::odata_v4::IdRef,
            #[serde(rename = "CSRString")]
            pub csr_string: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDM {
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotId")]
            pub slot_id: Option<i64>,
        }
    }
}
pub mod certificate_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CertificateCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod certificate_locations {
    pub mod v1_0_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::certificate_locations::v1_0_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CertificateLocations {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::certificate_locations::v1_0_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::certificate_locations::v1_0_2::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Certificates@odata.count"
            )]
            pub certificates_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod certificate_service {
    pub mod v1_0_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#CertificateService.GenerateCSR"
            )]
            pub certificate_service_generate_csr:
                Option<crate::certificate_service::v1_0_4::GenerateCSR>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#CertificateService.ReplaceCertificate"
            )]
            pub certificate_service_replace_certificate:
                Option<crate::certificate_service::v1_0_4::ReplaceCertificate>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::certificate_service::v1_0_4::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CertificateService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::certificate_service::v1_0_4::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CertificateLocations"
            )]
            pub certificate_locations: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenerateCSR {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenerateCSRRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AlternativeNames")]
            pub alternative_names: Option<Vec<String>>,
            #[serde(rename = "CertificateCollection")]
            pub certificate_collection: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChallengePassword")]
            pub challenge_password: Option<String>,
            #[serde(rename = "City")]
            pub city: String,
            #[serde(rename = "CommonName")]
            pub common_name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactPerson")]
            pub contact_person: Option<String>,
            #[serde(rename = "Country")]
            pub country: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Email")]
            pub email: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GivenName")]
            pub given_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Initials")]
            pub initials: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyBitLength")]
            pub key_bit_length: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyCurveId")]
            pub key_curve_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyPairAlgorithm")]
            pub key_pair_algorithm: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyUsage")]
            pub key_usage: Option<Vec<String>>,
            #[serde(rename = "Organization")]
            pub organization: String,
            #[serde(rename = "OrganizationalUnit")]
            pub organizational_unit: String,
            #[serde(rename = "State")]
            pub state: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Surname")]
            pub surname: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UnstructuredName")]
            pub unstructured_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenerateCSRResponse {
            #[serde(rename = "CertificateCollection")]
            pub certificate_collection: crate::odata_v4::IdRef,
            #[serde(rename = "CSRString")]
            pub csr_string: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ReplaceCertificate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ReplaceCertificateRequestBody {
            #[serde(rename = "CertificateString")]
            pub certificate_string: String,
            #[serde(rename = "CertificateType")]
            pub certificate_type: String,
            #[serde(rename = "CertificateUri")]
            pub certificate_uri: crate::odata_v4::IdRef,
        }
    }
}
pub mod chassis {
    pub mod v1_23_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Chassis.Reset")]
            pub chassis_reset: Option<crate::chassis::v1_23_0::Reset>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::chassis::v1_23_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Chassis {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::chassis::v1_23_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "ChassisType")]
            pub chassis_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Controls")]
            pub controls: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DepthMm")]
            pub depth_mm: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceManagerURIs"
            )]
            pub electrical_source_manager_ur_is: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceNames"
            )]
            pub electrical_source_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentalClass")]
            pub environmental_class: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricAdapters")]
            pub fabric_adapters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HeightMm")]
            pub height_mm: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::chassis::v1_23_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogServices")]
            pub log_services: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPowerWatts")]
            pub max_power_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaControllers")]
            pub media_controllers: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinPowerWatts")]
            pub min_power_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkAdapters")]
            pub network_adapters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevices")]
            pub pcie_devices: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeSlots")]
            pub pcie_slots: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSecurity")]
            pub physical_security: Option<crate::chassis::v1_23_0::PhysicalSecurity>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Power")]
            pub power: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSubsystem")]
            pub power_subsystem: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PoweredByParent")]
            pub powered_by_parent: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sensors")]
            pub sensors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Thermal")]
            pub thermal: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThermalDirection")]
            pub thermal_direction: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalManagedByParent"
            )]
            pub thermal_managed_by_parent: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThermalSubsystem")]
            pub thermal_subsystem: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TrustedComponents")]
            pub trusted_components: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WeightKg")]
            pub weight_kg: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WidthMm")]
            pub width_mm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ChassisType {
            #[default]
            #[serde(rename = "Blade")]
            Blade,
            #[serde(rename = "Card")]
            Card,
            #[serde(rename = "Cartridge")]
            Cartridge,
            #[serde(rename = "Component")]
            Component,
            #[serde(rename = "Drawer")]
            Drawer,
            #[serde(rename = "Enclosure")]
            Enclosure,
            #[serde(rename = "Expansion")]
            Expansion,
            #[serde(rename = "HeatExchanger")]
            HeatExchanger,
            #[serde(rename = "IPBasedDrive")]
            IPBasedDrive,
            #[serde(rename = "ImmersionTank")]
            ImmersionTank,
            #[serde(rename = "Module")]
            Module,
            #[serde(rename = "Other")]
            Other,
            #[serde(rename = "Pod")]
            Pod,
            #[serde(rename = "Rack")]
            Rack,
            #[serde(rename = "RackGroup")]
            RackGroup,
            #[serde(rename = "RackMount")]
            RackMount,
            #[serde(rename = "Row")]
            Row,
            #[serde(rename = "Shelf")]
            Shelf,
            #[serde(rename = "Sidecar")]
            Sidecar,
            #[serde(rename = "Sled")]
            Sled,
            #[serde(rename = "StandAlone")]
            StandAlone,
            #[serde(rename = "StorageEnclosure")]
            StorageEnclosure,
            #[serde(rename = "Zone")]
            Zone,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EnvironmentalClass {
            #[default]
            #[serde(rename = "A1")]
            A1,
            #[serde(rename = "A2")]
            A2,
            #[serde(rename = "A3")]
            A3,
            #[serde(rename = "A4")]
            A4,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IndicatorLED {
            #[default]
            #[serde(rename = "Blinking")]
            Blinking,
            #[serde(rename = "Lit")]
            Lit,
            #[serde(rename = "Off")]
            Off,
            #[serde(rename = "Unknown")]
            Unknown,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IntrusionSensor {
            #[default]
            #[serde(rename = "HardwareIntrusion")]
            HardwareIntrusion,
            #[serde(rename = "Normal")]
            Normal,
            #[serde(rename = "TamperingDetected")]
            TamperingDetected,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IntrusionSensorReArm {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Manual")]
            Manual,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cables")]
            pub cables: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cables@odata.count")]
            pub cables_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystems")]
            pub computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComputerSystems@odata.count"
            )]
            pub computer_systems_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedCoolingLoops"
            )]
            pub connected_cooling_loops: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedCoolingLoops@odata.count"
            )]
            pub connected_cooling_loops_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContainedBy")]
            pub contained_by: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contains")]
            pub contains: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Contains@odata.count"
            )]
            pub contains_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CooledBy")]
            pub cooled_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CooledBy@odata.count"
            )]
            pub cooled_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingUnits")]
            pub cooling_units: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolingUnits@odata.count"
            )]
            pub cooling_units_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives@odata.count")]
            pub drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Facility")]
            pub facility: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fans")]
            pub fans: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fans@odata.count")]
            pub fans_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagersInChassis")]
            pub managers_in_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagersInChassis@odata.count"
            )]
            pub managers_in_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevices")]
            pub pcie_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeDevices@odata.count"
            )]
            pub pcie_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerDistribution")]
            pub power_distribution: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOutlets")]
            pub power_outlets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOutlets@odata.count"
            )]
            pub power_outlets_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplies")]
            pub power_supplies: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerSupplies@odata.count"
            )]
            pub power_supplies_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PoweredBy")]
            pub powered_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PoweredBy@odata.count"
            )]
            pub powered_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlocks")]
            pub resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResourceBlocks@odata.count"
            )]
            pub resource_blocks_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Storage@odata.count"
            )]
            pub storage_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switches")]
            pub switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Switches@odata.count"
            )]
            pub switches_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PhysicalSecurity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "IntrusionSensor")]
            pub intrusion_sensor: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IntrusionSensorNumber"
            )]
            pub intrusion_sensor_number: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IntrusionSensorReArm"
            )]
            pub intrusion_sensor_re_arm: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ThermalDirection {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "Sealed")]
            Sealed,
            #[serde(rename = "TopExhaust")]
            TopExhaust,
        }
    }
}
pub mod chassis_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ChassisCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod circuit {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum BreakerStates {
        #[default]
        #[serde(rename = "Normal")]
        Normal,
        #[serde(rename = "Off")]
        Off,
        #[serde(rename = "Tripped")]
        Tripped,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum NominalVoltageType {
        #[default]
        #[serde(rename = "AC100To127V")]
        AC100To127V,
        #[serde(rename = "AC100To240V")]
        AC100To240V,
        #[serde(rename = "AC100To277V")]
        AC100To277V,
        #[serde(rename = "AC120V")]
        AC120V,
        #[serde(rename = "AC200To240V")]
        AC200To240V,
        #[serde(rename = "AC200To277V")]
        AC200To277V,
        #[serde(rename = "AC208V")]
        AC208V,
        #[serde(rename = "AC230V")]
        AC230V,
        #[serde(rename = "AC240AndDC380V")]
        AC240AndDC380V,
        #[serde(rename = "AC240V")]
        AC240V,
        #[serde(rename = "AC277AndDC380V")]
        AC277AndDC380V,
        #[serde(rename = "AC277V")]
        AC277V,
        #[serde(rename = "AC400V")]
        AC400V,
        #[serde(rename = "AC480V")]
        AC480V,
        #[serde(rename = "DC12V")]
        DC12V,
        #[serde(rename = "DC16V")]
        DC16V,
        #[serde(rename = "DC1_8V")]
        DC18V,
        #[serde(rename = "DC240V")]
        DC240V,
        #[serde(rename = "DC380V")]
        DC380V,
        #[serde(rename = "DC3_3V")]
        DC33V,
        #[serde(rename = "DC48V")]
        DC48V,
        #[serde(rename = "DC5V")]
        DC5V,
        #[serde(rename = "DC9V")]
        DC9V,
        #[serde(rename = "DCNeg48V")]
        DCNeg48V,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PhaseWiringType {
        #[default]
        #[serde(rename = "OneOrTwoPhase3Wire")]
        OneOrTwoPhase3Wire,
        #[serde(rename = "OnePhase3Wire")]
        OnePhase3Wire,
        #[serde(rename = "ThreePhase4Wire")]
        ThreePhase4Wire,
        #[serde(rename = "ThreePhase5Wire")]
        ThreePhase5Wire,
        #[serde(rename = "TwoPhase3Wire")]
        TwoPhase3Wire,
        #[serde(rename = "TwoPhase4Wire")]
        TwoPhase4Wire,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PlugType {
        #[default]
        #[serde(rename = "California_CS8265")]
        CaliforniaCS8265,
        #[serde(rename = "California_CS8365")]
        CaliforniaCS8365,
        #[serde(rename = "Field_208V_3P4W_60A")]
        Field208V3P4W60A,
        #[serde(rename = "Field_400V_3P5W_32A")]
        Field400V3P5W32A,
        #[serde(rename = "IEC_60309_316P6")]
        IECN60309316P6,
        #[serde(rename = "IEC_60309_332P6")]
        IECN60309332P6,
        #[serde(rename = "IEC_60309_363P6")]
        IECN60309363P6,
        #[serde(rename = "IEC_60309_460P9")]
        IECN60309460P9,
        #[serde(rename = "IEC_60309_516P6")]
        IECN60309516P6,
        #[serde(rename = "IEC_60309_532P6")]
        IECN60309532P6,
        #[serde(rename = "IEC_60309_560P9")]
        IECN60309560P9,
        #[serde(rename = "IEC_60309_563P6")]
        IECN60309563P6,
        #[serde(rename = "IEC_60320_C14")]
        IECN60320C14,
        #[serde(rename = "IEC_60320_C20")]
        IECN60320C20,
        #[serde(rename = "NEMA_5_15P")]
        NEMAN515P,
        #[serde(rename = "NEMA_5_20P")]
        NEMAN520P,
        #[serde(rename = "NEMA_6_15P")]
        NEMAN615P,
        #[serde(rename = "NEMA_6_20P")]
        NEMAN620P,
        #[serde(rename = "NEMA_L14_20P")]
        NEMAL1420P,
        #[serde(rename = "NEMA_L14_30P")]
        NEMAL1430P,
        #[serde(rename = "NEMA_L15_20P")]
        NEMAL1520P,
        #[serde(rename = "NEMA_L15_30P")]
        NEMAL1530P,
        #[serde(rename = "NEMA_L21_20P")]
        NEMAL2120P,
        #[serde(rename = "NEMA_L21_30P")]
        NEMAL2130P,
        #[serde(rename = "NEMA_L22_20P")]
        NEMAL2220P,
        #[serde(rename = "NEMA_L22_30P")]
        NEMAL2230P,
        #[serde(rename = "NEMA_L5_15P")]
        NEMAL515P,
        #[serde(rename = "NEMA_L5_20P")]
        NEMAL520P,
        #[serde(rename = "NEMA_L5_30P")]
        NEMAL530P,
        #[serde(rename = "NEMA_L6_15P")]
        NEMAL615P,
        #[serde(rename = "NEMA_L6_20P")]
        NEMAL620P,
        #[serde(rename = "NEMA_L6_30P")]
        NEMAL630P,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PowerRestorePolicyTypes {
        #[default]
        #[serde(rename = "AlwaysOff")]
        AlwaysOff,
        #[serde(rename = "AlwaysOn")]
        AlwaysOn,
        #[serde(rename = "LastState")]
        LastState,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PowerState {
        #[default]
        #[serde(rename = "Off")]
        Off,
        #[serde(rename = "On")]
        On,
        #[serde(rename = "PowerCycle")]
        PowerCycle,
    }
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Circuit.BreakerControl"
            )]
            pub circuit_breaker_control: Option<crate::circuit::v1_7_0::BreakerControl>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Circuit.PowerControl"
            )]
            pub circuit_power_control: Option<crate::circuit::v1_7_0::PowerControl>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Circuit.ResetMetrics"
            )]
            pub circuit_reset_metrics: Option<crate::circuit::v1_7_0::ResetMetrics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::circuit::v1_7_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BreakerControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BreakerControlRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Circuit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::circuit::v1_7_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BreakerState")]
            pub breaker_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CircuitType")]
            pub circuit_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfigurationLocked"
            )]
            pub configuration_locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CriticalCircuit")]
            pub critical_circuit: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentAmps")]
            pub current_amps: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalConsumerNames"
            )]
            pub electrical_consumer_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalContext")]
            pub electrical_context: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceManagerURI"
            )]
            pub electrical_source_manager_uri: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceName"
            )]
            pub electrical_source_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FrequencyHz")]
            pub frequency_hz: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::circuit::v1_7_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NominalVoltage")]
            pub nominal_voltage: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseWiringType")]
            pub phase_wiring_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlugType")]
            pub plug_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PolyPhaseCurrentAmps"
            )]
            pub poly_phase_current_amps: Option<crate::circuit::v1_7_0::CurrentSensors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PolyPhaseEnergykWh")]
            pub poly_phase_energyk_wh: Option<crate::circuit::v1_7_0::EnergySensors>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PolyPhasePowerWatts"
            )]
            pub poly_phase_power_watts: Option<crate::circuit::v1_7_0::PowerSensors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PolyPhaseVoltage")]
            pub poly_phase_voltage: Option<crate::circuit::v1_7_0::VoltageSensors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerControlLocked")]
            pub power_control_locked: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerCycleDelaySeconds"
            )]
            pub power_cycle_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerEnabled")]
            pub power_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLoadPercent")]
            pub power_load_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOffDelaySeconds"
            )]
            pub power_off_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOnDelaySeconds"
            )]
            pub power_on_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerRestoreDelaySeconds"
            )]
            pub power_restore_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerRestorePolicy")]
            pub power_restore_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerStateInTransition"
            )]
            pub power_state_in_transition: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedCurrentAmps")]
            pub rated_current_amps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnbalancedCurrentPercent"
            )]
            pub unbalanced_current_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnbalancedVoltagePercent"
            )]
            pub unbalanced_voltage_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Voltage")]
            pub voltage: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VoltageType")]
            pub voltage_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CircuitType {
            #[default]
            #[serde(rename = "Branch")]
            Branch,
            #[serde(rename = "Bus")]
            Bus,
            #[serde(rename = "Feeder")]
            Feeder,
            #[serde(rename = "Mains")]
            Mains,
            #[serde(rename = "Subfeed")]
            Subfeed,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CurrentSensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1")]
            pub line1: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2")]
            pub line2: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3")]
            pub line3: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neutral")]
            pub neutral: Option<crate::sensor::SensorCurrentExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EnergySensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToLine2")]
            pub line1_to_line2: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToNeutral")]
            pub line1_to_neutral: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToLine3")]
            pub line2_to_line3: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToNeutral")]
            pub line2_to_neutral: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToLine1")]
            pub line3_to_line1: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToNeutral")]
            pub line3_to_neutral: Option<crate::sensor::SensorEnergykWhExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BranchCircuit")]
            pub branch_circuit: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DistributionCircuits"
            )]
            pub distribution_circuits: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DistributionCircuits@odata.count"
            )]
            pub distribution_circuits_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Outlets")]
            pub outlets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Outlets@odata.count"
            )]
            pub outlets_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOutlet")]
            pub power_outlet: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourceCircuit")]
            pub source_circuit: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControlRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToLine2")]
            pub line1_to_line2: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToNeutral")]
            pub line1_to_neutral: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToLine3")]
            pub line2_to_line3: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToNeutral")]
            pub line2_to_neutral: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToLine1")]
            pub line3_to_line1: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToNeutral")]
            pub line3_to_neutral: Option<crate::sensor::SensorPowerExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VoltageSensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToLine2")]
            pub line1_to_line2: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToNeutral")]
            pub line1_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToLine3")]
            pub line2_to_line3: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToNeutral")]
            pub line2_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToLine1")]
            pub line3_to_line1: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToNeutral")]
            pub line3_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum VoltageType {
            #[default]
            #[serde(rename = "AC")]
            AC,
            #[serde(rename = "DC")]
            DC,
        }
    }
}
pub mod circuit_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CircuitCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod component_integrity {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComponentIntegrity.SPDMGetSignedMeasurements"
            )]
            pub component_integrity_spdm_get_signed_measurements:
                Option<crate::component_integrity::v1_2_1::SPDMGetSignedMeasurements>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComponentIntegrity.TPMGetSignedMeasurements"
            )]
            pub component_integrity_tpm_get_signed_measurements:
                Option<crate::component_integrity::v1_2_1::TPMGetSignedMeasurements>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::component_integrity::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ComponentIntegrity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::component_integrity::v1_2_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentIntegrityEnabled"
            )]
            pub component_integrity_enabled: Option<bool>,
            #[serde(rename = "ComponentIntegrityType")]
            pub component_integrity_type: String,
            #[serde(rename = "ComponentIntegrityTypeVersion")]
            pub component_integrity_type_version: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastUpdated")]
            pub last_updated: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::component_integrity::v1_2_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SPDM")]
            pub spdm: Option<crate::component_integrity::v1_2_1::SPDMinfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TargetComponentURI")]
            pub target_component_uri: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TPM")]
            pub tpm: Option<crate::component_integrity::v1_2_1::TPMinfo>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ComponentIntegrityType {
            #[default]
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SPDM")]
            SPDM,
            #[serde(rename = "TPM")]
            TPM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DMTFmeasurementTypes {
            #[default]
            #[serde(rename = "FirmwareConfiguration")]
            FirmwareConfiguration,
            #[serde(rename = "HardwareConfiguration")]
            HardwareConfiguration,
            #[serde(rename = "ImmutableROM")]
            ImmutableROM,
            #[serde(rename = "MeasurementManifest")]
            MeasurementManifest,
            #[serde(rename = "MutableFirmware")]
            MutableFirmware,
            #[serde(rename = "MutableFirmwareSecurityVersionNumber")]
            MutableFirmwareSecurityVersionNumber,
            #[serde(rename = "MutableFirmwareVersion")]
            MutableFirmwareVersion,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentsProtected"
            )]
            pub components_protected: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentsProtected@odata.count"
            )]
            pub components_protected_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MeasurementSpecification {
            #[default]
            #[serde(rename = "DMTF")]
            DMTF,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMGetSignedMeasurements {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMGetSignedMeasurementsRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndices")]
            pub measurement_indices: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Nonce")]
            pub nonce: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotId")]
            pub slot_id: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMGetSignedMeasurementsResponse {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificate")]
            pub certificate: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "HashingAlgorithm")]
            pub hashing_algorithm: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PublicKey")]
            pub public_key: Option<String>,
            #[serde(rename = "SignedMeasurements")]
            pub signed_measurements: String,
            #[serde(rename = "SigningAlgorithm")]
            pub signing_algorithm: String,
            #[serde(rename = "Version")]
            pub version: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMcommunication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sessions")]
            pub sessions: Option<Vec<crate::component_integrity::v1_2_1::SingleSessionInfo>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMidentity {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RequesterAuthentication"
            )]
            pub requester_authentication:
                Option<crate::component_integrity::v1_2_1::SPDMrequesterAuth>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResponderAuthentication"
            )]
            pub responder_authentication:
                Option<crate::component_integrity::v1_2_1::SPDMresponderAuth>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMinfo {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentCommunication"
            )]
            pub component_communication:
                Option<crate::component_integrity::v1_2_1::SPDMcommunication>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IdentityAuthentication"
            )]
            pub identity_authentication: Option<crate::component_integrity::v1_2_1::SPDMidentity>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSet")]
            pub measurement_set: Option<crate::component_integrity::v1_2_1::SPDMmeasurementSet>,
            #[serde(rename = "Requester")]
            pub requester: crate::odata_v4::IdRef,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMmeasurementSet {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSummary")]
            pub measurement_summary: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSummaryHashAlgorithm"
            )]
            pub measurement_summary_hash_algorithm: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSummaryType"
            )]
            pub measurement_summary_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements:
                Option<Vec<crate::component_integrity::v1_2_1::SPDMsingleMeasurement>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SPDMmeasurementSummaryType {
            #[default]
            #[serde(rename = "All")]
            All,
            #[serde(rename = "TCB")]
            TCB,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMrequesterAuth {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProvidedCertificate"
            )]
            pub provided_certificate: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMresponderAuth {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentCertificate"
            )]
            pub component_certificate: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerificationStatus")]
            pub verification_status: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMsingleMeasurement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastUpdated")]
            pub last_updated: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementHashAlgorithm"
            )]
            pub measurement_hash_algorithm: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementType")]
            pub measurement_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartofSummaryHash")]
            pub partof_summary_hash: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecurityVersionNumber"
            )]
            pub security_version_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SecureSessionType {
            #[default]
            #[serde(rename = "AuthenticatedOnly")]
            AuthenticatedOnly,
            #[serde(rename = "EncryptedAuthenticated")]
            EncryptedAuthenticated,
            #[serde(rename = "Plain")]
            Plain,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SingleSessionInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "SessionId")]
            pub session_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SessionType")]
            pub session_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMGetSignedMeasurements {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMGetSignedMeasurementsRequestBody {
            #[serde(rename = "Certificate")]
            pub certificate: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Nonce")]
            pub nonce: Option<String>,
            #[serde(rename = "PCRSelection")]
            pub pcr_selection: String,
            #[serde(rename = "Scheme")]
            pub scheme: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMGetSignedMeasurementsResponse {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "SignedMeasurements")]
            pub signed_measurements: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMauth {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentCertificate"
            )]
            pub component_certificate: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerificationStatus")]
            pub verification_status: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMcommunication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sessions")]
            pub sessions: Option<Vec<crate::component_integrity::v1_2_1::SingleSessionInfo>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMinfo {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentCommunication"
            )]
            pub component_communication:
                Option<crate::component_integrity::v1_2_1::TPMcommunication>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IdentityAuthentication"
            )]
            pub identity_authentication: Option<crate::component_integrity::v1_2_1::TPMauth>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSet")]
            pub measurement_set: Option<crate::component_integrity::v1_2_1::TPMmeasurementSet>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NonceSizeBytesMaximum"
            )]
            pub nonce_size_bytes_maximum: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMmeasurementSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::component_integrity::v1_2_1::TPMsingleMeasurement>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPMsingleMeasurement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastUpdated")]
            pub last_updated: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementHashAlgorithm"
            )]
            pub measurement_hash_algorithm: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCR")]
            pub pcr: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum VerificationStatus {
            #[default]
            #[serde(rename = "Failed")]
            Failed,
            #[serde(rename = "Success")]
            Success,
        }
    }
}
pub mod component_integrity_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ComponentIntegrityCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod composition_reservation {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::composition_reservation::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CompositionReservation {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::composition_reservation::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Client")]
            pub client: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manifest")]
            pub manifest: Option<crate::manifest::Manifest>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReservationTime")]
            pub reservation_time: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReservedResourceBlocks"
            )]
            pub reserved_resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReservedResourceBlocks@odata.count"
            )]
            pub reserved_resource_blocks_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod composition_reservation_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CompositionReservationCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod composition_service {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#CompositionService.Compose"
            )]
            pub composition_service_compose: Option<crate::composition_service::v1_2_1::Compose>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::composition_service::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Compose {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ComposeRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manifest")]
            pub manifest: Option<crate::manifest::Manifest>,
            #[serde(rename = "RequestFormat")]
            pub request_format: String,
            #[serde(rename = "RequestType")]
            pub request_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReservationId")]
            pub reservation_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ComposeRequestFormat {
            #[default]
            #[serde(rename = "Manifest")]
            Manifest,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ComposeRequestType {
            #[default]
            #[serde(rename = "Apply")]
            Apply,
            #[serde(rename = "Preview")]
            Preview,
            #[serde(rename = "PreviewReserve")]
            PreviewReserve,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ComposeResponse {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manifest")]
            pub manifest: Option<crate::manifest::Manifest>,
            #[serde(rename = "RequestFormat")]
            pub request_format: String,
            #[serde(rename = "RequestType")]
            pub request_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReservationId")]
            pub reservation_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CompositionService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::composition_service::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ActivePool")]
            pub active_pool: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowOverprovisioning"
            )]
            pub allow_overprovisioning: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowZoneAffinity")]
            pub allow_zone_affinity: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CompositionReservations"
            )]
            pub composition_reservations: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FreePool")]
            pub free_pool: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReservationDuration"
            )]
            pub reservation_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlocks")]
            pub resource_blocks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceZones")]
            pub resource_zones: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod computer_system {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum BootSource {
        #[default]
        #[serde(rename = "BiosSetup")]
        BiosSetup,
        #[serde(rename = "Cd")]
        Cd,
        #[serde(rename = "Diags")]
        Diags,
        #[serde(rename = "Floppy")]
        Floppy,
        #[serde(rename = "Hdd")]
        Hdd,
        #[serde(rename = "None")]
        None,
        #[serde(rename = "Pxe")]
        Pxe,
        #[serde(rename = "Recovery")]
        Recovery,
        #[serde(rename = "RemoteDrive")]
        RemoteDrive,
        #[serde(rename = "SDCard")]
        SDCard,
        #[serde(rename = "UefiBootNext")]
        UefiBootNext,
        #[serde(rename = "UefiHttp")]
        UefiHttp,
        #[serde(rename = "UefiShell")]
        UefiShell,
        #[serde(rename = "UefiTarget")]
        UefiTarget,
        #[serde(rename = "Usb")]
        Usb,
        #[serde(rename = "Utilities")]
        Utilities,
    }
    pub mod v1_20_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComputerSystem.AddResourceBlock"
            )]
            pub computer_system_add_resource_block:
                Option<crate::computer_system::v1_20_1::AddResourceBlock>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComputerSystem.RemoveResourceBlock"
            )]
            pub computer_system_remove_resource_block:
                Option<crate::computer_system::v1_20_1::RemoveResourceBlock>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComputerSystem.Reset"
            )]
            pub computer_system_reset: Option<crate::computer_system::v1_20_1::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ComputerSystem.SetDefaultBootOrder"
            )]
            pub computer_system_set_default_boot_order:
                Option<crate::computer_system::v1_20_1::SetDefaultBootOrder>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::computer_system::v1_20_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddResourceBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddResourceBlockRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystemETag")]
            pub computer_system_etag: Option<String>,
            #[serde(rename = "ResourceBlock")]
            pub resource_block: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlockETag")]
            pub resource_block_etag: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AutomaticRetryConfig {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "RetryAlways")]
            RetryAlways,
            #[serde(rename = "RetryAttempts")]
            RetryAttempts,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Boot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AliasBootOrder")]
            pub alias_boot_order: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutomaticRetryAttempts"
            )]
            pub automatic_retry_attempts: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutomaticRetryConfig"
            )]
            pub automatic_retry_config: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootNext")]
            pub boot_next: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootOptions")]
            pub boot_options: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootOrder")]
            pub boot_order: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BootOrderPropertySelection"
            )]
            pub boot_order_property_selection: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BootSourceOverrideEnabled"
            )]
            pub boot_source_override_enabled: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BootSourceOverrideMode"
            )]
            pub boot_source_override_mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BootSourceOverrideTarget"
            )]
            pub boot_source_override_target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpBootUri")]
            pub http_boot_uri: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemainingAutomaticRetryAttempts"
            )]
            pub remaining_automatic_retry_attempts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StopBootOnFault")]
            pub stop_boot_on_fault: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrustedModuleRequiredToBoot"
            )]
            pub trusted_module_required_to_boot: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UefiTargetBootSourceOverride"
            )]
            pub uefi_target_boot_source_override: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BootOrderTypes {
            #[default]
            #[serde(rename = "AliasBootOrder")]
            AliasBootOrder,
            #[serde(rename = "BootOrder")]
            BootOrder,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BootProgress {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LastBootTimeSeconds"
            )]
            pub last_boot_time_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastState")]
            pub last_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastStateTime")]
            pub last_state_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemLastState")]
            pub oem_last_state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BootProgressTypes {
            #[default]
            #[serde(rename = "BusInitializationStarted")]
            BusInitializationStarted,
            #[serde(rename = "MemoryInitializationStarted")]
            MemoryInitializationStarted,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OSBootStarted")]
            OSBootStarted,
            #[serde(rename = "OSRunning")]
            OSRunning,
            #[serde(rename = "PCIResourceConfigStarted")]
            PCIResourceConfigStarted,
            #[serde(rename = "PrimaryProcessorInitializationStarted")]
            PrimaryProcessorInitializationStarted,
            #[serde(rename = "SecondaryProcessorInitializationStarted")]
            SecondaryProcessorInitializationStarted,
            #[serde(rename = "SetupEntered")]
            SetupEntered,
            #[serde(rename = "SystemHardwareInitializationComplete")]
            SystemHardwareInitializationComplete,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BootSourceOverrideEnabled {
            #[default]
            #[serde(rename = "Continuous")]
            Continuous,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Once")]
            Once,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BootSourceOverrideMode {
            #[default]
            #[serde(rename = "Legacy")]
            Legacy,
            #[serde(rename = "UEFI")]
            UEFI,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Composition {
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseCases")]
            pub use_cases: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CompositionUseCase {
            #[default]
            #[serde(rename = "ExpandableSystem")]
            ExpandableSystem,
            #[serde(rename = "ResourceBlockCapable")]
            ResourceBlockCapable,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ComputerSystem {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::computer_system::v1_20_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Bios")]
            pub bios: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BiosVersion")]
            pub bios_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Boot")]
            pub boot: Option<crate::computer_system::v1_20_1::Boot>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootProgress")]
            pub boot_progress: Option<crate::computer_system::v1_20_1::BootProgress>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Composition")]
            pub composition: Option<crate::computer_system::v1_20_1::Composition>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricAdapters")]
            pub fabric_adapters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GraphicalConsole")]
            pub graphical_console: Option<crate::computer_system::v1_20_1::HostGraphicalConsole>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "GraphicsControllers"
            )]
            pub graphics_controllers: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostName")]
            pub host_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostWatchdogTimer")]
            pub host_watchdog_timer: Option<crate::computer_system::v1_20_1::WatchdogTimer>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostedServices")]
            pub hosted_services: Option<crate::computer_system::v1_20_1::HostedServices>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostingRoles")]
            pub hosting_roles: Option<Vec<String>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IdlePowerSaver")]
            pub idle_power_saver: Option<crate::computer_system::v1_20_1::IdlePowerSaver>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyManagement")]
            pub key_management: Option<crate::computer_system::v1_20_1::KeyManagement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastResetTime")]
            pub last_reset_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::computer_system::v1_20_1::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogServices")]
            pub log_services: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManufacturingMode")]
            pub manufacturing_mode: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemorySummary")]
            pub memory_summary: Option<crate::computer_system::v1_20_1::MemorySummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkInterfaces")]
            pub network_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevices")]
            pub pcie_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeDevices@odata.count"
            )]
            pub pcie_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerCycleDelaySeconds"
            )]
            pub power_cycle_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerMode")]
            pub power_mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOffDelaySeconds"
            )]
            pub power_off_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOnDelaySeconds"
            )]
            pub power_on_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerRestorePolicy")]
            pub power_restore_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProcessorSummary")]
            pub processor_summary: Option<crate::computer_system::v1_20_1::ProcessorSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecureBoot")]
            pub secure_boot: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialConsole")]
            pub serial_console: Option<crate::computer_system::v1_20_1::HostSerialConsole>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SimpleStorage")]
            pub simple_storage: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubModel")]
            pub sub_model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemType")]
            pub system_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TrustedModules")]
            pub trusted_modules: Option<Vec<crate::computer_system::v1_20_1::TrustedModules>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "USBControllers")]
            pub usb_controllers: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VirtualMedia")]
            pub virtual_media: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VirtualMediaConfig")]
            pub virtual_media_config: Option<crate::computer_system::v1_20_1::VirtualMediaConfig>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum GraphicalConnectTypesSupported {
            #[default]
            #[serde(rename = "KVMIP")]
            KVMIP,
            #[serde(rename = "OEM")]
            OEM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HostGraphicalConsole {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectTypesSupported"
            )]
            pub connect_types_supported: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxConcurrentSessions"
            )]
            pub max_concurrent_sessions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HostSerialConsole {
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPMI")]
            pub ipmi: Option<crate::computer_system::v1_20_1::SerialConsoleProtocol>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxConcurrentSessions"
            )]
            pub max_concurrent_sessions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSH")]
            pub ssh: Option<crate::computer_system::v1_20_1::SerialConsoleProtocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Telnet")]
            pub telnet: Option<crate::computer_system::v1_20_1::SerialConsoleProtocol>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HostedServices {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum HostingRole {
            #[default]
            #[serde(rename = "Appliance")]
            Appliance,
            #[serde(rename = "ApplicationServer")]
            ApplicationServer,
            #[serde(rename = "BareMetalServer")]
            BareMetalServer,
            #[serde(rename = "ContainerServer")]
            ContainerServer,
            #[serde(rename = "StorageServer")]
            StorageServer,
            #[serde(rename = "Switch")]
            Switch,
            #[serde(rename = "VirtualMachineServer")]
            VirtualMachineServer,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IdlePowerSaver {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnterDwellTimeSeconds"
            )]
            pub enter_dwell_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnterUtilizationPercent"
            )]
            pub enter_utilization_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExitDwellTimeSeconds"
            )]
            pub exit_dwell_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExitUtilizationPercent"
            )]
            pub exit_utilization_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IndicatorLED {
            #[default]
            #[serde(rename = "Blinking")]
            Blinking,
            #[serde(rename = "Lit")]
            Lit,
            #[serde(rename = "Off")]
            Off,
            #[serde(rename = "Unknown")]
            Unknown,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum InterfaceType {
            #[default]
            #[serde(rename = "TCM1_0")]
            TCM1N0,
            #[serde(rename = "TPM1_2")]
            TPM1N2,
            #[serde(rename = "TPM2_0")]
            TPM2N0,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum InterfaceTypeSelection {
            #[default]
            #[serde(rename = "BiosSetting")]
            BiosSetting,
            #[serde(rename = "FirmwareUpdate")]
            FirmwareUpdate,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "OemMethod")]
            OemMethod,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum KMIPCachePolicy {
            #[default]
            #[serde(rename = "AfterFirstUse")]
            AfterFirstUse,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct KMIPServer {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheDuration")]
            pub cache_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CachePolicy")]
            pub cache_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct KeyManagement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "KMIPCertificates")]
            pub kmip_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KMIPServers")]
            pub kmip_servers: Option<Vec<crate::computer_system::v1_20_1::KMIPServer>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsumingComputerSystems"
            )]
            pub consuming_computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsumingComputerSystems@odata.count"
            )]
            pub consuming_computer_systems_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CooledBy")]
            pub cooled_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CooledBy@odata.count"
            )]
            pub cooled_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OffloadedNetworkDeviceFunctions"
            )]
            pub offloaded_network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OffloadedNetworkDeviceFunctions@odata.count"
            )]
            pub offloaded_network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PoweredBy")]
            pub powered_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PoweredBy@odata.count"
            )]
            pub powered_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlocks")]
            pub resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResourceBlocks@odata.count"
            )]
            pub resource_blocks_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyingComputerSystems"
            )]
            pub supplying_computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyingComputerSystems@odata.count"
            )]
            pub supplying_computer_systems_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TrustedComponents")]
            pub trusted_components: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrustedComponents@odata.count"
            )]
            pub trusted_components_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MemoryMirroring {
            #[default]
            #[serde(rename = "DIMM")]
            DIMM,
            #[serde(rename = "Hybrid")]
            Hybrid,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "System")]
            System,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemorySummary {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryMirroring")]
            pub memory_mirroring: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalSystemMemoryGiB"
            )]
            pub total_system_memory_gi_b: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalSystemPersistentMemoryGiB"
            )]
            pub total_system_persistent_memory_gi_b: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerMode {
            #[default]
            #[serde(rename = "BalancedPerformance")]
            BalancedPerformance,
            #[serde(rename = "MaximumPerformance")]
            MaximumPerformance,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OSControlled")]
            OSControlled,
            #[serde(rename = "PowerSaving")]
            PowerSaving,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerRestorePolicyTypes {
            #[default]
            #[serde(rename = "AlwaysOff")]
            AlwaysOff,
            #[serde(rename = "AlwaysOn")]
            AlwaysOn,
            #[serde(rename = "LastState")]
            LastState,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorSummary {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreCount")]
            pub core_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Count")]
            pub count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LogicalProcessorCount"
            )]
            pub logical_processor_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThreadingEnabled")]
            pub threading_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveResourceBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveResourceBlockRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystemETag")]
            pub computer_system_etag: Option<String>,
            #[serde(rename = "ResourceBlock")]
            pub resource_block: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlockETag")]
            pub resource_block_etag: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SerialConsoleProtocol {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsoleEntryCommand"
            )]
            pub console_entry_command: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HotKeySequenceDisplay"
            )]
            pub hot_key_sequence_display: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SharedWithManagerCLI"
            )]
            pub shared_with_manager_cli: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrder {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetDefaultBootOrderRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum StopBootOnFault {
            #[default]
            #[serde(rename = "AnyFault")]
            AnyFault,
            #[serde(rename = "Never")]
            Never,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SystemType {
            #[default]
            #[serde(rename = "Composed")]
            Composed,
            #[serde(rename = "DPU")]
            DPU,
            #[serde(rename = "OS")]
            OS,
            #[serde(rename = "Physical")]
            Physical,
            #[serde(rename = "PhysicallyPartitioned")]
            PhysicallyPartitioned,
            #[serde(rename = "Virtual")]
            Virtual,
            #[serde(rename = "VirtuallyPartitioned")]
            VirtuallyPartitioned,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TrustedModuleRequiredToBoot {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Required")]
            Required,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TrustedModules {
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion2")]
            pub firmware_version2: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceType")]
            pub interface_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InterfaceTypeSelection"
            )]
            pub interface_type_selection: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VirtualMediaConfig {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum WatchdogTimeoutActions {
            #[default]
            #[serde(rename = "None")]
            None,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PowerCycle")]
            PowerCycle,
            #[serde(rename = "PowerDown")]
            PowerDown,
            #[serde(rename = "ResetSystem")]
            ResetSystem,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct WatchdogTimer {
            #[serde(rename = "FunctionEnabled")]
            pub function_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TimeoutAction")]
            pub timeout_action: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WarningAction")]
            pub warning_action: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum WatchdogWarningActions {
            #[default]
            #[serde(rename = "DiagnosticInterrupt")]
            DiagnosticInterrupt,
            #[serde(rename = "MessagingInterrupt")]
            MessagingInterrupt,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SCI")]
            SCI,
            #[serde(rename = "SMI")]
            SMI,
        }
    }
}
pub mod computer_system_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ComputerSystemCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod connection {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AccessCapability {
            #[default]
            #[serde(rename = "Read")]
            Read,
            #[serde(rename = "Write")]
            Write,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AccessState {
            #[default]
            #[serde(rename = "NonOptimized")]
            NonOptimized,
            #[serde(rename = "Optimized")]
            Optimized,
            #[serde(rename = "Standby")]
            Standby,
            #[serde(rename = "Transitioning")]
            Transitioning,
            #[serde(rename = "Unavailable")]
            Unavailable,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::connection::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CHAPConnectionKey {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CHAPPassword")]
            pub chap_password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CHAPUsername")]
            pub chap_username: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorCHAPPassword"
            )]
            pub initiator_chap_password: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorCHAPUsername"
            )]
            pub initiator_chap_username: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetCHAPPassword")]
            pub target_chap_password: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Connection {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::connection::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectionKeys")]
            pub connection_keys: Option<crate::connection::v1_2_0::ConnectionKey>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectionType")]
            pub connection_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::connection::v1_2_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryChunkInfo")]
            pub memory_chunk_info: Option<Vec<crate::connection::v1_2_0::MemoryChunkInfo>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VolumeInfo")]
            pub volume_info: Option<Vec<crate::connection::v1_2_0::VolumeInfo>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ConnectionKey {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CHAP")]
            pub chap: Option<crate::connection::v1_2_0::CHAPConnectionKey>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCHAP")]
            pub dhchap: Option<crate::connection::v1_2_0::DHCHAPKey>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::connection::v1_2_0::GenZConnectionKey>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectionType {
            #[default]
            #[serde(rename = "Memory")]
            Memory,
            #[serde(rename = "Storage")]
            Storage,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DHCHAPKey {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocalDHCHAPAuthSecret"
            )]
            pub local_dhchap_auth_secret: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PeerDHCHAPAuthSecret"
            )]
            pub peer_dhchap_auth_secret: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZConnectionKey {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessKey")]
            pub access_key: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RKeyDomainCheckingEnabled"
            )]
            pub r_key_domain_checking_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RKeyReadOnlyKey")]
            pub r_key_read_only_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RKeyReadWriteKey")]
            pub r_key_read_write_key: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorEndpointGroups"
            )]
            pub initiator_endpoint_groups: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorEndpointGroups@odata.count"
            )]
            pub initiator_endpoint_groups_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitiatorEndpoints")]
            pub initiator_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorEndpoints@odata.count"
            )]
            pub initiator_endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TargetEndpointGroups"
            )]
            pub target_endpoint_groups: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TargetEndpointGroups@odata.count"
            )]
            pub target_endpoint_groups_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetEndpoints")]
            pub target_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TargetEndpoints@odata.count"
            )]
            pub target_endpoints_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryChunkInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessCapabilities")]
            pub access_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessState")]
            pub access_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryChunk")]
            pub memory_chunk: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VolumeInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessCapabilities")]
            pub access_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessState")]
            pub access_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LUN")]
            pub lun: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Volume")]
            pub volume: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod connection_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ConnectionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod connection_method {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::connection_method::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ConnectionMethod {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::connection_method::v1_1_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectionMethodType"
            )]
            pub connection_method_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectionMethodVariant"
            )]
            pub connection_method_variant: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::connection_method::v1_1_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TunnelingProtocol")]
            pub tunneling_protocol: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectionMethodType {
            #[default]
            #[serde(rename = "IPMI15")]
            IPMI15,
            #[serde(rename = "IPMI20")]
            IPMI20,
            #[serde(rename = "NETCONF")]
            NETCONF,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Redfish")]
            Redfish,
            #[serde(rename = "SNMP")]
            SNMP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AggregationSources")]
            pub aggregation_sources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AggregationSources@odata.count"
            )]
            pub aggregation_sources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TunnelingProtocolType {
            #[default]
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SSH")]
            SSH,
        }
    }
}
pub mod connection_method_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ConnectionMethodCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod control {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum ControlRangeExcerpt {
        ControlV1N0N1ControlRangeExcerpt(crate::control::v1_0_1::ControlRangeExcerpt),
        ControlV1N1N0ControlRangeExcerpt(crate::control::v1_1_0::ControlRangeExcerpt),
        ControlV1N2N0ControlRangeExcerpt(crate::control::v1_2_0::ControlRangeExcerpt),
        ControlV1N3N0ControlRangeExcerpt(crate::control::v1_3_0::ControlRangeExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum ControlSingleExcerpt {
        ControlV1N0N1ControlSingleExcerpt(crate::control::v1_0_1::ControlSingleExcerpt),
        ControlV1N1N0ControlSingleExcerpt(crate::control::v1_1_0::ControlSingleExcerpt),
        ControlV1N2N0ControlSingleExcerpt(crate::control::v1_2_0::ControlSingleExcerpt),
        ControlV1N3N0ControlSingleExcerpt(crate::control::v1_3_0::ControlSingleExcerpt),
    }
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ControlMode {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Manual")]
            Manual,
            #[serde(rename = "Override")]
            Override,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlRangeExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowableNumericValues"
            )]
            pub allowable_numeric_values: Option<Vec<f64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMax")]
            pub setting_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMin")]
            pub setting_min: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlSingleExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPoint")]
            pub set_point: Option<f64>,
        }
    }
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ControlMode {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Manual")]
            Manual,
            #[serde(rename = "Override")]
            Override,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlRangeExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowableNumericValues"
            )]
            pub allowable_numeric_values: Option<Vec<f64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMax")]
            pub setting_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMin")]
            pub setting_min: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlSingleExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPoint")]
            pub set_point: Option<f64>,
        }
    }
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ControlMode {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Manual")]
            Manual,
            #[serde(rename = "Override")]
            Override,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlRangeExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowableNumericValues"
            )]
            pub allowable_numeric_values: Option<Vec<f64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMax")]
            pub setting_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMin")]
            pub setting_min: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlSingleExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPoint")]
            pub set_point: Option<f64>,
        }
    }
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Control.ResetToDefaults"
            )]
            pub control_reset_to_defaults: Option<crate::control::v1_3_0::ResetToDefaults>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::control::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Control {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Accuracy")]
            pub accuracy: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::control::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowableNumericValues"
            )]
            pub allowable_numeric_values: Option<Vec<f64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssociatedSensors")]
            pub associated_sensors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedSensors@odata.count"
            )]
            pub associated_sensors_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ControlDelaySeconds"
            )]
            pub control_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlLoop")]
            pub control_loop: Option<crate::control::v1_3_0::ControlLoop>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlType")]
            pub control_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeadBand")]
            pub dead_band: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DefaultSetPoint")]
            pub default_set_point: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Implementation")]
            pub implementation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Increment")]
            pub increment: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sensor")]
            pub sensor: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPoint")]
            pub set_point: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPointType")]
            pub set_point_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPointUnits")]
            pub set_point_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPointUpdateTime")]
            pub set_point_update_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMax")]
            pub setting_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMin")]
            pub setting_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlLoop {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoefficientUpdateTime"
            )]
            pub coefficient_update_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Differential")]
            pub differential: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Integral")]
            pub integral: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Proportional")]
            pub proportional: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ControlMode {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Manual")]
            Manual,
            #[serde(rename = "Override")]
            Override,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlRangeExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowableNumericValues"
            )]
            pub allowable_numeric_values: Option<Vec<f64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMax")]
            pub setting_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SettingMin")]
            pub setting_min: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControlSingleExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMax")]
            pub allowable_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowableMin")]
            pub allowable_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControlMode")]
            pub control_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DefaultSetPoint")]
            pub default_set_point: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SetPoint")]
            pub set_point: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ControlType {
            #[default]
            #[serde(rename = "Frequency")]
            Frequency,
            #[serde(rename = "FrequencyMHz")]
            FrequencyMHz,
            #[serde(rename = "Power")]
            Power,
            #[serde(rename = "Pressure")]
            Pressure,
            #[serde(rename = "PressurekPa")]
            PressurekPa,
            #[serde(rename = "Temperature")]
            Temperature,
            #[serde(rename = "Valve")]
            Valve,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ImplementationType {
            #[default]
            #[serde(rename = "Direct")]
            Direct,
            #[serde(rename = "Monitored")]
            Monitored,
            #[serde(rename = "Programmable")]
            Programmable,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SetPointType {
            #[default]
            #[serde(rename = "Range")]
            Range,
            #[serde(rename = "Single")]
            Single,
        }
    }
}
pub mod control_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ControlCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod coolant_connector {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::coolant_connector::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CoolantConnector {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::coolant_connector::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Coolant")]
            pub coolant: Option<crate::cooling_loop::Coolant>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolantConnectorType"
            )]
            pub coolant_connector_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingLoopName")]
            pub cooling_loop_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingManagerURI")]
            pub cooling_manager_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeltaPressurekPa")]
            pub delta_pressurek_pa: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeltaTemperatureCelsius"
            )]
            pub delta_temperature_celsius: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FlowLitersPerMinute"
            )]
            pub flow_liters_per_minute: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HeatRemovedkW")]
            pub heat_removedk_w: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::coolant_connector::v1_0_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RatedFlowLitersPerMinute"
            )]
            pub rated_flow_liters_per_minute: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RatedFlowPressurekPa"
            )]
            pub rated_flow_pressurek_pa: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedPressurekPa")]
            pub rated_pressurek_pa: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReturnPressurekPa")]
            pub return_pressurek_pa: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReturnTemperatureCelsius"
            )]
            pub return_temperature_celsius: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupplyPressurekPa")]
            pub supply_pressurek_pa: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyTemperatureCelsius"
            )]
            pub supply_temperature_celsius: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CoolantConnectorType {
            #[default]
            #[serde(rename = "Closed")]
            Closed,
            #[serde(rename = "Inline")]
            Inline,
            #[serde(rename = "Pair")]
            Pair,
            #[serde(rename = "Return")]
            Return,
            #[serde(rename = "Supply")]
            Supply,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedChassis")]
            pub connected_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedChassis@odata.count"
            )]
            pub connected_chassis_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedCoolingLoop"
            )]
            pub connected_cooling_loop: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedCoolingUnit"
            )]
            pub connected_cooling_unit: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod coolant_connector_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CoolantConnectorCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod cooling_loop {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Coolant {
        CoolingLoopV1N0N0Coolant(crate::cooling_loop::v1_0_0::Coolant),
    }
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::cooling_loop::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Coolant {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditiveName")]
            pub additive_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditivePercent")]
            pub additive_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolantType")]
            pub coolant_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DensityKgPerCubicMeter"
            )]
            pub density_kg_per_cubic_meter: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedServiceHours")]
            pub rated_service_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceHours")]
            pub service_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServicedDate")]
            pub serviced_date: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpecificHeatkJoulesPerKgK"
            )]
            pub specific_heatk_joules_per_kg_k: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CoolantType {
            #[default]
            #[serde(rename = "Dielectric")]
            Dielectric,
            #[serde(rename = "Fluorocarbon")]
            Fluorocarbon,
            #[serde(rename = "Hydrocarbon")]
            Hydrocarbon,
            #[serde(rename = "Water")]
            Water,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CoolingLoop {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::cooling_loop::v1_0_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsumingEquipmentNames"
            )]
            pub consuming_equipment_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Coolant")]
            pub coolant: Option<crate::cooling_loop::v1_0_0::Coolant>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolantLevelPercent"
            )]
            pub coolant_level_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolantLevelStatus")]
            pub coolant_level_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolantQuality")]
            pub coolant_quality: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingManagerURI")]
            pub cooling_manager_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::cooling_loop::v1_0_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrimaryCoolantConnectors"
            )]
            pub primary_coolant_connectors: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RatedFlowLitersPerMinute"
            )]
            pub rated_flow_liters_per_minute: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedPressurekPa")]
            pub rated_pressurek_pa: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryCoolantConnectors"
            )]
            pub secondary_coolant_connectors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyEquipmentNames"
            )]
            pub supply_equipment_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Facility")]
            pub facility: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod cooling_loop_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CoolingLoopCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod cooling_unit {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::cooling_unit::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CoolingEquipmentType {
            #[default]
            #[serde(rename = "CDU")]
            CDU,
            #[serde(rename = "HeatExchanger")]
            HeatExchanger,
            #[serde(rename = "ImmersionUnit")]
            ImmersionUnit,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CoolingUnit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::cooling_unit::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Coolant")]
            pub coolant: Option<crate::cooling_loop::Coolant>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolingCapacityWatts"
            )]
            pub cooling_capacity_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "EquipmentType")]
            pub equipment_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FilterRedundancy")]
            pub filter_redundancy: Option<Vec<crate::redundancy::RedundantGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Filters")]
            pub filters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LeakDetection")]
            pub leak_detection: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::cooling_unit::v1_0_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrimaryCoolantConnectors"
            )]
            pub primary_coolant_connectors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PumpRedundancy")]
            pub pump_redundancy: Option<Vec<crate::redundancy::RedundantGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Pumps")]
            pub pumps: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reservoirs")]
            pub reservoirs: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryCoolantConnectors"
            )]
            pub secondary_coolant_connectors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Facility")]
            pub facility: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod cooling_unit_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CoolingUnitCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod cxl_logical_device {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::cxl_logical_device::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXLLogicalDevice {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::cxl_logical_device::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::cxl_logical_device::v1_0_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Log")]
            pub log: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemorySizeMiB")]
            pub memory_size_mi_b: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "QoS")]
            pub qos: Option<crate::cxl_logical_device::v1_0_0::QoS>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "QoSTelemetryCapabilities"
            )]
            pub qos_telemetry_capabilities:
                Option<crate::cxl_logical_device::v1_0_0::QoSTelemetryCapabilities>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SemanticsSupported")]
            pub semantics_supported: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CXLSemantic {
            #[default]
            #[serde(rename = "CXLcache")]
            CXLcache,
            #[serde(rename = "CXLio")]
            CXLio,
            #[serde(rename = "CXLmem")]
            CXLmem,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryChunks")]
            pub memory_chunks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryChunks@odata.count"
            )]
            pub memory_chunks_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryDomains@odata.count"
            )]
            pub memory_domains_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct QoS {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedBandwidth")]
            pub allocated_bandwidth: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LimitPercent")]
            pub limit_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct QoSTelemetryCapabilities {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EgressPortBackpressureSupported"
            )]
            pub egress_port_backpressure_supported: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemporaryThroughputReductionSupported"
            )]
            pub temporary_throughput_reduction_supported: Option<bool>,
        }
    }
}
pub mod cxl_logical_device_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct CXLLogicalDeviceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod data_storage_los_capabilities {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ProvisioningPolicy {
        #[default]
        #[serde(rename = "Fixed")]
        Fixed,
        #[serde(rename = "Thin")]
        Thin,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum StorageAccessCapability {
        #[default]
        #[serde(rename = "Append")]
        Append,
        #[serde(rename = "Execute")]
        Execute,
        #[serde(rename = "Read")]
        Read,
        #[serde(rename = "Streaming")]
        Streaming,
        #[serde(rename = "Write")]
        Write,
        #[serde(rename = "WriteOnce")]
        WriteOnce,
    }
}
pub mod drive {
    pub mod v1_17_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Drive.Reset")]
            pub drive_reset: Option<crate::drive::v1_17_0::Reset>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Drive.SecureErase")]
            pub drive_secure_erase: Option<crate::drive::v1_17_0::SecureErase>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::drive::v1_17_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DataSanitizationType {
            #[default]
            #[serde(rename = "BlockErase")]
            BlockErase,
            #[serde(rename = "CryptographicErase")]
            CryptographicErase,
            #[serde(rename = "Overwrite")]
            Overwrite,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Drive {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::drive::v1_17_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlockSizeBytes")]
            pub block_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapableSpeedGbs")]
            pub capable_speed_gbs: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityBytes")]
            pub capacity_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DriveFormFactor")]
            pub drive_form_factor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionAbility")]
            pub encryption_ability: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionStatus")]
            pub encryption_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FailurePredicted")]
            pub failure_predicted: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HotspareReplacementMode"
            )]
            pub hotspare_replacement_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotspareType")]
            pub hotspare_type: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::drive::v1_17_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<Vec<crate::resource::Location>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaType")]
            pub media_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Multipath")]
            pub multipath: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NegotiatedSpeedGbs")]
            pub negotiated_speed_gbs: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Operations")]
            pub operations: Option<Vec<crate::drive::v1_17_0::Operations>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalLocation")]
            pub physical_location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PredictedMediaLifeLeftPercent"
            )]
            pub predicted_media_life_left_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Protocol")]
            pub protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadyToRemove")]
            pub ready_to_remove: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Revision")]
            pub revision: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RotationSpeedRPM")]
            pub rotation_speed_rpm: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SlotCapableProtocols"
            )]
            pub slot_capable_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotFormFactor")]
            pub slot_form_factor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StatusIndicator")]
            pub status_indicator: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteCacheEnabled")]
            pub write_cache_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EncryptionAbility {
            #[default]
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Other")]
            Other,
            #[serde(rename = "SelfEncryptingDrive")]
            SelfEncryptingDrive,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EncryptionStatus {
            #[default]
            #[serde(rename = "Foreign")]
            Foreign,
            #[serde(rename = "Locked")]
            Locked,
            #[serde(rename = "Unecrypted")]
            Unecrypted,
            #[serde(rename = "Unencrypted")]
            Unencrypted,
            #[serde(rename = "Unlocked")]
            Unlocked,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FormFactor {
            #[default]
            #[serde(rename = "Drive2_5")]
            Drive2N5,
            #[serde(rename = "Drive3_5")]
            Drive3N5,
            #[serde(rename = "EDSFF_1U_Long")]
            EDSFF1ULong,
            #[serde(rename = "EDSFF_1U_Short")]
            EDSFF1UShort,
            #[serde(rename = "EDSFF_E3_Long")]
            EDSFFE3Long,
            #[serde(rename = "EDSFF_E3_Short")]
            EDSFFE3Short,
            #[serde(rename = "M2_22110")]
            M2N22110,
            #[serde(rename = "M2_2230")]
            M2N2230,
            #[serde(rename = "M2_2242")]
            M2N2242,
            #[serde(rename = "M2_2260")]
            M2N2260,
            #[serde(rename = "M2_2280")]
            M2N2280,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PCIeHalfLength")]
            PCIeHalfLength,
            #[serde(rename = "PCIeSlotFullLength")]
            PCIeSlotFullLength,
            #[serde(rename = "PCIeSlotLowProfile")]
            PCIeSlotLowProfile,
            #[serde(rename = "U2")]
            U2,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum HotspareReplacementModeType {
            #[default]
            #[serde(rename = "NonRevertible")]
            NonRevertible,
            #[serde(rename = "Revertible")]
            Revertible,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum HotspareType {
            #[default]
            #[serde(rename = "Chassis")]
            Chassis,
            #[serde(rename = "Dedicated")]
            Dedicated,
            #[serde(rename = "Global")]
            Global,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ActiveSoftwareImage"
            )]
            pub active_software_image: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareImages")]
            pub software_images: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SoftwareImages@odata.count"
            )]
            pub software_images_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StoragePools")]
            pub storage_pools: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StoragePools@odata.count"
            )]
            pub storage_pools_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Volumes")]
            pub volumes: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Volumes@odata.count"
            )]
            pub volumes_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MediaType {
            #[default]
            #[serde(rename = "HDD")]
            HDD,
            #[serde(rename = "SMR")]
            SMR,
            #[serde(rename = "SSD")]
            SSD,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Operations {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssociatedTask")]
            pub associated_task: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Operation")]
            pub operation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperationName")]
            pub operation_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentageComplete")]
            pub percentage_complete: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureErase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureEraseRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "OverwritePasses")]
            pub overwrite_passes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SanitizationType")]
            pub sanitization_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum StatusIndicator {
            #[default]
            #[serde(rename = "Fail")]
            Fail,
            #[serde(rename = "Hotspare")]
            Hotspare,
            #[serde(rename = "InACriticalArray")]
            InACriticalArray,
            #[serde(rename = "InAFailedArray")]
            InAFailedArray,
            #[serde(rename = "OK")]
            OK,
            #[serde(rename = "PredictiveFailureAnalysis")]
            PredictiveFailureAnalysis,
            #[serde(rename = "Rebuild")]
            Rebuild,
        }
    }
}
pub mod drive_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct DriveCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod drive_metrics {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::drive_metrics::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DriveMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::drive_metrics::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BadBlockCount")]
            pub bad_block_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableIOReadErrorCount"
            )]
            pub correctable_io_read_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableIOWriteErrorCount"
            )]
            pub correctable_io_write_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeSMART")]
            pub nvme_smart: Option<crate::storage_controller_metrics::NVMeSMARTMetrics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOnHours")]
            pub power_on_hours: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableIOReadErrorCount"
            )]
            pub uncorrectable_io_read_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableIOWriteErrorCount"
            )]
            pub uncorrectable_io_write_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod endpoint {
    pub mod v1_8_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::endpoint::v1_8_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ConnectedEntity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntityLink")]
            pub entity_link: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntityPciId")]
            pub entity_pci_id: Option<crate::endpoint::v1_8_0::PciId>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntityRole")]
            pub entity_role: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntityType")]
            pub entity_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::endpoint::v1_8_0::GenZ>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PciClassCode")]
            pub pci_class_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PciFunctionNumber")]
            pub pci_function_number: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Endpoint {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::endpoint::v1_8_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedEntities")]
            pub connected_entities: Option<Vec<crate::endpoint::v1_8_0::ConnectedEntity>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndpointProtocol")]
            pub endpoint_protocol: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HostReservationMemoryBytes"
            )]
            pub host_reservation_memory_bytes: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPTransportDetails")]
            pub ip_transport_details: Option<Vec<crate::endpoint::v1_8_0::IPTransportDetails>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::endpoint::v1_8_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PciId")]
            pub pci_id: Option<crate::endpoint::v1_8_0::PciId>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EntityRole {
            #[default]
            #[serde(rename = "Both")]
            Both,
            #[serde(rename = "Initiator")]
            Initiator,
            #[serde(rename = "Target")]
            Target,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EntityType {
            #[default]
            #[serde(rename = "AccelerationFunction")]
            AccelerationFunction,
            #[serde(rename = "Bridge")]
            Bridge,
            #[serde(rename = "CXLDevice")]
            CXLDevice,
            #[serde(rename = "DisplayController")]
            DisplayController,
            #[serde(rename = "Drive")]
            Drive,
            #[serde(rename = "FabricBridge")]
            FabricBridge,
            #[serde(rename = "Manager")]
            Manager,
            #[serde(rename = "MediaController")]
            MediaController,
            #[serde(rename = "Memory")]
            Memory,
            #[serde(rename = "MemoryChunk")]
            MemoryChunk,
            #[serde(rename = "NetworkController")]
            NetworkController,
            #[serde(rename = "Processor")]
            Processor,
            #[serde(rename = "RootComplex")]
            RootComplex,
            #[serde(rename = "StorageExpander")]
            StorageExpander,
            #[serde(rename = "StorageInitiator")]
            StorageInitiator,
            #[serde(rename = "StorageSubsystem")]
            StorageSubsystem,
            #[serde(rename = "Switch")]
            Switch,
            #[serde(rename = "Volume")]
            Volume,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GCID {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CID")]
            pub cid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SID")]
            pub sid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZ {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessKey")]
            pub access_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GCID")]
            pub gcid: Option<crate::endpoint::v1_8_0::GCID>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegionKey")]
            pub region_key: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPTransportDetails {
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv4Address")]
            pub ipv4_address: Option<crate::ip_addresses::IPv4Address>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv6Address")]
            pub ipv6_address: Option<crate::ip_addresses::IPv6Address>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransportProtocol")]
            pub transport_protocol: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressPools")]
            pub address_pools: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AddressPools@odata.count"
            )]
            pub address_pools_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedPorts")]
            pub connected_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedPorts@odata.count"
            )]
            pub connected_ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Connections")]
            pub connections: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Connections@odata.count"
            )]
            pub connections_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalPorts")]
            pub local_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocalPorts@odata.count"
            )]
            pub local_ports_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MutuallyExclusiveEndpoints"
            )]
            pub mutually_exclusive_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MutuallyExclusiveEndpoints@odata.count"
            )]
            pub mutually_exclusive_endpoints_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction@odata.count"
            )]
            pub network_device_function_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports@odata.count")]
            pub ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones")]
            pub zones: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones@odata.count")]
            pub zones_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PciId {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClassCode")]
            pub class_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceId")]
            pub device_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FunctionNumber")]
            pub function_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemId")]
            pub subsystem_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemVendorId")]
            pub subsystem_vendor_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VendorId")]
            pub vendor_id: Option<String>,
        }
    }
}
pub mod endpoint_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct EndpointCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod endpoint_group {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum AccessState {
        #[default]
        #[serde(rename = "NonOptimized")]
        NonOptimized,
        #[serde(rename = "Optimized")]
        Optimized,
        #[serde(rename = "Standby")]
        Standby,
        #[serde(rename = "Transitioning")]
        Transitioning,
        #[serde(rename = "Unavailable")]
        Unavailable,
    }
    pub mod v1_3_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::endpoint_group::v1_3_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EndpointGroup {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessState")]
            pub access_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::endpoint_group::v1_3_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupType")]
            pub group_type: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifier")]
            pub identifier: Option<crate::resource::Identifier>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::endpoint_group::v1_3_2::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Preferred")]
            pub preferred: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TargetEndpointGroupIdentifier"
            )]
            pub target_endpoint_group_identifier: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum GroupType {
            #[default]
            #[serde(rename = "Client")]
            Client,
            #[serde(rename = "Initiator")]
            Initiator,
            #[serde(rename = "Server")]
            Server,
            #[serde(rename = "Target")]
            Target,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Connections")]
            pub connections: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Connections@odata.count"
            )]
            pub connections_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod endpoint_group_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct EndpointGroupCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod environment_metrics {
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EnvironmentMetrics.ResetMetrics"
            )]
            pub environment_metrics_reset_metrics:
                Option<crate::environment_metrics::v1_3_0::ResetMetrics>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EnvironmentMetrics.ResetToDefaults"
            )]
            pub environment_metrics_reset_to_defaults:
                Option<crate::environment_metrics::v1_3_0::ResetToDefaults>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::environment_metrics::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EnvironmentMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AbsoluteHumidity")]
            pub absolute_humidity: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::environment_metrics::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DewPointCelsius")]
            pub dew_point_celsius: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergyJoules")]
            pub energy_joules: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanSpeedsPercent")]
            pub fan_speeds_percent: Option<Vec<crate::sensor::SensorFanArrayExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FanSpeedsPercent@odata.count"
            )]
            pub fan_speeds_percent_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HumidityPercent")]
            pub humidity_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLimitWatts")]
            pub power_limit_watts: Option<crate::control::ControlSingleExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLoadPercent")]
            pub power_load_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TemperatureCelsius")]
            pub temperature_celsius: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {}
    }
}
pub mod ethernet_interface {
    pub mod v1_10_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::ethernet_interface::v1_10_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DHCPFallback {
            #[default]
            #[serde(rename = "AutoConfig")]
            AutoConfig,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DHCPv4Configuration {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPEnabled")]
            pub dhcp_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FallbackAddress")]
            pub fallback_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseDNSServers")]
            pub use_dns_servers: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseDomainName")]
            pub use_domain_name: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseGateway")]
            pub use_gateway: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseNTPServers")]
            pub use_ntp_servers: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseStaticRoutes")]
            pub use_static_routes: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DHCPv6Configuration {
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingMode")]
            pub operating_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseDNSServers")]
            pub use_dns_servers: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseDomainName")]
            pub use_domain_name: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseNTPServers")]
            pub use_ntp_servers: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UseRapidCommit")]
            pub use_rapid_commit: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DHCPv6OperatingMode {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
            #[serde(rename = "Stateful")]
            Stateful,
            #[serde(rename = "Stateless")]
            Stateless,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EthernetDeviceType {
            #[default]
            #[serde(rename = "Physical")]
            Physical,
            #[serde(rename = "Virtual")]
            Virtual,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EthernetInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::ethernet_interface::v1_10_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AutoNeg")]
            pub auto_neg: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPv4")]
            pub dhc_pv4: Option<crate::ethernet_interface::v1_10_0::DHCPv4Configuration>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPv6")]
            pub dhc_pv6: Option<crate::ethernet_interface::v1_10_0::DHCPv6Configuration>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EthernetInterfaceType"
            )]
            pub ethernet_interface_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FQDN")]
            pub fqdn: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FullDuplex")]
            pub full_duplex: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostName")]
            pub host_name: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceEnabled")]
            pub interface_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv4Addresses")]
            pub ipv4_addresses: Option<Vec<crate::ip_addresses::IPv4Address>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv4StaticAddresses"
            )]
            pub ipv4_static_addresses: Option<Vec<crate::ip_addresses::IPv4Address>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv6AddressPolicyTable"
            )]
            pub ipv6_address_policy_table:
                Option<Vec<crate::ethernet_interface::v1_10_0::IPv6AddressPolicyEntry>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv6Addresses")]
            pub ipv6_addresses: Option<Vec<crate::ip_addresses::IPv6Address>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPv6DefaultGateway")]
            pub ipv6_default_gateway: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv6StaticAddresses"
            )]
            pub ipv6_static_addresses: Option<Vec<crate::ip_addresses::IPv6StaticAddress>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv6StaticDefaultGateways"
            )]
            pub ipv6_static_default_gateways:
                Option<Vec<crate::ip_addresses::IPv6GatewayStaticAddress>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkStatus")]
            pub link_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::ethernet_interface::v1_10_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MACAddress")]
            pub mac_address: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxIPv6StaticAddresses"
            )]
            pub max_ipv6_static_addresses: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MTUSize")]
            pub mtu_size: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NameServers")]
            pub name_servers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PermanentMACAddress"
            )]
            pub permanent_mac_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedMbps")]
            pub speed_mbps: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StatelessAddressAutoConfig"
            )]
            pub stateless_address_auto_config:
                Option<crate::ethernet_interface::v1_10_0::StatelessAddressAutoConfiguration>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StaticNameServers")]
            pub static_name_servers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TeamMode")]
            pub team_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiDevicePath")]
            pub uefi_device_path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLAN")]
            pub vlan: Option<crate::vlan_network_interface::VLAN>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANs")]
            pub vlans: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6AddressPolicyEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Label")]
            pub label: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Precedence")]
            pub precedence: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Prefix")]
            pub prefix: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkStatus {
            #[default]
            #[serde(rename = "LinkDown")]
            LinkDown,
            #[serde(rename = "LinkUp")]
            LinkUp,
            #[serde(rename = "NoLink")]
            NoLink,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AffiliatedInterfaces"
            )]
            pub affiliated_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AffiliatedInterfaces@odata.count"
            )]
            pub affiliated_interfaces_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostInterface")]
            pub host_interface: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports@odata.count")]
            pub ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedInterfaces")]
            pub related_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedInterfaces@odata.count"
            )]
            pub related_interfaces_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StatelessAddressAutoConfiguration {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv4AutoConfigEnabled"
            )]
            pub ipv4_auto_config_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IPv6AutoConfigEnabled"
            )]
            pub ipv6_auto_config_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TeamMode {
            #[default]
            #[serde(rename = "ActiveBackup")]
            ActiveBackup,
            #[serde(rename = "AdaptiveLoadBalancing")]
            AdaptiveLoadBalancing,
            #[serde(rename = "AdaptiveTransmitLoadBalancing")]
            AdaptiveTransmitLoadBalancing,
            #[serde(rename = "Broadcast")]
            Broadcast,
            #[serde(rename = "IEEE802_3ad")]
            IEEE8023ad,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "RoundRobin")]
            RoundRobin,
            #[serde(rename = "XOR")]
            XOR,
        }
    }
}
pub mod ethernet_interface_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct EthernetInterfaceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod event {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum EventType {
        #[default]
        #[serde(rename = "Alert")]
        Alert,
        #[serde(rename = "MetricReport")]
        MetricReport,
        #[serde(rename = "Other")]
        Other,
        #[serde(rename = "ResourceAdded")]
        ResourceAdded,
        #[serde(rename = "ResourceRemoved")]
        ResourceRemoved,
        #[serde(rename = "ResourceUpdated")]
        ResourceUpdated,
        #[serde(rename = "StatusChange")]
        StatusChange,
    }
}
pub mod event_destination {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum EventFormatType {
        #[default]
        #[serde(rename = "Event")]
        Event,
        #[serde(rename = "MetricReport")]
        MetricReport,
    }
    pub mod v1_13_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EventDestination.ResumeSubscription"
            )]
            pub event_destination_resume_subscription:
                Option<crate::event_destination::v1_13_1::ResumeSubscription>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EventDestination.SuspendSubscription"
            )]
            pub event_destination_suspend_subscription:
                Option<crate::event_destination::v1_13_1::SuspendSubscription>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::event_destination::v1_13_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DeliveryRetryPolicy {
            #[default]
            #[serde(rename = "RetryForever")]
            RetryForever,
            #[serde(rename = "RetryForeverWithBackoff")]
            RetryForeverWithBackoff,
            #[serde(rename = "SuspendRetries")]
            SuspendRetries,
            #[serde(rename = "TerminateAfterRetries")]
            TerminateAfterRetries,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EventDestination {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::event_destination::v1_13_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientCertificates")]
            pub client_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Context")]
            pub context: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeliveryRetryPolicy"
            )]
            pub delivery_retry_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Destination")]
            pub destination: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventFormatType")]
            pub event_format_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventTypes")]
            pub event_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExcludeMessageIds")]
            pub exclude_message_ids: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExcludeRegistryPrefixes"
            )]
            pub exclude_registry_prefixes: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HeartbeatIntervalMinutes"
            )]
            pub heartbeat_interval_minutes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpHeaders")]
            pub http_headers: Option<Vec<crate::event_destination::v1_13_1::HttpHeaderProperty>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IncludeOriginOfCondition"
            )]
            pub include_origin_of_condition: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageIds")]
            pub message_ids: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitions"
            )]
            pub metric_report_definitions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitions@odata.count"
            )]
            pub metric_report_definitions_odata_count: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OEMProtocol")]
            pub oem_protocol: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMSubscriptionType"
            )]
            pub oem_subscription_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OriginResources")]
            pub origin_resources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OriginResources@odata.count"
            )]
            pub origin_resources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Protocol")]
            pub protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegistryPrefixes")]
            pub registry_prefixes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceTypes")]
            pub resource_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SendHeartbeat")]
            pub send_heartbeat: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severities")]
            pub severities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SNMP")]
            pub snmp: Option<crate::event_destination::v1_13_1::SNMPSettings>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SubordinateResources"
            )]
            pub subordinate_resources: Option<bool>,
            #[serde(rename = "SubscriptionType")]
            pub subscription_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SyslogFilters")]
            pub syslog_filters: Option<Vec<crate::event_destination::v1_13_1::SyslogFilter>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerifyCertificate")]
            pub verify_certificate: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EventDestinationProtocol {
            #[default]
            #[serde(rename = "Kafka")]
            Kafka,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Redfish")]
            Redfish,
            #[serde(rename = "SMTP")]
            SMTP,
            #[serde(rename = "SNMPv1")]
            SNMPv1,
            #[serde(rename = "SNMPv2c")]
            SNMPv2c,
            #[serde(rename = "SNMPv3")]
            SNMPv3,
            #[serde(rename = "SyslogRELP")]
            SyslogRELP,
            #[serde(rename = "SyslogTCP")]
            SyslogTCP,
            #[serde(rename = "SyslogTLS")]
            SyslogTLS,
            #[serde(rename = "SyslogUDP")]
            SyslogUDP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HttpHeaderProperty {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResumeSubscription {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResumeSubscriptionRequestBody {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeliverBufferedEventDuration"
            )]
            pub deliver_buffered_event_duration: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPAuthenticationProtocols {
            #[default]
            #[serde(rename = "CommunityString")]
            CommunityString,
            #[serde(rename = "HMAC128_SHA224")]
            HMAC128SHA224,
            #[serde(rename = "HMAC192_SHA256")]
            HMAC192SHA256,
            #[serde(rename = "HMAC256_SHA384")]
            HMAC256SHA384,
            #[serde(rename = "HMAC384_SHA512")]
            HMAC384SHA512,
            #[serde(rename = "HMAC_MD5")]
            HMACMD5,
            #[serde(rename = "HMAC_SHA96")]
            HMACSHA96,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPEncryptionProtocols {
            #[default]
            #[serde(rename = "CBC_DES")]
            CBCDES,
            #[serde(rename = "CFB128_AES128")]
            CFB128AES128,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SNMPSettings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthenticationKey")]
            pub authentication_key: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationKeySet"
            )]
            pub authentication_key_set: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationProtocol"
            )]
            pub authentication_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKey")]
            pub encryption_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKeySet")]
            pub encryption_key_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionProtocol")]
            pub encryption_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TrapCommunity")]
            pub trap_community: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SubscriptionType {
            #[default]
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "RedfishEvent")]
            RedfishEvent,
            #[serde(rename = "SNMPInform")]
            SNMPInform,
            #[serde(rename = "SNMPTrap")]
            SNMPTrap,
            #[serde(rename = "SSE")]
            SSE,
            #[serde(rename = "Syslog")]
            Syslog,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SuspendSubscription {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SuspendSubscriptionRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SyslogFacility {
            #[default]
            #[serde(rename = "Auth")]
            Auth,
            #[serde(rename = "Authpriv")]
            Authpriv,
            #[serde(rename = "Console")]
            Console,
            #[serde(rename = "Cron")]
            Cron,
            #[serde(rename = "Daemon")]
            Daemon,
            #[serde(rename = "FTP")]
            FTP,
            #[serde(rename = "Kern")]
            Kern,
            #[serde(rename = "LPR")]
            LPR,
            #[serde(rename = "Local0")]
            Local0,
            #[serde(rename = "Local1")]
            Local1,
            #[serde(rename = "Local2")]
            Local2,
            #[serde(rename = "Local3")]
            Local3,
            #[serde(rename = "Local4")]
            Local4,
            #[serde(rename = "Local5")]
            Local5,
            #[serde(rename = "Local6")]
            Local6,
            #[serde(rename = "Local7")]
            Local7,
            #[serde(rename = "Mail")]
            Mail,
            #[serde(rename = "NTP")]
            NTP,
            #[serde(rename = "News")]
            News,
            #[serde(rename = "Security")]
            Security,
            #[serde(rename = "SolarisCron")]
            SolarisCron,
            #[serde(rename = "Syslog")]
            Syslog,
            #[serde(rename = "UUCP")]
            UUCP,
            #[serde(rename = "User")]
            User,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SyslogFilter {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogFacilities")]
            pub log_facilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowestSeverity")]
            pub lowest_severity: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SyslogSeverity {
            #[default]
            #[serde(rename = "Alert")]
            Alert,
            #[serde(rename = "All")]
            All,
            #[serde(rename = "Critical")]
            Critical,
            #[serde(rename = "Debug")]
            Debug,
            #[serde(rename = "Emergency")]
            Emergency,
            #[serde(rename = "Error")]
            Error,
            #[serde(rename = "Informational")]
            Informational,
            #[serde(rename = "Notice")]
            Notice,
            #[serde(rename = "Warning")]
            Warning,
        }
    }
}
pub mod event_destination_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct EventDestinationCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod event_service {
    pub mod v1_10_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EventService.SubmitTestEvent"
            )]
            pub event_service_submit_test_event:
                Option<crate::event_service::v1_10_0::SubmitTestEvent>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#EventService.TestEventSubscription"
            )]
            pub event_service_test_event_subscription:
                Option<crate::event_service::v1_10_0::TestEventSubscription>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::event_service::v1_10_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EventService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::event_service::v1_10_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeliveryRetryAttempts"
            )]
            pub delivery_retry_attempts: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeliveryRetryIntervalSeconds"
            )]
            pub delivery_retry_interval_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventFormatTypes")]
            pub event_format_types: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EventTypesForSubscription"
            )]
            pub event_types_for_subscription: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExcludeMessageId")]
            pub exclude_message_id: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExcludeRegistryPrefix"
            )]
            pub exclude_registry_prefix: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IncludeOriginOfConditionSupported"
            )]
            pub include_origin_of_condition_supported: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegistryPrefixes")]
            pub registry_prefixes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceTypes")]
            pub resource_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServerSentEventUri")]
            pub server_sent_event_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severities")]
            pub severities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SMTP")]
            pub smtp: Option<crate::event_service::v1_10_0::SMTP>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SSEFilterPropertiesSupported"
            )]
            pub sse_filter_properties_supported:
                Option<crate::event_service::v1_10_0::SSEFilterPropertiesSupported>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SubordinateResourcesSupported"
            )]
            pub subordinate_resources_supported: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Subscriptions")]
            pub subscriptions: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SMTP {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Authentication")]
            pub authentication: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectionProtocol")]
            pub connection_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FromAddress")]
            pub from_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PasswordSet")]
            pub password_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServerAddress")]
            pub server_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SMTPAuthenticationMethods {
            #[default]
            #[serde(rename = "AutoDetect")]
            AutoDetect,
            #[serde(rename = "CRAM_MD5")]
            CRAMMD5,
            #[serde(rename = "Login")]
            Login,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Plain")]
            Plain,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SMTPConnectionProtocol {
            #[default]
            #[serde(rename = "AutoDetect")]
            AutoDetect,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "StartTLS")]
            StartTLS,
            #[serde(rename = "TLS_SSL")]
            TLSSSL,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SSEFilterPropertiesSupported {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventFormatType")]
            pub event_format_type: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventType")]
            pub event_type: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageId")]
            pub message_id: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinition"
            )]
            pub metric_report_definition: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OriginResource")]
            pub origin_resource: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegistryPrefix")]
            pub registry_prefix: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceType")]
            pub resource_type: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SubordinateResources"
            )]
            pub subordinate_resources: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SubmitTestEvent {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SubmitTestEventRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventGroupId")]
            pub event_group_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventId")]
            pub event_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventTimestamp")]
            pub event_timestamp: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventType")]
            pub event_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Message")]
            pub message: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageArgs")]
            pub message_args: Option<Vec<String>>,
            #[serde(rename = "MessageId")]
            pub message_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageSeverity")]
            pub message_severity: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OriginOfCondition")]
            pub origin_of_condition: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
            pub severity: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TestEventSubscription {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TestEventSubscriptionRequestBody {}
    }
}
pub mod external_account_provider {
    pub mod v1_6_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AccountProviderTypes {
            #[default]
            #[serde(rename = "ActiveDirectoryService")]
            ActiveDirectoryService,
            #[serde(rename = "LDAPService")]
            LDAPService,
            #[serde(rename = "OAuth2")]
            OAuth2,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "RedfishService")]
            RedfishService,
            #[serde(rename = "TACACSplus")]
            TACACSplus,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::external_account_provider::v1_6_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Authentication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthenticationType")]
            pub authentication_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKey")]
            pub encryption_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKeySet")]
            pub encryption_key_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KerberosKeytab")]
            pub kerberos_keytab: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Token")]
            pub token: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AuthenticationTypes {
            #[default]
            #[serde(rename = "KerberosKeytab")]
            KerberosKeytab,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Token")]
            Token,
            #[serde(rename = "UsernameAndPassword")]
            UsernameAndPassword,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ExternalAccountProvider {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccountProviderType"
            )]
            pub account_provider_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::external_account_provider::v1_6_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Authentication")]
            pub authentication: Option<crate::external_account_provider::v1_6_0::Authentication>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LDAPService")]
            pub ldap_service: Option<crate::external_account_provider::v1_6_0::LDAPService>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::external_account_provider::v1_6_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OAuth2Service")]
            pub oauth2_service: Option<crate::external_account_provider::v1_6_0::OAuth2Service>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Priority")]
            pub priority: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteRoleMapping")]
            pub remote_role_mapping:
                Option<Vec<crate::external_account_provider::v1_6_0::RoleMapping>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Retries")]
            pub retries: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceAddresses")]
            pub service_addresses: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TACACSplusService")]
            pub tacac_splus_service:
                Option<crate::external_account_provider::v1_6_0::TACACSplusService>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TimeoutSeconds")]
            pub timeout_seconds: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LDAPSearchSettings {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BaseDistinguishedNames"
            )]
            pub base_distinguished_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupNameAttribute")]
            pub group_name_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupsAttribute")]
            pub groups_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSHKeyAttribute")]
            pub ssh_key_attribute: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UsernameAttribute")]
            pub username_attribute: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LDAPService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SearchSettings")]
            pub search_settings:
                Option<crate::external_account_provider::v1_6_0::LDAPSearchSettings>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OAuth2Mode {
            #[default]
            #[serde(rename = "Discovery")]
            Discovery,
            #[serde(rename = "Offline")]
            Offline,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OAuth2Service {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Audience")]
            pub audience: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Issuer")]
            pub issuer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Mode")]
            pub mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OAuthServiceSigningKeys"
            )]
            pub oauth_service_signing_keys: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RoleMapping {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocalRole")]
            pub local_role: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MFABypass")]
            pub mfa_bypass: Option<crate::account_service::MFABypass>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteGroup")]
            pub remote_group: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemoteUser")]
            pub remote_user: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TACACSplusPasswordExchangeProtocol {
            #[default]
            #[serde(rename = "ASCII")]
            ASCII,
            #[serde(rename = "CHAP")]
            CHAP,
            #[serde(rename = "MSCHAPv1")]
            MSCHAPv1,
            #[serde(rename = "MSCHAPv2")]
            MSCHAPv2,
            #[serde(rename = "PAP")]
            PAP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TACACSplusService {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthorizationService"
            )]
            pub authorization_service: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PasswordExchangeProtocols"
            )]
            pub password_exchange_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrivilegeLevelArgument"
            )]
            pub privilege_level_argument: Option<String>,
        }
    }
}
pub mod external_account_provider_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ExternalAccountProviderCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod fabric {
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::fabric::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Fabric {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::fabric::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressPools")]
            pub address_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Connections")]
            pub connections: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndpointGroups")]
            pub endpoint_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricType")]
            pub fabric_type: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::fabric::v1_3_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxZones")]
            pub max_zones: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switches")]
            pub switches: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones")]
            pub zones: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod fabric_adapter {
    pub mod v1_5_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::fabric_adapter::v1_5_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FabricAdapter {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::fabric_adapter::v1_5_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ASICManufacturer")]
            pub asic_manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ASICPartNumber")]
            pub asic_part_number: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ASICRevisionIdentifier"
            )]
            pub asic_revision_identifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricType")]
            pub fabric_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FabricTypeCapabilities"
            )]
            pub fabric_type_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::fabric_adapter::v1_5_1::GenZ>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::fabric_adapter::v1_5_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZ {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MSDT")]
            pub msdt: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PIDT")]
            pub pidt: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RequestorVCAT")]
            pub requestor_vcat: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResponderVCAT")]
            pub responder_vcat: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RITable")]
            pub ri_table: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSDT")]
            pub ssdt: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryDomains@odata.count"
            )]
            pub memory_domains_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevices")]
            pub pcie_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeDevices@odata.count"
            )]
            pub pcie_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod fabric_adapter_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct FabricAdapterCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod fabric_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct FabricCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod facility {
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::facility::v1_4_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Facility {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::facility::v1_4_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AmbientMetrics")]
            pub ambient_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "FacilityType")]
            pub facility_type: String,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::facility::v1_4_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerDomains")]
            pub power_domains: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FacilityType {
            #[default]
            #[serde(rename = "Building")]
            Building,
            #[serde(rename = "Floor")]
            Floor,
            #[serde(rename = "Room")]
            Room,
            #[serde(rename = "Site")]
            Site,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CDUs")]
            pub cd_us: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CDUs@odata.count")]
            pub cd_us_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ContainedByFacility"
            )]
            pub contained_by_facility: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContainsChassis")]
            pub contains_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ContainsChassis@odata.count"
            )]
            pub contains_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContainsFacilities")]
            pub contains_facilities: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ContainsFacilities@odata.count"
            )]
            pub contains_facilities_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingLoops")]
            pub cooling_loops: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolingLoops@odata.count"
            )]
            pub cooling_loops_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalBuses")]
            pub electrical_buses: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalBuses@odata.count"
            )]
            pub electrical_buses_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FloorPDUs")]
            pub floor_pd_us: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FloorPDUs@odata.count"
            )]
            pub floor_pd_us_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ImmersionUnits")]
            pub immersion_units: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ImmersionUnits@odata.count"
            )]
            pub immersion_units_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerShelves")]
            pub power_shelves: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerShelves@odata.count"
            )]
            pub power_shelves_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackPDUs")]
            pub rack_pd_us: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RackPDUs@odata.count"
            )]
            pub rack_pd_us_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switchgear")]
            pub switchgear: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Switchgear@odata.count"
            )]
            pub switchgear_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferSwitches")]
            pub transfer_switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferSwitches@odata.count"
            )]
            pub transfer_switches_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod facility_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct FacilityCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod fan {
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::fan::v1_4_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Fan {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::fan::v1_4_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanDiameterMm")]
            pub fan_diameter_mm: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::fan::v1_4_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedPercent")]
            pub speed_percent: Option<crate::sensor::SensorFanExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingChassis")]
            pub cooling_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CoolingChassis@odata.count"
            )]
            pub cooling_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod fan_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct FanCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod filter {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::filter::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Filter {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::filter::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedServiceHours")]
            pub rated_service_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceHours")]
            pub service_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServicedDate")]
            pub serviced_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod filter_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct FilterCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod graphics_controller {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::graphics_controller::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GraphicsController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::graphics_controller::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BiosVersion")]
            pub bios_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DriverVersion")]
            pub driver_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::graphics_controller::v1_0_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod graphics_controller_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct GraphicsControllerCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod heater {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::heater::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Heater {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::heater::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::heater::v1_0_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Managers")]
            pub managers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Managers@odata.count"
            )]
            pub managers_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory@odata.count")]
            pub memory_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkAdapters")]
            pub network_adapters: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkAdapters@odata.count"
            )]
            pub network_adapters_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageControllers")]
            pub storage_controllers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageControllers@odata.count"
            )]
            pub storage_controllers_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod heater_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct HeaterCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod heater_metrics {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#HeaterMetrics.ResetMetrics"
            )]
            pub heater_metrics_reset_metrics: Option<crate::heater_metrics::v1_0_0::ResetMetrics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::heater_metrics::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HeaterMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::heater_metrics::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrePowerOnHeatingTimeSeconds"
            )]
            pub pre_power_on_heating_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RuntimeHeatingTimeSeconds"
            )]
            pub runtime_heating_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureReadingsCelsius"
            )]
            pub temperature_readings_celsius: Option<Vec<crate::sensor::SensorArrayExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureReadingsCelsius@odata.count"
            )]
            pub temperature_readings_celsius_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
    }
}
pub mod host_interface {
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::host_interface::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AuthenticationMode {
            #[default]
            #[serde(rename = "AuthNone")]
            AuthNone,
            #[serde(rename = "BasicAuth")]
            BasicAuth,
            #[serde(rename = "OemAuth")]
            OemAuth,
            #[serde(rename = "RedfishSessionAuth")]
            RedfishSessionAuth,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CredentialBootstrapping {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnableAfterReset")]
            pub enable_after_reset: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoleId")]
            pub role_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HostInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::host_interface::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthNoneRoleId")]
            pub auth_none_role_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationModes"
            )]
            pub authentication_modes: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CredentialBootstrapping"
            )]
            pub credential_bootstrapping:
                Option<crate::host_interface::v1_3_0::CredentialBootstrapping>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExternallyAccessible"
            )]
            pub externally_accessible: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FirmwareAuthEnabled"
            )]
            pub firmware_auth_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareAuthRoleId")]
            pub firmware_auth_role_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HostEthernetInterfaces"
            )]
            pub host_ethernet_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostInterfaceType")]
            pub host_interface_type: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceEnabled")]
            pub interface_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelAuthEnabled")]
            pub kernel_auth_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelAuthRoleId")]
            pub kernel_auth_role_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::host_interface::v1_3_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerEthernetInterface"
            )]
            pub manager_ethernet_interface: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkProtocol")]
            pub network_protocol: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum HostInterfaceType {
            #[default]
            #[serde(rename = "NetworkHostInterface")]
            NetworkHostInterface,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthNoneRole")]
            pub auth_none_role: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystems")]
            pub computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComputerSystems@odata.count"
            )]
            pub computer_systems_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CredentialBootstrappingRole"
            )]
            pub credential_bootstrapping_role: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareAuthRole")]
            pub firmware_auth_role: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelAuthRole")]
            pub kernel_auth_role: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod host_interface_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct HostInterfaceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod io_statistics {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IOStatistics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonIORequestTime")]
            pub non_io_request_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonIORequests")]
            pub non_io_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadHitIORequests")]
            pub read_hit_io_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadIOKiBytes")]
            pub read_io_ki_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadIORequestTime")]
            pub read_io_request_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadIORequests")]
            pub read_io_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteHitIORequests")]
            pub write_hit_io_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteIOKiBytes")]
            pub write_io_ki_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteIORequestTime")]
            pub write_io_request_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteIORequests")]
            pub write_io_requests: Option<i64>,
        }
    }
}
pub mod ip_addresses {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum IPv4Address {
        IPAddressesV1N0N10IPv4Address(crate::ip_addresses::v1_0_10::IPv4Address),
        IPAddressesV1N1N3IPv4Address(crate::ip_addresses::v1_1_3::IPv4Address),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum IPv6Address {
        IPAddressesV1N0N10IPv6Address(crate::ip_addresses::v1_0_10::IPv6Address),
        IPAddressesV1N1N3IPv6Address(crate::ip_addresses::v1_1_3::IPv6Address),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum IPv6GatewayStaticAddress {
        IPAddressesV1N1N3IPv6GatewayStaticAddress(
            crate::ip_addresses::v1_1_3::IPv6GatewayStaticAddress,
        ),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum IPv6StaticAddress {
        IPAddressesV1N0N10IPv6StaticAddress(crate::ip_addresses::v1_0_10::IPv6StaticAddress),
        IPAddressesV1N1N3IPv6StaticAddress(crate::ip_addresses::v1_1_3::IPv6StaticAddress),
    }
    pub mod v1_0_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AddressState {
            #[default]
            #[serde(rename = "Deprecated")]
            Deprecated,
            #[serde(rename = "Failed")]
            Failed,
            #[serde(rename = "Preferred")]
            Preferred,
            #[serde(rename = "Tentative")]
            Tentative,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv4Address {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressOrigin")]
            pub address_origin: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Gateway")]
            pub gateway: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubnetMask")]
            pub subnet_mask: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPv4AddressOrigin {
            #[default]
            #[serde(rename = "BOOTP")]
            BOOTP,
            #[serde(rename = "DHCP")]
            DHCP,
            #[serde(rename = "IPv4LinkLocal")]
            IPv4LinkLocal,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6Address {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressOrigin")]
            pub address_origin: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressState")]
            pub address_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrefixLength")]
            pub prefix_length: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPv6AddressOrigin {
            #[default]
            #[serde(rename = "DHCPv6")]
            DHCPv6,
            #[serde(rename = "LinkLocal")]
            LinkLocal,
            #[serde(rename = "SLAAC")]
            SLAAC,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6StaticAddress {
            #[serde(rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "PrefixLength")]
            pub prefix_length: Option<i64>,
        }
    }
    pub mod v1_1_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AddressState {
            #[default]
            #[serde(rename = "Deprecated")]
            Deprecated,
            #[serde(rename = "Failed")]
            Failed,
            #[serde(rename = "Preferred")]
            Preferred,
            #[serde(rename = "Tentative")]
            Tentative,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv4Address {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressOrigin")]
            pub address_origin: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Gateway")]
            pub gateway: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubnetMask")]
            pub subnet_mask: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPv4AddressOrigin {
            #[default]
            #[serde(rename = "BOOTP")]
            BOOTP,
            #[serde(rename = "DHCP")]
            DHCP,
            #[serde(rename = "IPv4LinkLocal")]
            IPv4LinkLocal,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6Address {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressOrigin")]
            pub address_origin: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressState")]
            pub address_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrefixLength")]
            pub prefix_length: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPv6AddressOrigin {
            #[default]
            #[serde(rename = "DHCPv6")]
            DHCPv6,
            #[serde(rename = "LinkLocal")]
            LinkLocal,
            #[serde(rename = "SLAAC")]
            SLAAC,
            #[serde(rename = "Static")]
            Static,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6GatewayStaticAddress {
            #[serde(rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrefixLength")]
            pub prefix_length: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct IPv6StaticAddress {
            #[serde(rename = "Address")]
            pub address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "PrefixLength")]
            pub prefix_length: Option<i64>,
        }
    }
}
pub mod job {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::job::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Job {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::job::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedBy")]
            pub created_by: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndTime")]
            pub end_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EstimatedDuration")]
            pub estimated_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HidePayload")]
            pub hide_payload: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JobState")]
            pub job_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JobStatus")]
            pub job_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::job::v1_2_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxExecutionTime")]
            pub max_execution_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Messages")]
            pub messages: Option<Vec<crate::message::Message>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Payload")]
            pub payload: Option<crate::job::v1_2_1::Payload>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentComplete")]
            pub percent_complete: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Schedule")]
            pub schedule: Option<crate::schedule::Schedule>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StartTime")]
            pub start_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StepOrder")]
            pub step_order: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Steps")]
            pub steps: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum JobState {
            #[default]
            #[serde(rename = "Cancelled")]
            Cancelled,
            #[serde(rename = "Completed")]
            Completed,
            #[serde(rename = "Continue")]
            Continue,
            #[serde(rename = "Exception")]
            Exception,
            #[serde(rename = "Interrupted")]
            Interrupted,
            #[serde(rename = "New")]
            New,
            #[serde(rename = "Pending")]
            Pending,
            #[serde(rename = "Running")]
            Running,
            #[serde(rename = "Service")]
            Service,
            #[serde(rename = "Starting")]
            Starting,
            #[serde(rename = "Stopping")]
            Stopping,
            #[serde(rename = "Suspended")]
            Suspended,
            #[serde(rename = "UserIntervention")]
            UserIntervention,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedResources")]
            pub created_resources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CreatedResources@odata.count"
            )]
            pub created_resources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Payload {
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpHeaders")]
            pub http_headers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpOperation")]
            pub http_operation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JsonBody")]
            pub json_body: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetUri")]
            pub target_uri: Option<String>,
        }
    }
}
pub mod job_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct JobCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod job_service {
    pub mod v1_0_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::job_service::v1_0_4::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct JobService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::job_service::v1_0_4::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DateTime")]
            pub date_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Jobs")]
            pub jobs: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Log")]
            pub log: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceCapabilities"
            )]
            pub service_capabilities: Option<crate::job_service::v1_0_4::JobServiceCapabilities>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct JobServiceCapabilities {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxJobs")]
            pub max_jobs: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSteps")]
            pub max_steps: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Scheduling")]
            pub scheduling: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod json_schema_file {
    pub mod v1_1_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::json_schema_file::v1_1_4::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct JsonSchemaFile {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::json_schema_file::v1_1_4::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Languages")]
            pub languages: Vec<String>,
            #[serde(rename = "Location")]
            pub location: Vec<crate::json_schema_file::v1_1_4::Location>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "Schema")]
            pub schema: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ArchiveFile")]
            pub archive_file: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ArchiveUri")]
            pub archive_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Language")]
            pub language: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PublicationUri")]
            pub publication_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Uri")]
            pub uri: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod json_schema_file_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct JsonSchemaFileCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod key {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::key::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Key {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::key::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyString")]
            pub key_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyType")]
            pub key_type: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeoF")]
            pub nvme_of: Option<crate::key::v1_2_0::NVMeoF>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSH")]
            pub ssh: Option<crate::key::v1_2_0::SSHType>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserDescription")]
            pub user_description: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum KeyType {
            #[default]
            #[serde(rename = "NVMeoF")]
            NVMeoF,
            #[serde(rename = "SSH")]
            SSH,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeoF {
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostKeyId")]
            pub host_key_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NQN")]
            pub nqn: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMSecurityProtocolType"
            )]
            pub oem_security_protocol_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecureHashAllowList"
            )]
            pub secure_hash_allow_list: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecurityProtocolType"
            )]
            pub security_protocol_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFSecureHashType {
            #[default]
            #[serde(rename = "SHA256")]
            SHA256,
            #[serde(rename = "SHA384")]
            SHA384,
            #[serde(rename = "SHA512")]
            SHA512,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFSecurityProtocolType {
            #[default]
            #[serde(rename = "DHHC")]
            DHHC,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "TLS_PSK")]
            TLSPSK,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SSHType {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fingerprint")]
            pub fingerprint: Option<String>,
        }
    }
}
pub mod key_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct KeyCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod key_policy {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::key_policy::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct KeyPolicy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::key_policy::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsDefault")]
            pub is_default: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyPolicyType")]
            pub key_policy_type: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeoF")]
            pub nvme_of: Option<crate::key_policy::v1_0_0::NVMeoF>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum KeyPolicyType {
            #[default]
            #[serde(rename = "NVMeoF")]
            NVMeoF,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeoF {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CipherSuiteAllowList"
            )]
            pub cipher_suite_allow_list: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHGroupAllowList")]
            pub dh_group_allow_list: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMSecurityProtocolAllowList"
            )]
            pub oem_security_protocol_allow_list: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecureHashAllowList"
            )]
            pub secure_hash_allow_list: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecurityProtocolAllowList"
            )]
            pub security_protocol_allow_list: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecurityTransportAllowList"
            )]
            pub security_transport_allow_list: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFCipherSuiteType {
            #[default]
            #[serde(rename = "TLS_AES_128_GCM_SHA256")]
            TLSAESN128GCMSHA256,
            #[serde(rename = "TLS_AES_256_GCM_SHA384")]
            TLSAESN256GCMSHA384,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFDHGroupType {
            #[default]
            #[serde(rename = "FFDHE2048")]
            FFDHE2048,
            #[serde(rename = "FFDHE3072")]
            FFDHE3072,
            #[serde(rename = "FFDHE4096")]
            FFDHE4096,
            #[serde(rename = "FFDHE6144")]
            FFDHE6144,
            #[serde(rename = "FFDHE8192")]
            FFDHE8192,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFSecureHashType {
            #[default]
            #[serde(rename = "SHA256")]
            SHA256,
            #[serde(rename = "SHA384")]
            SHA384,
            #[serde(rename = "SHA512")]
            SHA512,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFSecurityProtocolType {
            #[default]
            #[serde(rename = "DHHC")]
            DHHC,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "TLS_PSK")]
            TLSPSK,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeoFSecurityTransportType {
            #[default]
            #[serde(rename = "TLSv2")]
            TLSv2,
            #[serde(rename = "TLSv3")]
            TLSv3,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod key_policy_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct KeyPolicyCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod key_service {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::key_service::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct KeyService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::key_service::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeoFKeyPolicies")]
            pub nvme_of_key_policies: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeoFSecrets")]
            pub nvme_of_secrets: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod leak_detection {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::leak_detection::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LeakDetection {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::leak_detection::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LeakDetectorGroups")]
            pub leak_detector_groups: Option<Vec<crate::leak_detection::v1_0_0::LeakDetectorGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LeakDetectors")]
            pub leak_detectors: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LeakDetectorGroup {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Detectors")]
            pub detectors: Option<Vec<crate::leak_detector::LeakDetectorArrayExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Detectors@odata.count"
            )]
            pub detectors_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GroupName")]
            pub group_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HumidityPercent")]
            pub humidity_percent: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod leak_detector {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum LeakDetectorArrayExcerpt {
        LeakDetectorV1N0N0LeakDetectorArrayExcerpt(
            crate::leak_detector::v1_0_0::LeakDetectorArrayExcerpt,
        ),
    }
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::leak_detector::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LeakDetector {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::leak_detector::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DetectorState")]
            pub detector_state: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LeakDetectorType")]
            pub leak_detector_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensingFrequency")]
            pub sensing_frequency: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LeakDetectorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DetectorState")]
            pub detector_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LeakDetectorType {
            #[default]
            #[serde(rename = "FloatSwitch")]
            FloatSwitch,
            #[serde(rename = "Moisture")]
            Moisture,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod leak_detector_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct LeakDetectorCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod license {
    pub mod v1_1_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::license::v1_1_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AuthorizationScope {
            #[default]
            #[serde(rename = "Capacity")]
            Capacity,
            #[serde(rename = "Device")]
            Device,
            #[serde(rename = "Service")]
            Service,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct License {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::license::v1_1_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthorizationScope")]
            pub authorization_scope: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contact")]
            pub contact: Option<crate::license::v1_1_1::ContactInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DownloadURI")]
            pub download_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntitlementId")]
            pub entitlement_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExpirationDate")]
            pub expiration_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GracePeriodDays")]
            pub grace_period_days: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InstallDate")]
            pub install_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LicenseInfoURI")]
            pub license_info_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LicenseOrigin")]
            pub license_origin: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LicenseString")]
            pub license_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LicenseType")]
            pub license_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::license::v1_1_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxAuthorizedDevices"
            )]
            pub max_authorized_devices: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemainingDuration")]
            pub remaining_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemainingUseCount")]
            pub remaining_use_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Removable")]
            pub removable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LicenseOrigin {
            #[default]
            #[serde(rename = "BuiltIn")]
            BuiltIn,
            #[serde(rename = "Installed")]
            Installed,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LicenseType {
            #[default]
            #[serde(rename = "Production")]
            Production,
            #[serde(rename = "Prototype")]
            Prototype,
            #[serde(rename = "Trial")]
            Trial,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthorizedDevices")]
            pub authorized_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthorizedDevices@odata.count"
            )]
            pub authorized_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetServices")]
            pub target_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TargetServices@odata.count"
            )]
            pub target_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod license_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct LicenseCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod license_service {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#LicenseService.Install"
            )]
            pub license_service_install: Option<crate::license_service::v1_1_0::Install>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::license_service::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Install {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InstallRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthorizedDevices")]
            pub authorized_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(rename = "LicenseFileURI")]
            pub license_file_uri: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetServices")]
            pub target_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferProtocol")]
            pub transfer_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LicenseService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::license_service::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LicenseExpirationWarningDays"
            )]
            pub license_expiration_warning_days: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Licenses")]
            pub licenses: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TransferProtocolType {
            #[default]
            #[serde(rename = "CIFS")]
            CIFS,
            #[serde(rename = "FTP")]
            FTP,
            #[serde(rename = "HTTP")]
            HTTP,
            #[serde(rename = "HTTPS")]
            HTTPS,
            #[serde(rename = "NFS")]
            NFS,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SCP")]
            SCP,
            #[serde(rename = "SFTP")]
            SFTP,
            #[serde(rename = "TFTP")]
            TFTP,
        }
    }
}
pub mod log_entry {
    pub mod v1_15_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::log_entry::v1_15_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CPER {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NotificationType")]
            pub notification_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SectionType")]
            pub section_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CXLEntryType {
            #[default]
            #[serde(rename = "DynamicCapacity")]
            DynamicCapacity,
            #[serde(rename = "Failure")]
            Failure,
            #[serde(rename = "Fatal")]
            Fatal,
            #[serde(rename = "Informational")]
            Informational,
            #[serde(rename = "Warning")]
            Warning,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EventSeverity {
            #[default]
            #[serde(rename = "Critical")]
            Critical,
            #[serde(rename = "OK")]
            OK,
            #[serde(rename = "Warning")]
            Warning,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OriginOfCondition")]
            pub origin_of_condition: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedLogEntries")]
            pub related_log_entries: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedLogEntries@odata.count"
            )]
            pub related_log_entries_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogDiagnosticDataTypes {
            #[default]
            #[serde(rename = "CPER")]
            CPER,
            #[serde(rename = "CPERSection")]
            CPERSection,
            #[serde(rename = "Manager")]
            Manager,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OS")]
            OS,
            #[serde(rename = "PreOS")]
            PreOS,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LogEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::log_entry::v1_15_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalDataSizeBytes"
            )]
            pub additional_data_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalDataURI")]
            pub additional_data_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CPER")]
            pub cper: Option<crate::log_entry::v1_15_0::CPER>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Created")]
            pub created: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLEntryType")]
            pub cxl_entry_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DiagnosticData")]
            pub diagnostic_data: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DiagnosticDataType")]
            pub diagnostic_data_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EntryCode")]
            pub entry_code: Option<String>,
            #[serde(rename = "EntryType")]
            pub entry_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventGroupId")]
            pub event_group_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventId")]
            pub event_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventTimestamp")]
            pub event_timestamp: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventType")]
            pub event_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FirstOverflowTimestamp"
            )]
            pub first_overflow_timestamp: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GeneratorId")]
            pub generator_id: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LastOverflowTimestamp"
            )]
            pub last_overflow_timestamp: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::log_entry::v1_15_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Message")]
            pub message: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageArgs")]
            pub message_args: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageId")]
            pub message_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Modified")]
            pub modified: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMDiagnosticDataType"
            )]
            pub oem_diagnostic_data_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemLogEntryCode")]
            pub oem_log_entry_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemRecordFormat")]
            pub oem_record_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemSensorType")]
            pub oem_sensor_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Originator")]
            pub originator: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OriginatorType")]
            pub originator_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OverflowErrorCount")]
            pub overflow_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Persistency")]
            pub persistency: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Resolution")]
            pub resolution: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Resolved")]
            pub resolved: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorNumber")]
            pub sensor_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorType")]
            pub sensor_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceProviderNotified"
            )]
            pub service_provider_notified: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
            pub severity: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpecificEventExistsInGroup"
            )]
            pub specific_event_exists_in_group: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogEntryCode {
            #[default]
            #[serde(rename = "Assert")]
            Assert,
            #[serde(rename = "D0 Power State")]
            D0PowerState,
            #[serde(rename = "D1 Power State")]
            D1PowerState,
            #[serde(rename = "D2 Power State")]
            D2PowerState,
            #[serde(rename = "D3 Power State")]
            D3PowerState,
            #[serde(rename = "Deassert")]
            Deassert,
            #[serde(rename = "Device Disabled")]
            DeviceDisabled,
            #[serde(rename = "Device Enabled")]
            DeviceEnabled,
            #[serde(rename = "Device Inserted / Device Present")]
            DeviceInsertedDevicePresent,
            #[serde(rename = "Device Removed / Device Absent")]
            DeviceRemovedDeviceAbsent,
            #[serde(rename = "Fully Redundant")]
            FullyRedundant,
            #[serde(rename = "Informational")]
            Informational,
            #[serde(rename = "Install Error")]
            InstallError,
            #[serde(rename = "Limit Exceeded")]
            LimitExceeded,
            #[serde(rename = "Limit Not Exceeded")]
            LimitNotExceeded,
            #[serde(rename = "Lower Critical - going high")]
            LowerCriticalGoingHigh,
            #[serde(rename = "Lower Critical - going low")]
            LowerCriticalGoingLow,
            #[serde(rename = "Lower Non-critical - going high")]
            LowerNonCriticalGoingHigh,
            #[serde(rename = "Lower Non-critical - going low")]
            LowerNonCriticalGoingLow,
            #[serde(rename = "Lower Non-recoverable - going high")]
            LowerNonRecoverableGoingHigh,
            #[serde(rename = "Lower Non-recoverable - going low")]
            LowerNonRecoverableGoingLow,
            #[serde(rename = "Monitor")]
            Monitor,
            #[serde(rename = "Non-redundant:Insufficient Resources")]
            NonRedundantInsufficientResources,
            #[serde(rename = "Non-redundant:Sufficient Resources from Insufficient Resources")]
            NonRedundantSufficientResourcesFromInsufficientResources,
            #[serde(rename = "Non-redundant:Sufficient Resources from Redundant")]
            NonRedundantSufficientResourcesFromRedundant,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Performance Lags")]
            PerformanceLags,
            #[serde(rename = "Performance Met")]
            PerformanceMet,
            #[serde(rename = "Predictive Failure asserted")]
            PredictiveFailureAsserted,
            #[serde(rename = "Predictive Failure deasserted")]
            PredictiveFailureDeasserted,
            #[serde(rename = "Redundancy Degraded")]
            RedundancyDegraded,
            #[serde(rename = "Redundancy Degraded from Fully Redundant")]
            RedundancyDegradedFromFullyRedundant,
            #[serde(rename = "Redundancy Degraded from Non-redundant")]
            RedundancyDegradedFromNonRedundant,
            #[serde(rename = "Redundancy Lost")]
            RedundancyLost,
            #[serde(rename = "State Asserted")]
            StateAsserted,
            #[serde(rename = "State Deasserted")]
            StateDeasserted,
            #[serde(rename = "Transition to Active")]
            TransitionToActive,
            #[serde(rename = "Transition to Busy")]
            TransitionToBusy,
            #[serde(rename = "Transition to Critical from Non-recoverable")]
            TransitionToCriticalFromNonRecoverable,
            #[serde(rename = "Transition to Critical from less severe")]
            TransitionToCriticalFromLessSevere,
            #[serde(rename = "Transition to Degraded")]
            TransitionToDegraded,
            #[serde(rename = "Transition to Idle")]
            TransitionToIdle,
            #[serde(rename = "Transition to In Test")]
            TransitionToInTest,
            #[serde(rename = "Transition to Non-Critical from OK")]
            TransitionToNonCriticalFromOK,
            #[serde(rename = "Transition to Non-Critical from more severe")]
            TransitionToNonCriticalFromMoreSevere,
            #[serde(rename = "Transition to Non-recoverable")]
            TransitionToNonRecoverable,
            #[serde(rename = "Transition to Non-recoverable from less severe")]
            TransitionToNonRecoverableFromLessSevere,
            #[serde(rename = "Transition to OK")]
            TransitionToOK,
            #[serde(rename = "Transition to Off Duty")]
            TransitionToOffDuty,
            #[serde(rename = "Transition to Off Line")]
            TransitionToOffLine,
            #[serde(rename = "Transition to On Line")]
            TransitionToOnLine,
            #[serde(rename = "Transition to Power Off")]
            TransitionToPowerOff,
            #[serde(rename = "Transition to Power Save")]
            TransitionToPowerSave,
            #[serde(rename = "Transition to Running")]
            TransitionToRunning,
            #[serde(rename = "Upper Critical - going high")]
            UpperCriticalGoingHigh,
            #[serde(rename = "Upper Critical - going low")]
            UpperCriticalGoingLow,
            #[serde(rename = "Upper Non-critical - going high")]
            UpperNonCriticalGoingHigh,
            #[serde(rename = "Upper Non-critical - going low")]
            UpperNonCriticalGoingLow,
            #[serde(rename = "Upper Non-recoverable - going high")]
            UpperNonRecoverableGoingHigh,
            #[serde(rename = "Upper Non-recoverable - going low")]
            UpperNonRecoverableGoingLow,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogEntryType {
            #[default]
            #[serde(rename = "CXL")]
            CXL,
            #[serde(rename = "Event")]
            Event,
            #[serde(rename = "Oem")]
            Oem,
            #[serde(rename = "SEL")]
            SEL,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OriginatorTypes {
            #[default]
            #[serde(rename = "Client")]
            Client,
            #[serde(rename = "Internal")]
            Internal,
            #[serde(rename = "SupportingService")]
            SupportingService,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SensorType {
            #[default]
            #[serde(rename = "Add-in Card")]
            AddInCard,
            #[serde(rename = "BaseOSBoot/InstallationStatus")]
            BaseOSBootInstallationStatus,
            #[serde(rename = "Battery")]
            Battery,
            #[serde(rename = "Boot Error")]
            BootError,
            #[serde(rename = "Button/Switch")]
            ButtonSwitch,
            #[serde(rename = "Cable/Interconnect")]
            CableInterconnect,
            #[serde(rename = "Chassis")]
            Chassis,
            #[serde(rename = "ChipSet")]
            ChipSet,
            #[serde(rename = "CoolingDevice")]
            CoolingDevice,
            #[serde(rename = "Critical Interrupt")]
            CriticalInterrupt,
            #[serde(rename = "Current")]
            Current,
            #[serde(rename = "Drive Slot/Bay")]
            DriveSlotBay,
            #[serde(rename = "Entity Presence")]
            EntityPresence,
            #[serde(rename = "Event Logging Disabled")]
            EventLoggingDisabled,
            #[serde(rename = "FRUState")]
            FRUState,
            #[serde(rename = "Fan")]
            Fan,
            #[serde(rename = "LAN")]
            LAN,
            #[serde(rename = "Management Subsystem Health")]
            ManagementSubsystemHealth,
            #[serde(rename = "Memory")]
            Memory,
            #[serde(rename = "Microcontroller/Coprocessor")]
            MicrocontrollerCoprocessor,
            #[serde(rename = "Module/Board")]
            ModuleBoard,
            #[serde(rename = "Monitor ASIC/IC")]
            MonitorASICIC,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OS Stop/Shutdown")]
            OSStopShutdown,
            #[serde(rename = "Other FRU")]
            OtherFRU,
            #[serde(rename = "Other Units-based Sensor")]
            OtherUnitsBasedSensor,
            #[serde(rename = "POST Memory Resize")]
            POSTMemoryResize,
            #[serde(rename = "Physical Chassis Security")]
            PhysicalChassisSecurity,
            #[serde(rename = "Platform Alert")]
            PlatformAlert,
            #[serde(rename = "Platform Security Violation Attempt")]
            PlatformSecurityViolationAttempt,
            #[serde(rename = "Power Supply / Converter")]
            PowerSupplyConverter,
            #[serde(rename = "PowerUnit")]
            PowerUnit,
            #[serde(rename = "Processor")]
            Processor,
            #[serde(rename = "Session Audit")]
            SessionAudit,
            #[serde(rename = "Slot/Connector")]
            SlotConnector,
            #[serde(rename = "System ACPI PowerState")]
            SystemACPIPowerState,
            #[serde(rename = "System Event")]
            SystemEvent,
            #[serde(rename = "System Firmware Progress")]
            SystemFirmwareProgress,
            #[serde(rename = "SystemBoot/Restart")]
            SystemBootRestart,
            #[serde(rename = "Temperature")]
            Temperature,
            #[serde(rename = "Terminator")]
            Terminator,
            #[serde(rename = "Version Change")]
            VersionChange,
            #[serde(rename = "Voltage")]
            Voltage,
            #[serde(rename = "Watchdog")]
            Watchdog,
        }
    }
}
pub mod log_entry_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct LogEntryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod log_service {
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#LogService.ClearLog"
            )]
            pub log_service_clear_log: Option<crate::log_service::v1_4_0::ClearLog>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#LogService.CollectDiagnosticData"
            )]
            pub log_service_collect_diagnostic_data:
                Option<crate::log_service::v1_4_0::CollectDiagnosticData>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::log_service::v1_4_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearLog {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearLogRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogEntriesETag")]
            pub log_entries_etag: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CollectDiagnosticData {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CollectDiagnosticDataRequestBody {
            #[serde(rename = "DiagnosticDataType")]
            pub diagnostic_data_type: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMDiagnosticDataType"
            )]
            pub oem_diagnostic_data_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogDiagnosticDataTypes {
            #[default]
            #[serde(rename = "Manager")]
            Manager,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OS")]
            OS,
            #[serde(rename = "PreOS")]
            PreOS,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogEntryTypes {
            #[default]
            #[serde(rename = "Event")]
            Event,
            #[serde(rename = "Multiple")]
            Multiple,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SEL")]
            SEL,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LogPurpose {
            #[default]
            #[serde(rename = "Diagnostic")]
            Diagnostic,
            #[serde(rename = "ExternalEntity")]
            ExternalEntity,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Operations")]
            Operations,
            #[serde(rename = "Security")]
            Security,
            #[serde(rename = "Telemetry")]
            Telemetry,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LogService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::log_service::v1_4_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AutoDSTEnabled")]
            pub auto_dst_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DateTime")]
            pub date_time: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DateTimeLocalOffset"
            )]
            pub date_time_local_offset: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Entries")]
            pub entries: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogEntryType")]
            pub log_entry_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogPurposes")]
            pub log_purposes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumberOfRecords")]
            pub max_number_of_records: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OEMLogPurpose")]
            pub oem_log_purpose: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OverWritePolicy")]
            pub over_write_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Overflow")]
            pub overflow: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Persistency")]
            pub persistency: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SyslogFilters")]
            pub syslog_filters: Option<Vec<crate::log_service::v1_4_0::SyslogFilter>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OverWritePolicy {
            #[default]
            #[serde(rename = "NeverOverWrites")]
            NeverOverWrites,
            #[serde(rename = "Unknown")]
            Unknown,
            #[serde(rename = "WrapsWhenFull")]
            WrapsWhenFull,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SyslogFacility {
            #[default]
            #[serde(rename = "Auth")]
            Auth,
            #[serde(rename = "Authpriv")]
            Authpriv,
            #[serde(rename = "Console")]
            Console,
            #[serde(rename = "Cron")]
            Cron,
            #[serde(rename = "Daemon")]
            Daemon,
            #[serde(rename = "FTP")]
            FTP,
            #[serde(rename = "Kern")]
            Kern,
            #[serde(rename = "LPR")]
            LPR,
            #[serde(rename = "Local0")]
            Local0,
            #[serde(rename = "Local1")]
            Local1,
            #[serde(rename = "Local2")]
            Local2,
            #[serde(rename = "Local3")]
            Local3,
            #[serde(rename = "Local4")]
            Local4,
            #[serde(rename = "Local5")]
            Local5,
            #[serde(rename = "Local6")]
            Local6,
            #[serde(rename = "Local7")]
            Local7,
            #[serde(rename = "Mail")]
            Mail,
            #[serde(rename = "NTP")]
            NTP,
            #[serde(rename = "News")]
            News,
            #[serde(rename = "Security")]
            Security,
            #[serde(rename = "SolarisCron")]
            SolarisCron,
            #[serde(rename = "Syslog")]
            Syslog,
            #[serde(rename = "UUCP")]
            UUCP,
            #[serde(rename = "User")]
            User,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SyslogFilter {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogFacilities")]
            pub log_facilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowestSeverity")]
            pub lowest_severity: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SyslogSeverity {
            #[default]
            #[serde(rename = "Alert")]
            Alert,
            #[serde(rename = "All")]
            All,
            #[serde(rename = "Critical")]
            Critical,
            #[serde(rename = "Debug")]
            Debug,
            #[serde(rename = "Emergency")]
            Emergency,
            #[serde(rename = "Error")]
            Error,
            #[serde(rename = "Informational")]
            Informational,
            #[serde(rename = "Notice")]
            Notice,
            #[serde(rename = "Warning")]
            Warning,
        }
    }
}
pub mod log_service_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct LogServiceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod manager {
    pub mod v1_18_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Manager.ForceFailover"
            )]
            pub manager_force_failover: Option<crate::manager::v1_18_0::ForceFailover>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Manager.ModifyRedundancySet"
            )]
            pub manager_modify_redundancy_set: Option<crate::manager::v1_18_0::ModifyRedundancySet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Manager.Reset")]
            pub manager_reset: Option<crate::manager::v1_18_0::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Manager.ResetToDefaults"
            )]
            pub manager_reset_to_defaults: Option<crate::manager::v1_18_0::ResetToDefaults>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::manager::v1_18_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CommandConnectTypesSupported {
            #[default]
            #[serde(rename = "IPMI")]
            IPMI,
            #[serde(rename = "Oem")]
            Oem,
            #[serde(rename = "SSH")]
            SSH,
            #[serde(rename = "Telnet")]
            Telnet,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CommandShell {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectTypesSupported"
            )]
            pub connect_types_supported: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxConcurrentSessions"
            )]
            pub max_concurrent_sessions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ForceFailover {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ForceFailoverRequestBody {
            #[serde(rename = "NewManager")]
            pub new_manager: crate::odata_v4::IdRef,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum GraphicalConnectTypesSupported {
            #[default]
            #[serde(rename = "KVMIP")]
            KVMIP,
            #[serde(rename = "Oem")]
            Oem,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GraphicalConsole {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectTypesSupported"
            )]
            pub connect_types_supported: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxConcurrentSessions"
            )]
            pub max_concurrent_sessions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ActiveSoftwareImage"
            )]
            pub active_software_image: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerForChassis")]
            pub manager_for_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerForChassis@odata.count"
            )]
            pub manager_for_chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerForManagers")]
            pub manager_for_managers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerForManagers@odata.count"
            )]
            pub manager_for_managers_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerForServers")]
            pub manager_for_servers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerForServers@odata.count"
            )]
            pub manager_for_servers_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerForSwitches")]
            pub manager_for_switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerForSwitches@odata.count"
            )]
            pub manager_for_switches_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerInChassis")]
            pub manager_in_chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SelectedNetworkPort"
            )]
            pub selected_network_port: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareImages")]
            pub software_images: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SoftwareImages@odata.count"
            )]
            pub software_images_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Manager {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::manager::v1_18_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalFirmwareVersions"
            )]
            pub additional_firmware_versions: Option<crate::software_inventory::AdditionalVersions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AutoDSTEnabled")]
            pub auto_dst_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CommandShell")]
            pub command_shell: Option<crate::manager::v1_18_0::CommandShell>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DateTime")]
            pub date_time: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DateTimeLocalOffset"
            )]
            pub date_time_local_offset: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DedicatedNetworkPorts"
            )]
            pub dedicated_network_ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GraphicalConsole")]
            pub graphical_console: Option<crate::manager::v1_18_0::GraphicalConsole>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostInterfaces")]
            pub host_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LastResetTime")]
            pub last_reset_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::manager::v1_18_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogServices")]
            pub log_services: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerDiagnosticData"
            )]
            pub manager_diagnostic_data: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagerType")]
            pub manager_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkProtocol")]
            pub network_protocol: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteAccountService"
            )]
            pub remote_account_service: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteRedfishServiceUri"
            )]
            pub remote_redfish_service_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecurityPolicy")]
            pub security_policy: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialConsole")]
            pub serial_console: Option<crate::manager::v1_18_0::SerialConsole>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialInterfaces")]
            pub serial_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceEntryPointUUID"
            )]
            pub service_entry_point_uuid: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceIdentification"
            )]
            pub service_identification: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SharedNetworkPorts")]
            pub shared_network_ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TimeZoneName")]
            pub time_zone_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "USBPorts")]
            pub usb_ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VirtualMedia")]
            pub virtual_media: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ManagerType {
            #[default]
            #[serde(rename = "AuxiliaryController")]
            AuxiliaryController,
            #[serde(rename = "BMC")]
            BMC,
            #[serde(rename = "EnclosureManager")]
            EnclosureManager,
            #[serde(rename = "ManagementController")]
            ManagementController,
            #[serde(rename = "RackManager")]
            RackManager,
            #[serde(rename = "Service")]
            Service,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ModifyRedundancySet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ModifyRedundancySetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Add")]
            pub add: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Remove")]
            pub remove: Option<Vec<crate::odata_v4::IdRef>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {
            #[serde(rename = "ResetType")]
            pub reset_type: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ResetToDefaultsType {
            #[default]
            #[serde(rename = "PreserveNetwork")]
            PreserveNetwork,
            #[serde(rename = "PreserveNetworkAndUsers")]
            PreserveNetworkAndUsers,
            #[serde(rename = "ResetAll")]
            ResetAll,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SerialConnectTypesSupported {
            #[default]
            #[serde(rename = "IPMI")]
            IPMI,
            #[serde(rename = "Oem")]
            Oem,
            #[serde(rename = "SSH")]
            SSH,
            #[serde(rename = "Telnet")]
            Telnet,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SerialConsole {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectTypesSupported"
            )]
            pub connect_types_supported: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxConcurrentSessions"
            )]
            pub max_concurrent_sessions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
        }
    }
}
pub mod manager_account {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum AccountTypes {
        #[default]
        #[serde(rename = "HostConsole")]
        HostConsole,
        #[serde(rename = "IPMI")]
        IPMI,
        #[serde(rename = "KVMIP")]
        KVMIP,
        #[serde(rename = "ManagerConsole")]
        ManagerConsole,
        #[serde(rename = "OEM")]
        OEM,
        #[serde(rename = "Redfish")]
        Redfish,
        #[serde(rename = "SNMP")]
        SNMP,
        #[serde(rename = "VirtualMedia")]
        VirtualMedia,
        #[serde(rename = "WebUI")]
        WebUI,
    }
    pub mod v1_10_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::manager_account::v1_10_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Role")]
            pub role: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ManagerAccount {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccountExpiration")]
            pub account_expiration: Option<String>,
            #[serde(rename = "AccountTypes")]
            pub account_types: Vec<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::manager_account::v1_10_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HostBootstrapAccount"
            )]
            pub host_bootstrap_account: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Keys")]
            pub keys: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::manager_account::v1_10_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Locked")]
            pub locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MFABypass")]
            pub mfa_bypass: Option<crate::account_service::MFABypass>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OEMAccountTypes")]
            pub oem_account_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PasswordChangeRequired"
            )]
            pub password_change_required: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PasswordExpiration")]
            pub password_expiration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoleId")]
            pub role_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SNMP")]
            pub snmp: Option<crate::manager_account::v1_10_0::SNMPUserInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StrictAccountTypes")]
            pub strict_account_types: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserName")]
            pub user_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPAuthenticationProtocols {
            #[default]
            #[serde(rename = "HMAC128_SHA224")]
            HMAC128SHA224,
            #[serde(rename = "HMAC192_SHA256")]
            HMAC192SHA256,
            #[serde(rename = "HMAC256_SHA384")]
            HMAC256SHA384,
            #[serde(rename = "HMAC384_SHA512")]
            HMAC384SHA512,
            #[serde(rename = "HMAC_MD5")]
            HMACMD5,
            #[serde(rename = "HMAC_SHA96")]
            HMACSHA96,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPEncryptionProtocols {
            #[default]
            #[serde(rename = "CBC_DES")]
            CBCDES,
            #[serde(rename = "CFB128_AES128")]
            CFB128AES128,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SNMPUserInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AuthenticationKey")]
            pub authentication_key: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationKeySet"
            )]
            pub authentication_key_set: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationProtocol"
            )]
            pub authentication_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKey")]
            pub encryption_key: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionKeySet")]
            pub encryption_key_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionProtocol")]
            pub encryption_protocol: Option<String>,
        }
    }
}
pub mod manager_account_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ManagerAccountCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod manager_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ManagerCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod manager_diagnostic_data {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ManagerDiagnosticData.ResetMetrics"
            )]
            pub manager_diagnostic_data_reset_metrics:
                Option<crate::manager_diagnostic_data::v1_2_0::ResetMetrics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::manager_diagnostic_data::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BootTimeStatistics {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FirmwareTimeSeconds"
            )]
            pub firmware_time_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitrdTimeSeconds")]
            pub initrd_time_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelTimeSeconds")]
            pub kernel_time_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LoaderTimeSeconds")]
            pub loader_time_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UserSpaceTimeSeconds"
            )]
            pub user_space_time_seconds: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct I2CBusStatistics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BusErrorCount")]
            pub bus_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "I2CBusName")]
            pub i2c_bus_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NACKCount")]
            pub nack_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalTransactionCount"
            )]
            pub total_transaction_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ManagerDiagnosticData {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::manager_diagnostic_data::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootTimeStatistics")]
            pub boot_time_statistics:
                Option<crate::manager_diagnostic_data::v1_2_0::BootTimeStatistics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FreeStorageSpaceKiB"
            )]
            pub free_storage_space_ki_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "I2CBuses")]
            pub i2c_buses: Option<Vec<crate::manager_diagnostic_data::v1_2_0::I2CBusStatistics>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryECCStatistics"
            )]
            pub memory_ecc_statistics:
                Option<crate::manager_diagnostic_data::v1_2_0::MemoryECCStatistics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryStatistics")]
            pub memory_statistics: Option<crate::manager_diagnostic_data::v1_2_0::MemoryStatistics>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProcessorStatistics"
            )]
            pub processor_statistics:
                Option<crate::manager_diagnostic_data::v1_2_0::ProcessorStatistics>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceRootUptimeSeconds"
            )]
            pub service_root_uptime_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TopProcesses")]
            pub top_processes:
                Option<Vec<crate::manager_diagnostic_data::v1_2_0::ProcessStatistics>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryECCStatistics {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryStatistics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AvailableBytes")]
            pub available_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BuffersAndCacheBytes"
            )]
            pub buffers_and_cache_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FreeBytes")]
            pub free_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SharedBytes")]
            pub shared_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalBytes")]
            pub total_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UsedBytes")]
            pub used_bytes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessStatistics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CommandLine")]
            pub command_line: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelTimeSeconds")]
            pub kernel_time_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResidentSetSizeBytes"
            )]
            pub resident_set_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RestartAfterFailureCount"
            )]
            pub restart_after_failure_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RestartCount")]
            pub restart_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UptimeSeconds")]
            pub uptime_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserTimeSeconds")]
            pub user_time_seconds: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorStatistics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelPercent")]
            pub kernel_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserPercent")]
            pub user_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
    }
}
pub mod manager_network_protocol {
    pub mod v1_9_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::manager_network_protocol::v1_9_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EngineId {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ArchitectureId")]
            pub architecture_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnterpriseSpecificMethod"
            )]
            pub enterprise_specific_method: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrivateEnterpriseId"
            )]
            pub private_enterprise_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HTTPSProtocol {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProtocolEnabled")]
            pub protocol_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ManagerNetworkProtocol {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::manager_network_protocol::v1_9_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCPv6")]
            pub dhc_pv6: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DHCP")]
            pub dhcp: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FQDN")]
            pub fqdn: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostName")]
            pub host_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HTTP")]
            pub http: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HTTPS")]
            pub https: Option<crate::manager_network_protocol::v1_9_1::HTTPSProtocol>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPMI")]
            pub ipmi: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KVMIP")]
            pub kvmip: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NTP")]
            pub ntp: Option<crate::manager_network_protocol::v1_9_1::NTPProtocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Proxy")]
            pub proxy: Option<crate::manager_network_protocol::v1_9_1::ProxyConfiguration>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDP")]
            pub rdp: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RFB")]
            pub rfb: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SNMP")]
            pub snmp: Option<crate::manager_network_protocol::v1_9_1::SNMPProtocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSDP")]
            pub ssdp: Option<crate::manager_network_protocol::v1_9_1::SSDProtocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SSH")]
            pub ssh: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Telnet")]
            pub telnet: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VirtualMedia")]
            pub virtual_media: Option<crate::manager_network_protocol::v1_9_1::Protocol>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NTPProtocol {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkSuppliedServers"
            )]
            pub network_supplied_servers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NTPServers")]
            pub ntp_servers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProtocolEnabled")]
            pub protocol_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NotifyIPv6Scope {
            #[default]
            #[serde(rename = "Link")]
            Link,
            #[serde(rename = "Organization")]
            Organization,
            #[serde(rename = "Site")]
            Site,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Protocol {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProtocolEnabled")]
            pub protocol_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProxyConfiguration {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExcludeAddresses")]
            pub exclude_addresses: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PasswordSet")]
            pub password_set: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProxyAutoConfigURI")]
            pub proxy_auto_config_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProxyServerURI")]
            pub proxy_server_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPAuthenticationProtocols {
            #[default]
            #[serde(rename = "Account")]
            Account,
            #[serde(rename = "CommunityString")]
            CommunityString,
            #[serde(rename = "HMAC128_SHA224")]
            HMAC128SHA224,
            #[serde(rename = "HMAC192_SHA256")]
            HMAC192SHA256,
            #[serde(rename = "HMAC256_SHA384")]
            HMAC256SHA384,
            #[serde(rename = "HMAC384_SHA512")]
            HMAC384SHA512,
            #[serde(rename = "HMAC_MD5")]
            HMACMD5,
            #[serde(rename = "HMAC_SHA96")]
            HMACSHA96,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SNMPCommunity {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessMode")]
            pub access_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CommunityString")]
            pub community_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPCommunityAccessMode {
            #[default]
            #[serde(rename = "Full")]
            Full,
            #[serde(rename = "Limited")]
            Limited,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SNMPEncryptionProtocols {
            #[default]
            #[serde(rename = "Account")]
            Account,
            #[serde(rename = "CBC_DES")]
            CBCDES,
            #[serde(rename = "CFB128_AES128")]
            CFB128AES128,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SNMPProtocol {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationProtocol"
            )]
            pub authentication_protocol: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CommunityAccessMode"
            )]
            pub community_access_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CommunityStrings")]
            pub community_strings:
                Option<Vec<crate::manager_network_protocol::v1_9_1::SNMPCommunity>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnableSNMPv1")]
            pub enable_snm_pv1: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnableSNMPv2c")]
            pub enable_snm_pv2c: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnableSNMPv3")]
            pub enable_snm_pv3: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionProtocol")]
            pub encryption_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EngineId")]
            pub engine_id: Option<crate::manager_network_protocol::v1_9_1::EngineId>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HideCommunityStrings"
            )]
            pub hide_community_strings: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProtocolEnabled")]
            pub protocol_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SSDProtocol {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NotifyIPv6Scope")]
            pub notify_ipv6_scope: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NotifyMulticastIntervalSeconds"
            )]
            pub notify_multicast_interval_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NotifyTTL")]
            pub notify_ttl: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Port")]
            pub port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProtocolEnabled")]
            pub protocol_enabled: Option<bool>,
        }
    }
}
pub mod manifest {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Manifest {
        ManifestV1N0N0Manifest(crate::manifest::v1_0_0::Manifest),
        ManifestV1N1N0Manifest(crate::manifest::v1_1_0::Manifest),
    }
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Expand {
            #[default]
            #[serde(rename = "All")]
            All,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Relevant")]
            Relevant,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Manifest {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Expand")]
            pub expand: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Stanzas")]
            pub stanzas: Option<Vec<crate::manifest::v1_0_0::Stanza>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Request {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Response {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Stanza {
            #[serde(skip_serializing_if = "Option::is_none", rename = "OEMStanzaType")]
            pub oem_stanza_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Request")]
            pub request: Option<crate::manifest::v1_0_0::Request>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Response")]
            pub response: Option<crate::manifest::v1_0_0::Response>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StanzaId")]
            pub stanza_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StanzaType")]
            pub stanza_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum StanzaType {
            #[default]
            #[serde(rename = "ComposeResource")]
            ComposeResource,
            #[serde(rename = "ComposeSystem")]
            ComposeSystem,
            #[serde(rename = "DecomposeResource")]
            DecomposeResource,
            #[serde(rename = "DecomposeSystem")]
            DecomposeSystem,
            #[serde(rename = "OEM")]
            OEM,
        }
    }
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Expand {
            #[default]
            #[serde(rename = "All")]
            All,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Relevant")]
            Relevant,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Manifest {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Expand")]
            pub expand: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Stanzas")]
            pub stanzas: Option<Vec<crate::manifest::v1_1_0::Stanza>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Request {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Response {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Stanza {
            #[serde(skip_serializing_if = "Option::is_none", rename = "OEMStanzaType")]
            pub oem_stanza_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Request")]
            pub request: Option<crate::manifest::v1_1_0::Request>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Response")]
            pub response: Option<crate::manifest::v1_1_0::Response>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StanzaId")]
            pub stanza_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StanzaType")]
            pub stanza_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum StanzaType {
            #[default]
            #[serde(rename = "ComposeResource")]
            ComposeResource,
            #[serde(rename = "ComposeSystem")]
            ComposeSystem,
            #[serde(rename = "DecomposeResource")]
            DecomposeResource,
            #[serde(rename = "DecomposeSystem")]
            DecomposeSystem,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "RegisterResourceBlock")]
            RegisterResourceBlock,
        }
    }
}
pub mod media_controller {
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#MediaController.Reset"
            )]
            pub media_controller_reset: Option<crate::media_controller::v1_3_0::Reset>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::media_controller::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryDomains@odata.count"
            )]
            pub memory_domains_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MediaController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::media_controller::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::media_controller::v1_3_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MediaControllerType"
            )]
            pub media_controller_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MediaControllerType {
            #[default]
            #[serde(rename = "Memory")]
            Memory,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
    }
}
pub mod media_controller_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MediaControllerCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod memory {
    pub mod v1_17_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.DisableMasterPassphrase"
            )]
            pub memory_disable_master_passphrase:
                Option<crate::memory::v1_17_1::DisableMasterPassphrase>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.DisablePassphrase"
            )]
            pub memory_disable_passphrase: Option<crate::memory::v1_17_1::DisablePassphrase>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.FreezeSecurityState"
            )]
            pub memory_freeze_security_state: Option<crate::memory::v1_17_1::FreezeSecurityState>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.InjectPersistentPoison"
            )]
            pub memory_inject_persistent_poison:
                Option<crate::memory::v1_17_1::InjectPersistentPoison>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.OverwriteUnit"
            )]
            pub memory_overwrite_unit: Option<crate::memory::v1_17_1::OverwriteUnit>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Memory.Reset")]
            pub memory_reset: Option<crate::memory::v1_17_1::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.ResetToDefaults"
            )]
            pub memory_reset_to_defaults: Option<crate::memory::v1_17_1::ResetToDefaults>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Memory.ScanMedia")]
            pub memory_scan_media: Option<crate::memory::v1_17_1::ScanMedia>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.SecureEraseUnit"
            )]
            pub memory_secure_erase_unit: Option<crate::memory::v1_17_1::SecureEraseUnit>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.SetMasterPassphrase"
            )]
            pub memory_set_master_passphrase: Option<crate::memory::v1_17_1::SetMasterPassphrase>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Memory.SetPassphrase"
            )]
            pub memory_set_passphrase: Option<crate::memory::v1_17_1::SetPassphrase>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Memory.UnlockUnit")]
            pub memory_unlock_unit: Option<crate::memory::v1_17_1::UnlockUnit>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::memory::v1_17_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BaseModuleType {
            #[default]
            #[serde(rename = "Die")]
            Die,
            #[serde(rename = "LRDIMM")]
            LRDIMM,
            #[serde(rename = "Mini_RDIMM")]
            MiniRDIMM,
            #[serde(rename = "Mini_UDIMM")]
            MiniUDIMM,
            #[serde(rename = "RDIMM")]
            RDIMM,
            #[serde(rename = "SO_DIMM")]
            SODIMM,
            #[serde(rename = "SO_DIMM_16b")]
            SODIMM16b,
            #[serde(rename = "SO_DIMM_32b")]
            SODIMM32b,
            #[serde(rename = "SO_RDIMM_72b")]
            SORDIMM72b,
            #[serde(rename = "SO_UDIMM_72b")]
            SOUDIMM72b,
            #[serde(rename = "UDIMM")]
            UDIMM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXL {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LabelStorageSizeBytes"
            )]
            pub label_storage_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StagedNonVolatileSizeMiB"
            )]
            pub staged_non_volatile_size_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StagedVolatileSizeMiB"
            )]
            pub staged_volatile_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DisableMasterPassphrase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DisableMasterPassphraseRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DisablePassphrase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DisablePassphraseRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ErrorCorrection {
            #[default]
            #[serde(rename = "AddressParity")]
            AddressParity,
            #[serde(rename = "MultiBitECC")]
            MultiBitECC,
            #[serde(rename = "NoECC")]
            NoECC,
            #[serde(rename = "SingleBitECC")]
            SingleBitECC,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FreezeSecurityState {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FreezeSecurityStateRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HealthData {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PredictedMediaLifeLeftPercent"
            )]
            pub predicted_media_life_left_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InjectPersistentPoison {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InjectPersistentPoisonRequestBody {
            #[serde(rename = "PhysicalAddress")]
            pub physical_address: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Batteries")]
            pub batteries: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Batteries@odata.count"
            )]
            pub batteries_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryMediaSources")]
            pub memory_media_sources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryMediaSources@odata.count"
            )]
            pub memory_media_sources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Memory {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::memory::v1_17_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllocationAlignmentMiB"
            )]
            pub allocation_alignment_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllocationIncrementMiB"
            )]
            pub allocation_increment_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowedSpeedsMHz")]
            pub allowed_speeds_mhz: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseModuleType")]
            pub base_module_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BusWidthBits")]
            pub bus_width_bits: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSizeMiB")]
            pub cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityMiB")]
            pub capacity_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfigurationLocked"
            )]
            pub configuration_locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXL")]
            pub cxl: Option<crate::memory::v1_17_1::CXL>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataWidthBits")]
            pub data_width_bits: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceID")]
            pub device_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceLocator")]
            pub device_locator: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ErrorCorrection")]
            pub error_correction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareApiVersion")]
            pub firmware_api_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareRevision")]
            pub firmware_revision: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FunctionClasses")]
            pub function_classes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HealthData")]
            pub health_data: Option<crate::memory::v1_17_1::HealthData>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsRankSpareEnabled")]
            pub is_rank_spare_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IsSpareDeviceEnabled"
            )]
            pub is_spare_device_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::memory::v1_17_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Log")]
            pub log: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogicalSizeMiB")]
            pub logical_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxTDPMilliWatts")]
            pub max_tdp_milli_watts: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDeviceType")]
            pub memory_device_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryLocation")]
            pub memory_location: Option<crate::memory::v1_17_1::MemoryLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryMedia")]
            pub memory_media: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemorySubsystemControllerManufacturerID"
            )]
            pub memory_subsystem_controller_manufacturer_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemorySubsystemControllerProductID"
            )]
            pub memory_subsystem_controller_product_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryType")]
            pub memory_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ModuleManufacturerID"
            )]
            pub module_manufacturer_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ModuleProductID")]
            pub module_product_id: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NonVolatileSizeLimitMiB"
            )]
            pub non_volatile_size_limit_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonVolatileSizeMiB")]
            pub non_volatile_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OperatingMemoryModes"
            )]
            pub operating_memory_modes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingSpeedMhz")]
            pub operating_speed_mhz: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OperatingSpeedRangeMHz"
            )]
            pub operating_speed_range_mhz: Option<crate::control::ControlRangeExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentRegionNumberLimit"
            )]
            pub persistent_region_number_limit: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentRegionSizeLimitMiB"
            )]
            pub persistent_region_size_limit_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentRegionSizeMaxMiB"
            )]
            pub persistent_region_size_max_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PoisonListMaxMediaErrorRecords"
            )]
            pub poison_list_max_media_error_records: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerManagementPolicy"
            )]
            pub power_management_policy: Option<crate::memory::v1_17_1::PowerManagementPolicy>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RankCount")]
            pub rank_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Regions")]
            pub regions: Option<Vec<crate::memory::v1_17_1::RegionSet>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecurityCapabilities"
            )]
            pub security_capabilities: Option<crate::memory::v1_17_1::SecurityCapabilities>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecurityState")]
            pub security_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecurityStates")]
            pub security_states: Option<crate::memory::v1_17_1::SecurityStateInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpareDeviceCount")]
            pub spare_device_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemDeviceID")]
            pub subsystem_device_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemVendorID")]
            pub subsystem_vendor_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VendorID")]
            pub vendor_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VolatileRegionNumberLimit"
            )]
            pub volatile_region_number_limit: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VolatileRegionSizeLimitMiB"
            )]
            pub volatile_region_size_limit_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VolatileRegionSizeMaxMiB"
            )]
            pub volatile_region_size_max_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VolatileSizeLimitMiB"
            )]
            pub volatile_size_limit_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VolatileSizeMiB")]
            pub volatile_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MemoryClassification {
            #[default]
            #[serde(rename = "Block")]
            Block,
            #[serde(rename = "ByteAccessiblePersistent")]
            ByteAccessiblePersistent,
            #[serde(rename = "Volatile")]
            Volatile,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MemoryDeviceType {
            #[default]
            #[serde(rename = "DDR")]
            DDR,
            #[serde(rename = "DDR2")]
            DDR2,
            #[serde(rename = "DDR2_SDRAM")]
            DDR2SDRAM,
            #[serde(rename = "DDR2_SDRAM_FB_DIMM")]
            DDR2SDRAMFBDIMM,
            #[serde(rename = "DDR2_SDRAM_FB_DIMM_PROBE")]
            DDR2SDRAMFBDIMMPROBE,
            #[serde(rename = "DDR3")]
            DDR3,
            #[serde(rename = "DDR3_SDRAM")]
            DDR3SDRAM,
            #[serde(rename = "DDR4")]
            DDR4,
            #[serde(rename = "DDR4E_SDRAM")]
            DDR4ESDRAM,
            #[serde(rename = "DDR4_SDRAM")]
            DDR4SDRAM,
            #[serde(rename = "DDR5")]
            DDR5,
            #[serde(rename = "DDR_SDRAM")]
            DDRSDRAM,
            #[serde(rename = "DDR_SGRAM")]
            DDRSGRAM,
            #[serde(rename = "EDO")]
            EDO,
            #[serde(rename = "FastPageMode")]
            FastPageMode,
            #[serde(rename = "GDDR")]
            GDDR,
            #[serde(rename = "GDDR2")]
            GDDR2,
            #[serde(rename = "GDDR3")]
            GDDR3,
            #[serde(rename = "GDDR4")]
            GDDR4,
            #[serde(rename = "GDDR5")]
            GDDR5,
            #[serde(rename = "GDDR5X")]
            GDDR5X,
            #[serde(rename = "GDDR6")]
            GDDR6,
            #[serde(rename = "HBM")]
            HBM,
            #[serde(rename = "HBM2")]
            HBM2,
            #[serde(rename = "HBM2E")]
            HBM2E,
            #[serde(rename = "HBM3")]
            HBM3,
            #[serde(rename = "LPDDR3_SDRAM")]
            LPDDR3SDRAM,
            #[serde(rename = "LPDDR4_SDRAM")]
            LPDDR4SDRAM,
            #[serde(rename = "Logical")]
            Logical,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PipelinedNibble")]
            PipelinedNibble,
            #[serde(rename = "ROM")]
            ROM,
            #[serde(rename = "SDRAM")]
            SDRAM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryLocation {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Channel")]
            pub channel: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryController")]
            pub memory_controller: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Slot")]
            pub slot: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Socket")]
            pub socket: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MemoryMedia {
            #[default]
            #[serde(rename = "DRAM")]
            DRAM,
            #[serde(rename = "Intel3DXPoint")]
            Intel3DXPoint,
            #[serde(rename = "NAND")]
            NAND,
            #[serde(rename = "Proprietary")]
            Proprietary,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MemoryType {
            #[default]
            #[serde(rename = "DRAM")]
            DRAM,
            #[serde(rename = "IntelOptane")]
            IntelOptane,
            #[serde(rename = "NVDIMM_F")]
            NVDIMMF,
            #[serde(rename = "NVDIMM_N")]
            NVDIMMN,
            #[serde(rename = "NVDIMM_P")]
            NVDIMMP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OperatingMemoryModes {
            #[default]
            #[serde(rename = "Block")]
            Block,
            #[serde(rename = "PMEM")]
            PMEM,
            #[serde(rename = "Volatile")]
            Volatile,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OverwriteUnit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OverwriteUnitRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerManagementPolicy {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AveragePowerBudgetMilliWatts"
            )]
            pub average_power_budget_milli_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxTDPMilliWatts")]
            pub max_tdp_milli_watts: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PeakPowerBudgetMilliWatts"
            )]
            pub peak_power_budget_milli_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PolicyEnabled")]
            pub policy_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RegionSet {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MasterPassphraseEnabled"
            )]
            pub master_passphrase_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryClassification"
            )]
            pub memory_classification: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OffsetMiB")]
            pub offset_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PassphraseEnabled")]
            pub passphrase_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PassphraseState")]
            pub passphrase_state: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegionId")]
            pub region_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SizeMiB")]
            pub size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ScanMedia {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ScanMediaRequestBody {
            #[serde(rename = "Length")]
            pub length: i64,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NoEventLog")]
            pub no_event_log: Option<bool>,
            #[serde(rename = "PhysicalAddress")]
            pub physical_address: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureEraseUnit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureEraseUnitRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityCapabilities {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfigurationLockCapable"
            )]
            pub configuration_lock_capable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataLockCapable")]
            pub data_lock_capable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPassphraseCount")]
            pub max_passphrase_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PassphraseCapable")]
            pub passphrase_capable: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PassphraseLockLimit"
            )]
            pub passphrase_lock_limit: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecurityStates")]
            pub security_states: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityStateInfo {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MasterPassphraseAttemptCountReached"
            )]
            pub master_passphrase_attempt_count_reached: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UserPassphraseAttemptCountReached"
            )]
            pub user_passphrase_attempt_count_reached: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SecurityStates {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
            #[serde(rename = "Frozen")]
            Frozen,
            #[serde(rename = "Locked")]
            Locked,
            #[serde(rename = "Passphraselimit")]
            Passphraselimit,
            #[serde(rename = "Unlocked")]
            Unlocked,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetMasterPassphrase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetMasterPassphraseRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetPassphrase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetPassphraseRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct UnlockUnit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct UnlockUnitRequestBody {
            #[serde(rename = "Passphrase")]
            pub passphrase: String,
            #[serde(rename = "RegionId")]
            pub region_id: String,
        }
    }
}
pub mod memory_chunks {
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::memory_chunks::v1_5_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AddressRangeType {
            #[default]
            #[serde(rename = "Block")]
            Block,
            #[serde(rename = "PMEM")]
            PMEM,
            #[serde(rename = "Volatile")]
            Volatile,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InterleaveSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryLevel")]
            pub memory_level: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OffsetMiB")]
            pub offset_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegionId")]
            pub region_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SizeMiB")]
            pub size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLLogicalDevices")]
            pub cxl_logical_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CXLLogicalDevices@odata.count"
            )]
            pub cxl_logical_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MediaLocation {
            #[default]
            #[serde(rename = "Local")]
            Local,
            #[serde(rename = "Mixed")]
            Mixed,
            #[serde(rename = "Remote")]
            Remote,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryChunks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::memory_chunks::v1_5_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AddressRangeOffsetMiB"
            )]
            pub address_range_offset_mi_b: Option<i64>,
            #[serde(rename = "AddressRangeType")]
            pub address_range_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DisplayName")]
            pub display_name: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterleaveSets")]
            pub interleave_sets: Option<Vec<crate::memory_chunks::v1_5_0::InterleaveSet>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsMirrorEnabled")]
            pub is_mirror_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsSpare")]
            pub is_spare: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::memory_chunks::v1_5_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaLocation")]
            pub media_location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryChunkSizeMiB")]
            pub memory_chunk_size_mi_b: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RequestedOperationalState"
            )]
            pub requested_operational_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OperationalState {
            #[default]
            #[serde(rename = "Offline")]
            Offline,
            #[serde(rename = "Online")]
            Online,
        }
    }
}
pub mod memory_chunks_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MemoryChunksCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod memory_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MemoryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod memory_domain {
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::memory_domain::v1_5_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLLogicalDevices")]
            pub cxl_logical_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CXLLogicalDevices@odata.count"
            )]
            pub cxl_logical_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricAdapters")]
            pub fabric_adapters: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FabricAdapters@odata.count"
            )]
            pub fabric_adapters_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaControllers")]
            pub media_controllers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MediaControllers@odata.count"
            )]
            pub media_controllers_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryDomain {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::memory_domain::v1_5_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowsBlockProvisioning"
            )]
            pub allows_block_provisioning: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowsMemoryChunkCreation"
            )]
            pub allows_memory_chunk_creation: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowsMirroring")]
            pub allows_mirroring: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowsSparing")]
            pub allows_sparing: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InterleavableMemorySets"
            )]
            pub interleavable_memory_sets: Option<Vec<crate::memory_domain::v1_5_0::MemorySet>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::memory_domain::v1_5_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryChunkIncrementMiB"
            )]
            pub memory_chunk_increment_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryChunks")]
            pub memory_chunks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemorySizeMiB")]
            pub memory_size_mi_b: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinMemoryChunkSizeMiB"
            )]
            pub min_memory_chunk_size_mi_b: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemorySet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemorySet")]
            pub memory_set: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemorySet@odata.count"
            )]
            pub memory_set_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod memory_domain_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MemoryDomainCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod memory_metrics {
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#MemoryMetrics.ClearCurrentPeriod"
            )]
            pub memory_metrics_clear_current_period:
                Option<crate::memory_metrics::v1_7_0::ClearCurrentPeriod>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::memory_metrics::v1_7_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AlarmTrips {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressParityError")]
            pub address_parity_error: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCError"
            )]
            pub correctable_ecc_error: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpareBlock")]
            pub spare_block: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Temperature")]
            pub temperature: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCError"
            )]
            pub uncorrectable_ecc_error: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AlertCapabilities {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCError"
            )]
            pub correctable_ecc_error: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpareBlock")]
            pub spare_block: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Temperature")]
            pub temperature: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCError"
            )]
            pub uncorrectable_ecc_error: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXL {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AlertCapabilities")]
            pub alert_capabilities: Option<crate::memory_metrics::v1_7_0::AlertCapabilities>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriod {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriodRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CurrentPeriod {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlocksRead")]
            pub blocks_read: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlocksWritten")]
            pub blocks_written: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IndeterminateCorrectableErrorCount"
            )]
            pub indeterminate_correctable_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IndeterminateUncorrectableErrorCount"
            )]
            pub indeterminate_uncorrectable_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HealthData {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AlarmTrips")]
            pub alarm_trips: Option<crate::memory_metrics::v1_7_0::AlarmTrips>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataLossDetected")]
            pub data_loss_detected: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LastShutdownSuccess"
            )]
            pub last_shutdown_success: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PerformanceDegraded"
            )]
            pub performance_degraded: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PredictedMediaLifeLeftPercent"
            )]
            pub predicted_media_life_left_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemainingSpareBlockPercentage"
            )]
            pub remaining_spare_block_percentage: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LifeTime {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlocksRead")]
            pub blocks_read: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlocksWritten")]
            pub blocks_written: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IndeterminateCorrectableErrorCount"
            )]
            pub indeterminate_correctable_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IndeterminateUncorrectableErrorCount"
            )]
            pub indeterminate_uncorrectable_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemoryMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::memory_metrics::v1_7_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BandwidthPercent")]
            pub bandwidth_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlockSizeBytes")]
            pub block_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacityUtilizationPercent"
            )]
            pub capacity_utilization_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectedPersistentErrorCount"
            )]
            pub corrected_persistent_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectedVolatileErrorCount"
            )]
            pub corrected_volatile_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentPeriod")]
            pub current_period: Option<crate::memory_metrics::v1_7_0::CurrentPeriod>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXL")]
            pub cxl: Option<crate::memory_metrics::v1_7_0::CXL>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DirtyShutdownCount")]
            pub dirty_shutdown_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HealthData")]
            pub health_data: Option<crate::memory_metrics::v1_7_0::HealthData>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifeTime")]
            pub life_time: Option<crate::memory_metrics::v1_7_0::LifeTime>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingSpeedMHz")]
            pub operating_speed_mhz: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod message {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Message {
        MessageV1N0N10Message(crate::message::v1_0_10::Message),
        MessageV1N1N2Message(crate::message::v1_1_2::Message),
    }
    pub mod v1_0_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Message {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Message")]
            pub message: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageArgs")]
            pub message_args: Option<Vec<String>>,
            #[serde(rename = "MessageId")]
            pub message_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedProperties")]
            pub related_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Resolution")]
            pub resolution: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
            pub severity: Option<String>,
        }
    }
    pub mod v1_1_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Message {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Message")]
            pub message: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageArgs")]
            pub message_args: Option<Vec<String>>,
            #[serde(rename = "MessageId")]
            pub message_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MessageSeverity")]
            pub message_severity: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedProperties")]
            pub related_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Resolution")]
            pub resolution: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
            pub severity: Option<String>,
        }
    }
}
pub mod message_registry_file {
    pub mod v1_1_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::message_registry_file::v1_1_3::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ArchiveFile")]
            pub archive_file: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ArchiveUri")]
            pub archive_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Language")]
            pub language: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PublicationUri")]
            pub publication_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Uri")]
            pub uri: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MessageRegistryFile {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::message_registry_file::v1_1_3::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Languages")]
            pub languages: Vec<String>,
            #[serde(rename = "Location")]
            pub location: Vec<crate::message_registry_file::v1_1_3::Location>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "Registry")]
            pub registry: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod message_registry_file_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MessageRegistryFileCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod metric_definition {
    pub mod v1_3_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::metric_definition::v1_3_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Calculable {
            #[default]
            #[serde(rename = "NonCalculatable")]
            NonCalculatable,
            #[serde(rename = "NonSummable")]
            NonSummable,
            #[serde(rename = "Summable")]
            Summable,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CalculationAlgorithmEnum {
            #[default]
            #[serde(rename = "Average")]
            Average,
            #[serde(rename = "Maximum")]
            Maximum,
            #[serde(rename = "Minimum")]
            Minimum,
            #[serde(rename = "OEM")]
            OEM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CalculationParamsType {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResultMetric")]
            pub result_metric: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourceMetric")]
            pub source_metric: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ImplementationType {
            #[default]
            #[serde(rename = "Calculated")]
            Calculated,
            #[serde(rename = "DigitalMeter")]
            DigitalMeter,
            #[serde(rename = "PhysicalSensor")]
            PhysicalSensor,
            #[serde(rename = "Synthesized")]
            Synthesized,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MetricDataType {
            #[default]
            #[serde(rename = "Boolean")]
            Boolean,
            #[serde(rename = "DateTime")]
            DateTime,
            #[serde(rename = "Decimal")]
            Decimal,
            #[serde(rename = "Enumeration")]
            Enumeration,
            #[serde(rename = "Integer")]
            Integer,
            #[serde(rename = "String")]
            String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MetricDefinition {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Accuracy")]
            pub accuracy: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::metric_definition::v1_3_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Calculable")]
            pub calculable: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CalculationAlgorithm"
            )]
            pub calculation_algorithm: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CalculationParameters"
            )]
            pub calculation_parameters:
                Option<Vec<crate::metric_definition::v1_3_2::CalculationParamsType>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CalculationTimeInterval"
            )]
            pub calculation_time_interval: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Calibration")]
            pub calibration: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DiscreteValues")]
            pub discrete_values: Option<Vec<String>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Implementation")]
            pub implementation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsLinear")]
            pub is_linear: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogicalContexts")]
            pub logical_contexts: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxReadingRange")]
            pub max_reading_range: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricDataType")]
            pub metric_data_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperties")]
            pub metric_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricType")]
            pub metric_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinReadingRange")]
            pub min_reading_range: Option<f64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OEMCalculationAlgorithm"
            )]
            pub oem_calculation_algorithm: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Precision")]
            pub precision: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensingInterval")]
            pub sensing_interval: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TimestampAccuracy")]
            pub timestamp_accuracy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Units")]
            pub units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Wildcards")]
            pub wildcards: Option<Vec<crate::metric_definition::v1_3_2::Wildcard>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MetricType {
            #[default]
            #[serde(rename = "Countdown")]
            Countdown,
            #[serde(rename = "Counter")]
            Counter,
            #[serde(rename = "Discrete")]
            Discrete,
            #[serde(rename = "Gauge")]
            Gauge,
            #[serde(rename = "Numeric")]
            Numeric,
            #[serde(rename = "String")]
            String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Wildcard {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Values")]
            pub values: Option<Vec<String>>,
        }
    }
}
pub mod metric_definition_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MetricDefinitionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod metric_report {
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::metric_report::v1_5_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MetricReport {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::metric_report::v1_5_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Context")]
            pub context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinition"
            )]
            pub metric_report_definition: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricValues")]
            pub metric_values: Option<Vec<crate::metric_report::v1_5_0::MetricValue>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReportSequence")]
            pub report_sequence: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MetricValue {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricDefinition")]
            pub metric_definition: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricId")]
            pub metric_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperty")]
            pub metric_property: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricValue")]
            pub metric_value: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod metric_report_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MetricReportCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod metric_report_definition {
    pub mod v1_4_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::metric_report_definition::v1_4_3::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CalculationAlgorithmEnum {
            #[default]
            #[serde(rename = "Average")]
            Average,
            #[serde(rename = "Maximum")]
            Maximum,
            #[serde(rename = "Minimum")]
            Minimum,
            #[serde(rename = "Summation")]
            Summation,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CollectionTimeScope {
            #[default]
            #[serde(rename = "Interval")]
            Interval,
            #[serde(rename = "Point")]
            Point,
            #[serde(rename = "StartupInterval")]
            StartupInterval,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Triggers")]
            pub triggers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Triggers@odata.count"
            )]
            pub triggers_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Metric {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CollectionDuration")]
            pub collection_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CollectionFunction")]
            pub collection_function: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CollectionTimeScope"
            )]
            pub collection_time_scope: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricId")]
            pub metric_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperties")]
            pub metric_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MetricReportDefinition {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::metric_report_definition::v1_4_3::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AppendLimit")]
            pub append_limit: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::metric_report_definition::v1_4_3::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperties")]
            pub metric_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricReport")]
            pub metric_report: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitionEnabled"
            )]
            pub metric_report_definition_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitionType"
            )]
            pub metric_report_definition_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportHeartbeatInterval"
            )]
            pub metric_report_heartbeat_interval: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<Vec<crate::metric_report_definition::v1_4_3::Metric>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReportActions")]
            pub report_actions: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReportTimespan")]
            pub report_timespan: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReportUpdates")]
            pub report_updates: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Schedule")]
            pub schedule: Option<crate::schedule::Schedule>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SuppressRepeatedMetricValue"
            )]
            pub suppress_repeated_metric_value: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Wildcards")]
            pub wildcards: Option<Vec<crate::metric_report_definition::v1_4_3::Wildcard>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MetricReportDefinitionType {
            #[default]
            #[serde(rename = "OnChange")]
            OnChange,
            #[serde(rename = "OnRequest")]
            OnRequest,
            #[serde(rename = "Periodic")]
            Periodic,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReportActionsEnum {
            #[default]
            #[serde(rename = "LogToMetricReportsCollection")]
            LogToMetricReportsCollection,
            #[serde(rename = "RedfishEvent")]
            RedfishEvent,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReportUpdatesEnum {
            #[default]
            #[serde(rename = "AppendStopsWhenFull")]
            AppendStopsWhenFull,
            #[serde(rename = "AppendWrapsWhenFull")]
            AppendWrapsWhenFull,
            #[serde(rename = "NewReport")]
            NewReport,
            #[serde(rename = "Overwrite")]
            Overwrite,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Wildcard {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Keys")]
            pub keys: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Values")]
            pub values: Option<Vec<String>>,
        }
    }
}
pub mod metric_report_definition_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct MetricReportDefinitionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod network_adapter {
    pub mod v1_9_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#NetworkAdapter.ResetSettingsToDefault"
            )]
            pub network_adapter_reset_settings_to_default:
                Option<crate::network_adapter::v1_9_0::ResetSettingsToDefault>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_adapter::v1_9_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControllerCapabilities {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataCenterBridging")]
            pub data_center_bridging: Option<crate::network_adapter::v1_9_0::DataCenterBridging>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctionCount"
            )]
            pub network_device_function_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkPortCount")]
            pub network_port_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NPAR")]
            pub npar: Option<crate::network_adapter::v1_9_0::NicPartitioning>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NPIV")]
            pub npiv: Option<crate::network_adapter::v1_9_0::NPIV>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VirtualizationOffload"
            )]
            pub virtualization_offload:
                Option<crate::network_adapter::v1_9_0::VirtualizationOffload>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ControllerLinks {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkPorts")]
            pub network_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkPorts@odata.count"
            )]
            pub network_ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevices")]
            pub pcie_devices: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeDevices@odata.count"
            )]
            pub pcie_devices_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports@odata.count")]
            pub ports_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Controllers {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ControllerCapabilities"
            )]
            pub controller_capabilities:
                Option<crate::network_adapter::v1_9_0::ControllerCapabilities>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FirmwarePackageVersion"
            )]
            pub firmware_package_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::network_adapter::v1_9_0::ControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DataCenterBridging {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Capable")]
            pub capable: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NPIV {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxDeviceLogins")]
            pub max_device_logins: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPortLogins")]
            pub max_port_logins: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkAdapter {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_adapter::v1_9_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Controllers")]
            pub controllers: Option<Vec<crate::network_adapter::v1_9_0::Controllers>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LLDPEnabled")]
            pub lldp_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkPorts")]
            pub network_ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NicPartitioning {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NparCapable")]
            pub npar_capable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NparEnabled")]
            pub npar_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetSettingsToDefault {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetSettingsToDefaultRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SRIOV {
            #[serde(skip_serializing_if = "Option::is_none", rename = "SRIOVVEPACapable")]
            pub sriovvepa_capable: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VirtualFunction {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceMaxCount")]
            pub device_max_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinAssignmentGroupSize"
            )]
            pub min_assignment_group_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkPortMaxCount"
            )]
            pub network_port_max_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VirtualizationOffload {
            #[serde(skip_serializing_if = "Option::is_none", rename = "SRIOV")]
            pub sriov: Option<crate::network_adapter::v1_9_0::SRIOV>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VirtualFunction")]
            pub virtual_function: Option<crate::network_adapter::v1_9_0::VirtualFunction>,
        }
    }
}
pub mod network_adapter_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct NetworkAdapterCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod network_adapter_metrics {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_adapter_metrics::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkAdapterMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_adapter_metrics::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CPUCorePercent")]
            pub cpu_core_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostBusRXPercent")]
            pub host_bus_rx_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostBusTXPercent")]
            pub host_bus_tx_percent: Option<f64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NCSIRXBytes")]
            pub ncsirx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NCSIRXFrames")]
            pub ncsirx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NCSITXBytes")]
            pub ncsitx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NCSITXFrames")]
            pub ncsitx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXBytes")]
            pub rx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXMulticastFrames")]
            pub rx_multicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXUnicastFrames")]
            pub rx_unicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBytes")]
            pub tx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXMulticastFrames")]
            pub tx_multicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXUnicastFrames")]
            pub tx_unicast_frames: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod network_device_function {
    pub mod v1_9_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_device_function::v1_9_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AuthenticationMethod {
            #[default]
            #[serde(rename = "CHAP")]
            CHAP,
            #[serde(rename = "MutualCHAP")]
            MutualCHAP,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BootMode {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "FibreChannel")]
            FibreChannel,
            #[serde(rename = "FibreChannelOverEthernet")]
            FibreChannelOverEthernet,
            #[serde(rename = "HTTP")]
            HTTP,
            #[serde(rename = "PXE")]
            PXE,
            #[serde(rename = "iSCSI")]
            ISCSI,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BootTargets {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootPriority")]
            pub boot_priority: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LUNID")]
            pub lunid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WWPN")]
            pub wwpn: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DataDirection {
            #[default]
            #[serde(rename = "Egress")]
            Egress,
            #[serde(rename = "Ingress")]
            Ingress,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Ethernet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MACAddress")]
            pub mac_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MTUSize")]
            pub mtu_size: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MTUSizeMaximum")]
            pub mtu_size_maximum: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PermanentMACAddress"
            )]
            pub permanent_mac_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLAN")]
            pub vlan: Option<crate::vlan_network_interface::VLAN>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANs")]
            pub vlans: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FibreChannel {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowFIPVLANDiscovery"
            )]
            pub allow_fip_vlan_discovery: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootTargets")]
            pub boot_targets: Option<Vec<crate::network_device_function::v1_9_0::BootTargets>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FCoEActiveVLANId")]
            pub fc_oe_active_vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FCoELocalVLANId")]
            pub fc_oe_local_vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FibreChannelId")]
            pub fibre_channel_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PermanentWWNN")]
            pub permanent_wwnn: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PermanentWWPN")]
            pub permanent_wwpn: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WWNSource")]
            pub wwn_source: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WWNN")]
            pub wwnn: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WWPN")]
            pub wwpn: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HTTPBoot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootMediaURI")]
            pub boot_media_uri: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IPAddressType {
            #[default]
            #[serde(rename = "IPv4")]
            IPv4,
            #[serde(rename = "IPv6")]
            IPv6,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ISCSIBoot {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AuthenticationMethod"
            )]
            pub authentication_method: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CHAPSecret")]
            pub chap_secret: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CHAPUsername")]
            pub chap_username: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InitiatorDefaultGateway"
            )]
            pub initiator_default_gateway: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitiatorIPAddress")]
            pub initiator_ip_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitiatorName")]
            pub initiator_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitiatorNetmask")]
            pub initiator_netmask: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPAddressType")]
            pub ip_address_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IPMaskDNSViaDHCP")]
            pub ip_mask_dns_via_dhcp: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MutualCHAPSecret")]
            pub mutual_chap_secret: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MutualCHAPUsername")]
            pub mutual_chap_username: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrimaryDNS")]
            pub primary_dns: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrimaryLUN")]
            pub primary_lun: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrimaryTargetIPAddress"
            )]
            pub primary_target_ip_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrimaryTargetName")]
            pub primary_target_name: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PrimaryTargetTCPPort"
            )]
            pub primary_target_tcp_port: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrimaryVLANEnable")]
            pub primary_vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PrimaryVLANId")]
            pub primary_vlan_id: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RouterAdvertisementEnabled"
            )]
            pub router_advertisement_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecondaryDNS")]
            pub secondary_dns: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecondaryLUN")]
            pub secondary_lun: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryTargetIPAddress"
            )]
            pub secondary_target_ip_address: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryTargetName"
            )]
            pub secondary_target_name: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryTargetTCPPort"
            )]
            pub secondary_target_tcp_port: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecondaryVLANEnable"
            )]
            pub secondary_vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecondaryVLANId")]
            pub secondary_vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetInfoViaDHCP")]
            pub target_info_via_dhcp: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InfiniBand {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MTUSize")]
            pub mtu_size: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NodeGUID")]
            pub node_guid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PermanentNodeGUID")]
            pub permanent_node_guid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PermanentPortGUID")]
            pub permanent_port_guid: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PermanentSystemGUID"
            )]
            pub permanent_system_guid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortGUID")]
            pub port_guid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedMTUSizes")]
            pub supported_mtu_sizes: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemGUID")]
            pub system_guid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Limit {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BurstBytesPerSecond"
            )]
            pub burst_bytes_per_second: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BurstPacketsPerSecond"
            )]
            pub burst_packets_per_second: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Direction")]
            pub direction: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SustainedBytesPerSecond"
            )]
            pub sustained_bytes_per_second: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SustainedPacketsPerSecond"
            )]
            pub sustained_packets_per_second: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterface")]
            pub ethernet_interface: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EthernetInterfaces@odata.count"
            )]
            pub ethernet_interfaces_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OffloadProcessors")]
            pub offload_processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OffloadProcessors@odata.count"
            )]
            pub offload_processors_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OffloadSystem")]
            pub offload_system: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunction")]
            pub pcie_function: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PhysicalNetworkPortAssignment"
            )]
            pub physical_network_port_assignment: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PhysicalPortAssignment"
            )]
            pub physical_port_assignment: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkDeviceFunction {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_device_function::v1_9_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllowDeny")]
            pub allow_deny: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssignablePhysicalNetworkPorts"
            )]
            pub assignable_physical_network_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssignablePhysicalNetworkPorts@odata.count"
            )]
            pub assignable_physical_network_ports_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssignablePhysicalPorts"
            )]
            pub assignable_physical_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssignablePhysicalPorts@odata.count"
            )]
            pub assignable_physical_ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BootMode")]
            pub boot_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceEnabled")]
            pub device_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ethernet")]
            pub ethernet: Option<crate::network_device_function::v1_9_0::Ethernet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FibreChannel")]
            pub fibre_channel: Option<crate::network_device_function::v1_9_0::FibreChannel>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HTTPBoot")]
            pub http_boot: Option<crate::network_device_function::v1_9_0::HTTPBoot>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfiniBand")]
            pub infini_band: Option<crate::network_device_function::v1_9_0::InfiniBand>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "iSCSIBoot")]
            pub iscsi_boot: Option<crate::network_device_function::v1_9_0::ISCSIBoot>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Limits")]
            pub limits: Option<Vec<crate::network_device_function::v1_9_0::Limit>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::network_device_function::v1_9_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxVirtualFunctions"
            )]
            pub max_virtual_functions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetDevFuncCapabilities"
            )]
            pub net_dev_func_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetDevFuncType")]
            pub net_dev_func_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PhysicalNetworkPortAssignment"
            )]
            pub physical_network_port_assignment: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PhysicalPortAssignment"
            )]
            pub physical_port_assignment: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SAVIEnabled")]
            pub savi_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VirtualFunctionsEnabled"
            )]
            pub virtual_functions_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NetworkDeviceTechnology {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Ethernet")]
            Ethernet,
            #[serde(rename = "FibreChannel")]
            FibreChannel,
            #[serde(rename = "FibreChannelOverEthernet")]
            FibreChannelOverEthernet,
            #[serde(rename = "InfiniBand")]
            InfiniBand,
            #[serde(rename = "iSCSI")]
            ISCSI,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum WWNSource {
            #[default]
            #[serde(rename = "ConfiguredLocally")]
            ConfiguredLocally,
            #[serde(rename = "ProvidedByFabric")]
            ProvidedByFabric,
        }
    }
}
pub mod network_device_function_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct NetworkDeviceFunctionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod network_device_function_metrics {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_device_function_metrics::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Ethernet {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumOffloadedIPv4Conns"
            )]
            pub num_offloaded_ipv4_conns: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumOffloadedIPv6Conns"
            )]
            pub num_offloaded_ipv6_conns: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FibreChannel {
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortLoginAccepts")]
            pub port_login_accepts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortLoginRejects")]
            pub port_login_rejects: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortLoginRequests")]
            pub port_login_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXCongestionFPINs")]
            pub rx_congestion_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXDeliveryFPINs")]
            pub rx_delivery_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXExchanges")]
            pub rx_exchanges: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXLinkIntegrityFPINs"
            )]
            pub rx_link_integrity_fpi_ns: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXPeerCongestionFPINs"
            )]
            pub rx_peer_congestion_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXSequences")]
            pub rx_sequences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXCongestionFPINs")]
            pub tx_congestion_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXDeliveryFPINs")]
            pub tx_delivery_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXExchanges")]
            pub tx_exchanges: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXLinkIntegrityFPINs"
            )]
            pub tx_link_integrity_fpi_ns: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXPeerCongestionFPINs"
            )]
            pub tx_peer_congestion_fpi_ns: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXSequences")]
            pub tx_sequences: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkDeviceFunctionMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_device_function_metrics::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ethernet")]
            pub ethernet: Option<crate::network_device_function_metrics::v1_1_0::Ethernet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FibreChannel")]
            pub fibre_channel: Option<crate::network_device_function_metrics::v1_1_0::FibreChannel>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXAvgQueueDepthPercent"
            )]
            pub rx_avg_queue_depth_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXBytes")]
            pub rx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXFrames")]
            pub rx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXMulticastFrames")]
            pub rx_multicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXQueuesEmpty")]
            pub rx_queues_empty: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXQueuesFull")]
            pub rx_queues_full: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXUnicastFrames")]
            pub rx_unicast_frames: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXAvgQueueDepthPercent"
            )]
            pub tx_avg_queue_depth_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBytes")]
            pub tx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXFrames")]
            pub tx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXMulticastFrames")]
            pub tx_multicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXQueuesEmpty")]
            pub tx_queues_empty: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXQueuesFull")]
            pub tx_queues_full: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXUnicastFrames")]
            pub tx_unicast_frames: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod network_interface {
    pub mod v1_2_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_interface::v1_2_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkAdapter")]
            pub network_adapter: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_interface::v1_2_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::network_interface::v1_2_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkPorts")]
            pub network_ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
    }
}
pub mod network_interface_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct NetworkInterfaceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod network_port {
    pub mod v1_4_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::network_port::v1_4_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FlowControl {
            #[default]
            #[serde(rename = "None")]
            None,
            #[serde(rename = "RX")]
            RX,
            #[serde(rename = "TX")]
            TX,
            #[serde(rename = "TX_RX")]
            TXRX,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkNetworkTechnology {
            #[default]
            #[serde(rename = "Ethernet")]
            Ethernet,
            #[serde(rename = "FibreChannel")]
            FibreChannel,
            #[serde(rename = "InfiniBand")]
            InfiniBand,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkStatus {
            #[default]
            #[serde(rename = "Down")]
            Down,
            #[serde(rename = "Starting")]
            Starting,
            #[serde(rename = "Training")]
            Training,
            #[serde(rename = "Up")]
            Up,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetDevFuncMaxBWAlloc {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxBWAllocPercent")]
            pub max_bw_alloc_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetDevFuncMinBWAlloc {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinBWAllocPercent")]
            pub min_bw_alloc_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NetworkPort {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::network_port::v1_4_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ActiveLinkTechnology"
            )]
            pub active_link_technology: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedNetworkAddresses"
            )]
            pub associated_network_addresses: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CurrentLinkSpeedMbps"
            )]
            pub current_link_speed_mbps: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EEEEnabled")]
            pub eee_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FCFabricName")]
            pub fc_fabric_name: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FCPortConnectionType"
            )]
            pub fc_port_connection_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FlowControlConfiguration"
            )]
            pub flow_control_configuration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FlowControlStatus")]
            pub flow_control_status: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkStatus")]
            pub link_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxFrameSize")]
            pub max_frame_size: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetDevFuncMaxBWAlloc"
            )]
            pub net_dev_func_max_bw_alloc:
                Option<Vec<crate::network_port::v1_4_1::NetDevFuncMaxBWAlloc>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetDevFuncMinBWAlloc"
            )]
            pub net_dev_func_min_bw_alloc:
                Option<Vec<crate::network_port::v1_4_1::NetDevFuncMinBWAlloc>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumberDiscoveredRemotePorts"
            )]
            pub number_discovered_remote_ports: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalPortNumber")]
            pub physical_port_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortMaximumMTU")]
            pub port_maximum_mtu: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignalDetected")]
            pub signal_detected: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedEthernetCapabilities"
            )]
            pub supported_ethernet_capabilities: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedLinkCapabilities"
            )]
            pub supported_link_capabilities:
                Option<Vec<crate::network_port::v1_4_1::SupportedLinkCapabilities>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VendorId")]
            pub vendor_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WakeOnLANEnabled")]
            pub wake_on_lan_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PortConnectionType {
            #[default]
            #[serde(rename = "ExtenderFabric")]
            ExtenderFabric,
            #[serde(rename = "Generic")]
            Generic,
            #[serde(rename = "NPort")]
            NPort,
            #[serde(rename = "NotConnected")]
            NotConnected,
            #[serde(rename = "PointToPoint")]
            PointToPoint,
            #[serde(rename = "PrivateLoop")]
            PrivateLoop,
            #[serde(rename = "PublicLoop")]
            PublicLoop,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SupportedEthernetCapabilities {
            #[default]
            #[serde(rename = "EEE")]
            EEE,
            #[serde(rename = "WakeOnLAN")]
            WakeOnLAN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SupportedLinkCapabilities {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutoSpeedNegotiation"
            )]
            pub auto_speed_negotiation: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapableLinkSpeedMbps"
            )]
            pub capable_link_speed_mbps: Option<Vec<i64>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LinkNetworkTechnology"
            )]
            pub link_network_technology: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkSpeedMbps")]
            pub link_speed_mbps: Option<i64>,
        }
    }
}
pub mod network_port_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct NetworkPortCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod odata_v4 {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct IdRef {
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.id")]
        pub odata_id: Option<String>,
    }
}
pub mod operating_config {
    pub mod v1_0_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::operating_config::v1_0_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct BaseSpeedPrioritySettings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseSpeedMHz")]
            pub base_speed_mhz: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreCount")]
            pub core_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreIDs")]
            pub core_ids: Option<Vec<i64>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OperatingConfig {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::operating_config::v1_0_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseSpeedMHz")]
            pub base_speed_mhz: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BaseSpeedPrioritySettings"
            )]
            pub base_speed_priority_settings:
                Option<Vec<crate::operating_config::v1_0_2::BaseSpeedPrioritySettings>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxJunctionTemperatureCelsius"
            )]
            pub max_junction_temperature_celsius: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSpeedMHz")]
            pub max_speed_mhz: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TDPWatts")]
            pub tdp_watts: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalAvailableCoreCount"
            )]
            pub total_available_core_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TurboProfile")]
            pub turbo_profile: Option<Vec<crate::operating_config::v1_0_2::TurboProfileDatapoint>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TurboProfileDatapoint {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ActiveCoreCount")]
            pub active_core_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSpeedMHz")]
            pub max_speed_mhz: Option<i64>,
        }
    }
}
pub mod operating_config_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct OperatingConfigCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod outlet {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ReceptacleType {
        #[default]
        #[serde(rename = "BS_1363_Type_G")]
        BSN1363TypeG,
        #[serde(rename = "BusConnection")]
        BusConnection,
        #[serde(rename = "CEE_7_Type_E")]
        CEEN7TypeE,
        #[serde(rename = "CEE_7_Type_F")]
        CEEN7TypeF,
        #[serde(rename = "IEC_60320_C13")]
        IECN60320C13,
        #[serde(rename = "IEC_60320_C19")]
        IECN60320C19,
        #[serde(rename = "NEMA_5_15R")]
        NEMAN515R,
        #[serde(rename = "NEMA_5_20R")]
        NEMAN520R,
        #[serde(rename = "NEMA_L5_20R")]
        NEMAL520R,
        #[serde(rename = "NEMA_L5_30R")]
        NEMAL530R,
        #[serde(rename = "NEMA_L6_20R")]
        NEMAL620R,
        #[serde(rename = "NEMA_L6_30R")]
        NEMAL630R,
        #[serde(rename = "SEV_1011_TYPE_12")]
        SEVN1011TYPEN12,
        #[serde(rename = "SEV_1011_TYPE_23")]
        SEVN1011TYPEN23,
    }
    pub mod v1_4_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::outlet::v1_4_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Outlet.PowerControl"
            )]
            pub outlet_power_control: Option<crate::outlet::v1_4_1::PowerControl>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Outlet.ResetMetrics"
            )]
            pub outlet_reset_metrics: Option<crate::outlet::v1_4_1::ResetMetrics>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CurrentSensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1")]
            pub line1: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2")]
            pub line2: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3")]
            pub line3: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neutral")]
            pub neutral: Option<crate::sensor::SensorCurrentExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "BranchCircuit")]
            pub branch_circuit: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DistributionCircuits"
            )]
            pub distribution_circuits: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DistributionCircuits@odata.count"
            )]
            pub distribution_circuits_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplies")]
            pub power_supplies: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerSupplies@odata.count"
            )]
            pub power_supplies_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Outlet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::outlet::v1_4_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfigurationLocked"
            )]
            pub configuration_locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentAmps")]
            pub current_amps: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalConsumerNames"
            )]
            pub electrical_consumer_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalContext")]
            pub electrical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FrequencyHz")]
            pub frequency_hz: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::outlet::v1_4_1::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NominalVoltage")]
            pub nominal_voltage: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutletType")]
            pub outlet_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseWiringType")]
            pub phase_wiring_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PolyPhaseCurrentAmps"
            )]
            pub poly_phase_current_amps: Option<crate::outlet::v1_4_1::CurrentSensors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PolyPhaseVoltage")]
            pub poly_phase_voltage: Option<crate::outlet::v1_4_1::VoltageSensors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerControlLocked")]
            pub power_control_locked: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerCycleDelaySeconds"
            )]
            pub power_cycle_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerEnabled")]
            pub power_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLoadPercent")]
            pub power_load_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOffDelaySeconds"
            )]
            pub power_off_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOnDelaySeconds"
            )]
            pub power_on_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerRestoreDelaySeconds"
            )]
            pub power_restore_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerRestorePolicy")]
            pub power_restore_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerStateInTransition"
            )]
            pub power_state_in_transition: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RatedCurrentAmps")]
            pub rated_current_amps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Voltage")]
            pub voltage: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VoltageType")]
            pub voltage_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControlRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VoltageSensors {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToLine2")]
            pub line1_to_line2: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line1ToNeutral")]
            pub line1_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToLine3")]
            pub line2_to_line3: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line2ToNeutral")]
            pub line2_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToLine1")]
            pub line3_to_line1: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Line3ToNeutral")]
            pub line3_to_neutral: Option<crate::sensor::SensorVoltageExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum VoltageType {
            #[default]
            #[serde(rename = "AC")]
            AC,
            #[serde(rename = "DC")]
            DC,
        }
    }
}
pub mod outlet_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct OutletCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod outlet_group {
    pub mod v1_1_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::outlet_group::v1_1_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#OutletGroup.PowerControl"
            )]
            pub outlet_group_power_control: Option<crate::outlet_group::v1_1_1::PowerControl>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#OutletGroup.ResetMetrics"
            )]
            pub outlet_group_reset_metrics: Option<crate::outlet_group::v1_1_1::ResetMetrics>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Outlets")]
            pub outlets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Outlets@odata.count"
            )]
            pub outlets_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OutletGroup {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::outlet_group::v1_1_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfigurationLocked"
            )]
            pub configuration_locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedBy")]
            pub created_by: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::outlet_group::v1_1_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerControlLocked")]
            pub power_control_locked: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerCycleDelaySeconds"
            )]
            pub power_cycle_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerEnabled")]
            pub power_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOffDelaySeconds"
            )]
            pub power_off_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOnDelaySeconds"
            )]
            pub power_on_delay_seconds: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerRestoreDelaySeconds"
            )]
            pub power_restore_delay_seconds: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerRestorePolicy")]
            pub power_restore_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerStateInTransition"
            )]
            pub power_state_in_transition: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControlRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
    }
}
pub mod outlet_group_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct OutletGroupCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod pcie_device {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum PCIeErrors {
        PCIeDeviceV1N10N1PCIeErrors(crate::pcie_device::v1_10_1::PCIeErrors),
        PCIeDeviceV1N11N1PCIeErrors(crate::pcie_device::v1_11_1::PCIeErrors),
        PCIeDeviceV1N8N1PCIeErrors(crate::pcie_device::v1_8_1::PCIeErrors),
        PCIeDeviceV1N9N1PCIeErrors(crate::pcie_device::v1_9_1::PCIeErrors),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum PCIeInterface {
        PCIeDeviceV1N10N1PCIeInterface(crate::pcie_device::v1_10_1::PCIeInterface),
        PCIeDeviceV1N11N1PCIeInterface(crate::pcie_device::v1_11_1::PCIeInterface),
        PCIeDeviceV1N3N4PCIeInterface(crate::pcie_device::v1_3_4::PCIeInterface),
        PCIeDeviceV1N4N2PCIeInterface(crate::pcie_device::v1_4_2::PCIeInterface),
        PCIeDeviceV1N5N2PCIeInterface(crate::pcie_device::v1_5_2::PCIeInterface),
        PCIeDeviceV1N6N2PCIeInterface(crate::pcie_device::v1_6_2::PCIeInterface),
        PCIeDeviceV1N7N1PCIeInterface(crate::pcie_device::v1_7_1::PCIeInterface),
        PCIeDeviceV1N8N1PCIeInterface(crate::pcie_device::v1_8_1::PCIeInterface),
        PCIeDeviceV1N9N1PCIeInterface(crate::pcie_device::v1_9_1::PCIeInterface),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PCIeTypes {
        #[default]
        #[serde(rename = "Gen1")]
        Gen1,
        #[serde(rename = "Gen2")]
        Gen2,
        #[serde(rename = "Gen3")]
        Gen3,
        #[serde(rename = "Gen4")]
        Gen4,
        #[serde(rename = "Gen5")]
        Gen5,
    }
    pub mod v1_10_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeErrors {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableErrorCount"
            )]
            pub correctable_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FatalErrorCount")]
            pub fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "L0ToRecoveryCount")]
            pub l0_to_recovery_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKReceivedCount")]
            pub nak_received_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKSentCount")]
            pub nak_sent_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonFatalErrorCount")]
            pub non_fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplayCount")]
            pub replay_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplayRolloverCount"
            )]
            pub replay_rollover_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_11_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::pcie_device::v1_11_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXLDevice {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceType")]
            pub device_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EgressPortCongestionSupport"
            )]
            pub egress_port_congestion_support: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxNumberLogicalDevices"
            )]
            pub max_number_logical_devices: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThroughputReductionSupport"
            )]
            pub throughput_reduction_support: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CXLDeviceType {
            #[default]
            #[serde(rename = "Type1")]
            Type1,
            #[serde(rename = "Type2")]
            Type2,
            #[serde(rename = "Type3")]
            Type3,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DeviceType {
            #[default]
            #[serde(rename = "MultiFunction")]
            MultiFunction,
            #[serde(rename = "Retimer")]
            Retimer,
            #[serde(rename = "Simulated")]
            Simulated,
            #[serde(rename = "SingleFunction")]
            SingleFunction,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LaneSplittingType {
            #[default]
            #[serde(rename = "Bifurcated")]
            Bifurcated,
            #[serde(rename = "Bridged")]
            Bridged,
            #[serde(rename = "None")]
            None,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switch")]
            pub switch: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeDevice {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::pcie_device::v1_11_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLDevice")]
            pub cxl_device: Option<crate::pcie_device::v1_11_1::CXLDevice>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLLogicalDevices")]
            pub cxl_logical_devices: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceType")]
            pub device_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::pcie_device::v1_11_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::v1_11_1::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadyToRemove")]
            pub ready_to_remove: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Slot")]
            pub slot: Option<crate::pcie_device::v1_11_1::Slot>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StagedVersion")]
            pub staged_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeErrors {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableErrorCount"
            )]
            pub correctable_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FatalErrorCount")]
            pub fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "L0ToRecoveryCount")]
            pub l0_to_recovery_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKReceivedCount")]
            pub nak_received_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKSentCount")]
            pub nak_sent_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonFatalErrorCount")]
            pub non_fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplayCount")]
            pub replay_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplayRolloverCount"
            )]
            pub replay_rollover_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Slot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LaneSplitting")]
            pub lane_splitting: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lanes")]
            pub lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotType")]
            pub slot_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SlotType {
            #[default]
            #[serde(rename = "FullLength")]
            FullLength,
            #[serde(rename = "HalfLength")]
            HalfLength,
            #[serde(rename = "LowProfile")]
            LowProfile,
            #[serde(rename = "M2")]
            M2,
            #[serde(rename = "Mini")]
            Mini,
            #[serde(rename = "OCP3Large")]
            OCP3Large,
            #[serde(rename = "OCP3Small")]
            OCP3Small,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "U2")]
            U2,
        }
    }
    pub mod v1_3_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_4_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_5_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_6_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_7_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_8_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeErrors {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableErrorCount"
            )]
            pub correctable_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FatalErrorCount")]
            pub fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "L0ToRecoveryCount")]
            pub l0_to_recovery_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKReceivedCount")]
            pub nak_received_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKSentCount")]
            pub nak_sent_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonFatalErrorCount")]
            pub non_fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplayCount")]
            pub replay_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplayRolloverCount"
            )]
            pub replay_rollover_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
    pub mod v1_9_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeErrors {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableErrorCount"
            )]
            pub correctable_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FatalErrorCount")]
            pub fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "L0ToRecoveryCount")]
            pub l0_to_recovery_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKReceivedCount")]
            pub nak_received_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NAKSentCount")]
            pub nak_sent_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NonFatalErrorCount")]
            pub non_fatal_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplayCount")]
            pub replay_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplayRolloverCount"
            )]
            pub replay_rollover_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LanesInUse")]
            pub lanes_in_use: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxPCIeType")]
            pub max_pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
        }
    }
}
pub mod pcie_device_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PCIeDeviceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod pcie_function {
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::pcie_function::v1_5_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DeviceClass {
            #[default]
            #[serde(rename = "Bridge")]
            Bridge,
            #[serde(rename = "CommunicationController")]
            CommunicationController,
            #[serde(rename = "Coprocessor")]
            Coprocessor,
            #[serde(rename = "DisplayController")]
            DisplayController,
            #[serde(rename = "DockingStation")]
            DockingStation,
            #[serde(rename = "EncryptionController")]
            EncryptionController,
            #[serde(rename = "GenericSystemPeripheral")]
            GenericSystemPeripheral,
            #[serde(rename = "InputDeviceController")]
            InputDeviceController,
            #[serde(rename = "IntelligentController")]
            IntelligentController,
            #[serde(rename = "MassStorageController")]
            MassStorageController,
            #[serde(rename = "MemoryController")]
            MemoryController,
            #[serde(rename = "MultimediaController")]
            MultimediaController,
            #[serde(rename = "NetworkController")]
            NetworkController,
            #[serde(rename = "NonEssentialInstrumentation")]
            NonEssentialInstrumentation,
            #[serde(rename = "Other")]
            Other,
            #[serde(rename = "ProcessingAccelerators")]
            ProcessingAccelerators,
            #[serde(rename = "Processor")]
            Processor,
            #[serde(rename = "SatelliteCommunicationsController")]
            SatelliteCommunicationsController,
            #[serde(rename = "SerialBusController")]
            SerialBusController,
            #[serde(rename = "SignalProcessingController")]
            SignalProcessingController,
            #[serde(rename = "UnassignedClass")]
            UnassignedClass,
            #[serde(rename = "UnclassifiedDevice")]
            UnclassifiedDevice,
            #[serde(rename = "WirelessController")]
            WirelessController,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FunctionProtocol {
            #[default]
            #[serde(rename = "CXL")]
            CXL,
            #[serde(rename = "PCIe")]
            PCIe,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FunctionType {
            #[default]
            #[serde(rename = "Physical")]
            Physical,
            #[serde(rename = "Virtual")]
            Virtual,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXLLogicalDevice")]
            pub cxl_logical_device: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives@odata.count")]
            pub drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EthernetInterfaces@odata.count"
            )]
            pub ethernet_interfaces_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryDomains")]
            pub memory_domains: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MemoryDomains@odata.count"
            )]
            pub memory_domains_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processor")]
            pub processor: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageControllers")]
            pub storage_controllers: Option<Vec<crate::storage::StorageController>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageControllers@odata.count"
            )]
            pub storage_controllers_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeFunction {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::pcie_function::v1_5_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClassCode")]
            pub class_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceClass")]
            pub device_class: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceId")]
            pub device_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FunctionId")]
            pub function_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FunctionProtocol")]
            pub function_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FunctionType")]
            pub function_type: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::pcie_function::v1_5_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RevisionId")]
            pub revision_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemId")]
            pub subsystem_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubsystemVendorId")]
            pub subsystem_vendor_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VendorId")]
            pub vendor_id: Option<String>,
        }
    }
}
pub mod pcie_function_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PCIeFunctionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod pcie_slots {
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::pcie_slots::v1_5_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeDevice@odata.count"
            )]
            pub pcie_device_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeSlot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lanes")]
            pub lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::pcie_slots::v1_5_0::PCIeLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeType")]
            pub pcie_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotType")]
            pub slot_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PCIeSlots {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::pcie_slots::v1_5_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Slots")]
            pub slots: Option<Vec<crate::pcie_slots::v1_5_0::PCIeSlot>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SlotTypes {
            #[default]
            #[serde(rename = "FullLength")]
            FullLength,
            #[serde(rename = "HalfLength")]
            HalfLength,
            #[serde(rename = "LowProfile")]
            LowProfile,
            #[serde(rename = "M2")]
            M2,
            #[serde(rename = "Mini")]
            Mini,
            #[serde(rename = "OCP3Large")]
            OCP3Large,
            #[serde(rename = "OCP3Small")]
            OCP3Small,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "U2")]
            U2,
        }
    }
}
pub mod physical_context {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum LogicalContext {
        #[default]
        #[serde(rename = "Capacity")]
        Capacity,
        #[serde(rename = "Environment")]
        Environment,
        #[serde(rename = "Network")]
        Network,
        #[serde(rename = "Performance")]
        Performance,
        #[serde(rename = "Security")]
        Security,
        #[serde(rename = "Storage")]
        Storage,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PhysicalContext {
        #[default]
        #[serde(rename = "ACInput")]
        ACInput,
        #[serde(rename = "ACMaintenanceBypassInput")]
        ACMaintenanceBypassInput,
        #[serde(rename = "ACOutput")]
        ACOutput,
        #[serde(rename = "ACStaticBypassInput")]
        ACStaticBypassInput,
        #[serde(rename = "ACUtilityInput")]
        ACUtilityInput,
        #[serde(rename = "ASIC")]
        ASIC,
        #[serde(rename = "Accelerator")]
        Accelerator,
        #[serde(rename = "Back")]
        Back,
        #[serde(rename = "Backplane")]
        Backplane,
        #[serde(rename = "Battery")]
        Battery,
        #[serde(rename = "Board")]
        Board,
        #[serde(rename = "CPU")]
        CPU,
        #[serde(rename = "CPUSubsystem")]
        CPUSubsystem,
        #[serde(rename = "Chassis")]
        Chassis,
        #[serde(rename = "ComputeBay")]
        ComputeBay,
        #[serde(rename = "CoolingSubsystem")]
        CoolingSubsystem,
        #[serde(rename = "DCBus")]
        DCBus,
        #[serde(rename = "Exhaust")]
        Exhaust,
        #[serde(rename = "ExpansionBay")]
        ExpansionBay,
        #[serde(rename = "FPGA")]
        FPGA,
        #[serde(rename = "Fan")]
        Fan,
        #[serde(rename = "Front")]
        Front,
        #[serde(rename = "GPU")]
        GPU,
        #[serde(rename = "GPUSubsystem")]
        GPUSubsystem,
        #[serde(rename = "Intake")]
        Intake,
        #[serde(rename = "LiquidInlet")]
        LiquidInlet,
        #[serde(rename = "LiquidOutlet")]
        LiquidOutlet,
        #[serde(rename = "Lower")]
        Lower,
        #[serde(rename = "Memory")]
        Memory,
        #[serde(rename = "MemorySubsystem")]
        MemorySubsystem,
        #[serde(rename = "Motor")]
        Motor,
        #[serde(rename = "NetworkBay")]
        NetworkBay,
        #[serde(rename = "NetworkingDevice")]
        NetworkingDevice,
        #[serde(rename = "PowerSubsystem")]
        PowerSubsystem,
        #[serde(rename = "PowerSupply")]
        PowerSupply,
        #[serde(rename = "PowerSupplyBay")]
        PowerSupplyBay,
        #[serde(rename = "Pump")]
        Pump,
        #[serde(rename = "Rectifier")]
        Rectifier,
        #[serde(rename = "Room")]
        Room,
        #[serde(rename = "StorageBay")]
        StorageBay,
        #[serde(rename = "StorageDevice")]
        StorageDevice,
        #[serde(rename = "SystemBoard")]
        SystemBoard,
        #[serde(rename = "Transceiver")]
        Transceiver,
        #[serde(rename = "Transformer")]
        Transformer,
        #[serde(rename = "TrustedModule")]
        TrustedModule,
        #[serde(rename = "Upper")]
        Upper,
        #[serde(rename = "VoltageRegulator")]
        VoltageRegulator,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PhysicalSubContext {
        #[default]
        #[serde(rename = "Input")]
        Input,
        #[serde(rename = "Output")]
        Output,
    }
}
pub mod port {
    pub mod v1_9_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::port::v1_9_0::OemActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Port.Reset")]
            pub port_reset: Option<crate::port::v1_9_0::Reset>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Port.ResetPPB")]
            pub port_reset_ppb: Option<crate::port::v1_9_0::ResetPPB>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXL {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Congestion")]
            pub congestion: Option<crate::port::v1_9_0::Congestion>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedDeviceMode"
            )]
            pub connected_device_mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedDeviceType"
            )]
            pub connected_device_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CurrentPortConfigurationState"
            )]
            pub current_port_configuration_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxLogicalDeviceCount"
            )]
            pub max_logical_device_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "QoSTelemetryCapabilities"
            )]
            pub qos_telemetry_capabilities: Option<crate::port::v1_9_0::QoSTelemetryCapabilities>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemporaryThroughputReductionEnabled"
            )]
            pub temporary_throughput_reduction_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ConfiguredNetworkLink {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfiguredLinkSpeedGbps"
            )]
            pub configured_link_speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConfiguredWidth")]
            pub configured_width: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Congestion {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BackpressureSampleInterval"
            )]
            pub backpressure_sample_interval: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CompletionCollectionInterval"
            )]
            pub completion_collection_interval: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CongestionTelemetryEnabled"
            )]
            pub congestion_telemetry_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EgressModeratePercentage"
            )]
            pub egress_moderate_percentage: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EgressSeverePercentage"
            )]
            pub egress_severe_percentage: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxSustainedRequestCmpBias"
            )]
            pub max_sustained_request_cmp_bias: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectedDeviceMode {
            #[default]
            #[serde(rename = "CXL68BFlitAndVH")]
            CXL68BFlitAndVH,
            #[serde(rename = "CXLLatencyOptimized256BFlit")]
            CXLLatencyOptimized256BFlit,
            #[serde(rename = "Disconnected")]
            Disconnected,
            #[serde(rename = "PBR")]
            PBR,
            #[serde(rename = "RCD")]
            RCD,
            #[serde(rename = "Standard256BFlit")]
            Standard256BFlit,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectedDeviceType {
            #[default]
            #[serde(rename = "None")]
            None,
            #[serde(rename = "PCIeDevice")]
            PCIeDevice,
            #[serde(rename = "Type1")]
            Type1,
            #[serde(rename = "Type2")]
            Type2,
            #[serde(rename = "Type3MLD")]
            Type3MLD,
            #[serde(rename = "Type3SLD")]
            Type3SLD,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CurrentPortConfigurationState {
            #[default]
            #[serde(rename = "BindInProgress")]
            BindInProgress,
            #[serde(rename = "DSP")]
            DSP,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Reserved")]
            Reserved,
            #[serde(rename = "USP")]
            USP,
            #[serde(rename = "UnbindInProgress")]
            UnbindInProgress,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EthernetProperties {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedMACAddresses"
            )]
            pub associated_mac_addresses: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EEEEnabled")]
            pub eee_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FlowControlConfiguration"
            )]
            pub flow_control_configuration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FlowControlStatus")]
            pub flow_control_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LLDPEnabled")]
            pub lldp_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LLDPReceive")]
            pub lldp_receive: Option<crate::port::v1_9_0::LLDPReceive>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LLDPTransmit")]
            pub lldp_transmit: Option<crate::port::v1_9_0::LLDPTransmit>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedEthernetCapabilities"
            )]
            pub supported_ethernet_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WakeOnLANEnabled")]
            pub wake_on_lan_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FiberConnectionType {
            #[default]
            #[serde(rename = "MultiMode")]
            MultiMode,
            #[serde(rename = "SingleMode")]
            SingleMode,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FibreChannelProperties {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedWorldWideNames"
            )]
            pub associated_world_wide_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricName")]
            pub fabric_name: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumberDiscoveredRemotePorts"
            )]
            pub number_discovered_remote_ports: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortConnectionType")]
            pub port_connection_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FlowControl {
            #[default]
            #[serde(rename = "None")]
            None,
            #[serde(rename = "RX")]
            RX,
            #[serde(rename = "TX")]
            TX,
            #[serde(rename = "TX_RX")]
            TXRX,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FunctionMaxBandwidth {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocationPercent")]
            pub allocation_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FunctionMinBandwidth {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocationPercent")]
            pub allocation_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunction"
            )]
            pub network_device_function: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZ {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LPRT")]
            pub lprt: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MPRT")]
            pub mprt: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VCAT")]
            pub vcat: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum IEEE802IdSubtype {
            #[default]
            #[serde(rename = "AgentId")]
            AgentId,
            #[serde(rename = "ChassisComp")]
            ChassisComp,
            #[serde(rename = "IfAlias")]
            IfAlias,
            #[serde(rename = "IfName")]
            IfName,
            #[serde(rename = "LocalAssign")]
            LocalAssign,
            #[serde(rename = "MacAddr")]
            MacAddr,
            #[serde(rename = "NetworkAddr")]
            NetworkAddr,
            #[serde(rename = "NotTransmitted")]
            NotTransmitted,
            #[serde(rename = "PortComp")]
            PortComp,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InfiniBandProperties {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedNodeGUIDs"
            )]
            pub associated_node_gu_ids: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedPortGUIDs"
            )]
            pub associated_port_gu_ids: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedSystemGUIDs"
            )]
            pub associated_system_gu_ids: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LLDPReceive {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChassisId")]
            pub chassis_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChassisIdSubtype")]
            pub chassis_id_subtype: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressIPv4"
            )]
            pub management_address_ipv4: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressIPv6"
            )]
            pub management_address_ipv6: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressMAC"
            )]
            pub management_address_mac: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagementVlanId")]
            pub management_vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortId")]
            pub port_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortIdSubtype")]
            pub port_id_subtype: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemCapabilities")]
            pub system_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemDescription")]
            pub system_description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemName")]
            pub system_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LLDPSystemCapabilities {
            #[default]
            #[serde(rename = "Bridge")]
            Bridge,
            #[serde(rename = "DOCSISCableDevice")]
            DOCSISCableDevice,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Other")]
            Other,
            #[serde(rename = "Repeater")]
            Repeater,
            #[serde(rename = "Router")]
            Router,
            #[serde(rename = "Station")]
            Station,
            #[serde(rename = "Telephone")]
            Telephone,
            #[serde(rename = "WLANAccessPoint")]
            WLANAccessPoint,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LLDPTransmit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChassisId")]
            pub chassis_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ChassisIdSubtype")]
            pub chassis_id_subtype: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressIPv4"
            )]
            pub management_address_ipv4: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressIPv6"
            )]
            pub management_address_ipv6: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagementAddressMAC"
            )]
            pub management_address_mac: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagementVlanId")]
            pub management_vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortId")]
            pub port_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortIdSubtype")]
            pub port_id_subtype: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemCapabilities")]
            pub system_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemDescription")]
            pub system_description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemName")]
            pub system_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LinkConfiguration {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutoSpeedNegotiationCapable"
            )]
            pub auto_speed_negotiation_capable: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutoSpeedNegotiationEnabled"
            )]
            pub auto_speed_negotiation_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapableLinkSpeedGbps"
            )]
            pub capable_link_speed_gbps: Option<Vec<f64>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConfiguredNetworkLinks"
            )]
            pub configured_network_links: Option<Vec<crate::port::v1_9_0::ConfiguredNetworkLink>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkNetworkTechnology {
            #[default]
            #[serde(rename = "Ethernet")]
            Ethernet,
            #[serde(rename = "FibreChannel")]
            FibreChannel,
            #[serde(rename = "GenZ")]
            GenZ,
            #[serde(rename = "InfiniBand")]
            InfiniBand,
            #[serde(rename = "PCIe")]
            PCIe,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkState {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LinkStatus {
            #[default]
            #[serde(rename = "LinkDown")]
            LinkDown,
            #[serde(rename = "LinkUp")]
            LinkUp,
            #[serde(rename = "NoLink")]
            NoLink,
            #[serde(rename = "Starting")]
            Starting,
            #[serde(rename = "Training")]
            Training,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedEndpoints"
            )]
            pub associated_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedEndpoints@odata.count"
            )]
            pub associated_endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cables")]
            pub cables: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cables@odata.count")]
            pub cables_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedPorts")]
            pub connected_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedPorts@odata.count"
            )]
            pub connected_ports_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedSwitchPorts"
            )]
            pub connected_switch_ports: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedSwitchPorts@odata.count"
            )]
            pub connected_switch_ports_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedSwitches")]
            pub connected_switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedSwitches@odata.count"
            )]
            pub connected_switches_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EthernetInterfaces@odata.count"
            )]
            pub ethernet_interfaces_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MediumType {
            #[default]
            #[serde(rename = "Copper")]
            Copper,
            #[serde(rename = "FiberOptic")]
            FiberOptic,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Port {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::port::v1_9_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ActiveWidth")]
            pub active_width: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapableProtocolVersions"
            )]
            pub capable_protocol_versions: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CurrentProtocolVersion"
            )]
            pub current_protocol_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentSpeedGbps")]
            pub current_speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXL")]
            pub cxl: Option<crate::port::v1_9_0::CXL>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ethernet")]
            pub ethernet: Option<crate::port::v1_9_0::EthernetProperties>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FibreChannel")]
            pub fibre_channel: Option<crate::port::v1_9_0::FibreChannelProperties>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FunctionMaxBandwidth"
            )]
            pub function_max_bandwidth: Option<Vec<crate::port::v1_9_0::FunctionMaxBandwidth>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FunctionMinBandwidth"
            )]
            pub function_min_bandwidth: Option<Vec<crate::port::v1_9_0::FunctionMinBandwidth>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::port::v1_9_0::GenZ>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfiniBand")]
            pub infini_band: Option<crate::port::v1_9_0::InfiniBandProperties>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceEnabled")]
            pub interface_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkConfiguration")]
            pub link_configuration: Option<Vec<crate::port::v1_9_0::LinkConfiguration>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LinkNetworkTechnology"
            )]
            pub link_network_technology: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkState")]
            pub link_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkStatus")]
            pub link_status: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LinkTransitionIndicator"
            )]
            pub link_transition_indicator: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::port::v1_9_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxFrameSize")]
            pub max_frame_size: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSpeedGbps")]
            pub max_speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortId")]
            pub port_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortMedium")]
            pub port_medium: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortProtocol")]
            pub port_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PortType")]
            pub port_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RemotePortId")]
            pub remote_port_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SFP")]
            pub sfp: Option<crate::port::v1_9_0::SFP>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignalDetected")]
            pub signal_detected: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Width")]
            pub width: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PortConnectionType {
            #[default]
            #[serde(rename = "DPort")]
            DPort,
            #[serde(rename = "EPort")]
            EPort,
            #[serde(rename = "EXPort")]
            EXPort,
            #[serde(rename = "ExtenderFabric")]
            ExtenderFabric,
            #[serde(rename = "FLPort")]
            FLPort,
            #[serde(rename = "FPort")]
            FPort,
            #[serde(rename = "GPort")]
            GPort,
            #[serde(rename = "Generic")]
            Generic,
            #[serde(rename = "NLPort")]
            NLPort,
            #[serde(rename = "NPPort")]
            NPPort,
            #[serde(rename = "NPort")]
            NPort,
            #[serde(rename = "NotConnected")]
            NotConnected,
            #[serde(rename = "PointToPoint")]
            PointToPoint,
            #[serde(rename = "PrivateLoop")]
            PrivateLoop,
            #[serde(rename = "PublicLoop")]
            PublicLoop,
            #[serde(rename = "TEPort")]
            TEPort,
            #[serde(rename = "UPort")]
            UPort,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PortMedium {
            #[default]
            #[serde(rename = "Electrical")]
            Electrical,
            #[serde(rename = "Optical")]
            Optical,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PortType {
            #[default]
            #[serde(rename = "BidirectionalPort")]
            BidirectionalPort,
            #[serde(rename = "DownstreamPort")]
            DownstreamPort,
            #[serde(rename = "InterswitchPort")]
            InterswitchPort,
            #[serde(rename = "ManagementPort")]
            ManagementPort,
            #[serde(rename = "UnconfiguredPort")]
            UnconfiguredPort,
            #[serde(rename = "UpstreamPort")]
            UpstreamPort,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct QoSTelemetryCapabilities {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EgressPortBackpressureSupported"
            )]
            pub egress_port_backpressure_supported: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemporaryThroughputReductionSupported"
            )]
            pub temporary_throughput_reduction_supported: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetPPB {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetPPBRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SFP {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FiberConnectionType"
            )]
            pub fiber_connection_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediumType")]
            pub medium_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedSFPTypes")]
            pub supported_sfp_types: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Type")]
            pub r#type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SFPType {
            #[default]
            #[serde(rename = "MiniSASHD")]
            MiniSASHD,
            #[serde(rename = "OSFP")]
            OSFP,
            #[serde(rename = "QSFP")]
            QSFP,
            #[serde(rename = "QSFP14")]
            QSFP14,
            #[serde(rename = "QSFP28")]
            QSFP28,
            #[serde(rename = "QSFP56")]
            QSFP56,
            #[serde(rename = "QSFPDD")]
            QSFPDD,
            #[serde(rename = "QSFPPlus")]
            QSFPPlus,
            #[serde(rename = "SFP")]
            SFP,
            #[serde(rename = "SFP28")]
            SFP28,
            #[serde(rename = "SFPDD")]
            SFPDD,
            #[serde(rename = "SFPPlus")]
            SFPPlus,
            #[serde(rename = "cSFP")]
            CSFP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SupportedEthernetCapabilities {
            #[default]
            #[serde(rename = "EEE")]
            EEE,
            #[serde(rename = "WakeOnLAN")]
            WakeOnLAN,
        }
    }
}
pub mod port_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PortCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod port_metrics {
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::port_metrics::v1_4_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXL {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BackpressureAveragePercentage"
            )]
            pub backpressure_average_percentage: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FibreChannel {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableFECErrors"
            )]
            pub correctable_fec_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InvalidCRCs")]
            pub invalid_cr_cs: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InvalidTXWords")]
            pub invalid_tx_words: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkFailures")]
            pub link_failures: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LossesOfSignal")]
            pub losses_of_signal: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LossesOfSync")]
            pub losses_of_sync: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXExchanges")]
            pub rx_exchanges: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXSequences")]
            pub rx_sequences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXBBCreditZero")]
            pub rxbb_credit_zero: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXExchanges")]
            pub tx_exchanges: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXSequences")]
            pub tx_sequences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBBCreditZero")]
            pub txbb_credit_zero: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXBBCreditZeroDurationMilliseconds"
            )]
            pub txbb_credit_zero_duration_milliseconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBBCredits")]
            pub txbb_credits: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableFECErrors"
            )]
            pub uncorrectable_fec_errors: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct GenZ {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccessKeyViolations"
            )]
            pub access_key_violations: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndToEndCRCErrors")]
            pub end_to_end_crc_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LinkNTE")]
            pub link_nte: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LLRRecovery")]
            pub llr_recovery: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MarkedECN")]
            pub marked_ecn: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NonCRCTransientErrors"
            )]
            pub non_crc_transient_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PacketCRCErrors")]
            pub packet_crc_errors: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PacketDeadlineDiscards"
            )]
            pub packet_deadline_discards: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReceivedECN")]
            pub received_ecn: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXStompedECRC")]
            pub rx_stomped_ecrc: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXStompedECRC")]
            pub tx_stomped_ecrc: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Networking {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RDMAProtectionErrors"
            )]
            pub rdma_protection_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMAProtocolErrors")]
            pub rdma_protocol_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMARXBytes")]
            pub rdmarx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMARXRequests")]
            pub rdmarx_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMATXBytes")]
            pub rdmatx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMATXReadRequests")]
            pub rdmatx_read_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMATXRequests")]
            pub rdmatx_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RDMATXSendRequests")]
            pub rdmatx_send_requests: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RDMATXWriteRequests"
            )]
            pub rdmatx_write_requests: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXBroadcastFrames")]
            pub rx_broadcast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXDiscards")]
            pub rx_discards: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXFalseCarrierErrors"
            )]
            pub rx_false_carrier_errors: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXFrameAlignmentErrors"
            )]
            pub rx_frame_alignment_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXFrames")]
            pub rx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXMulticastFrames")]
            pub rx_multicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXOversizeFrames")]
            pub rx_oversize_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXPauseXOFFFrames")]
            pub rx_pause_xoff_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXPauseXONFrames")]
            pub rx_pause_xon_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXUndersizeFrames")]
            pub rx_undersize_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXUnicastFrames")]
            pub rx_unicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXFCSErrors")]
            pub rxfcs_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXPFCFrames")]
            pub rxpfc_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBroadcastFrames")]
            pub tx_broadcast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXDiscards")]
            pub tx_discards: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXExcessiveCollisions"
            )]
            pub tx_excessive_collisions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXFrames")]
            pub tx_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXLateCollisions")]
            pub tx_late_collisions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXMulticastFrames")]
            pub tx_multicast_frames: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXMultipleCollisions"
            )]
            pub tx_multiple_collisions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXPauseXOFFFrames")]
            pub tx_pause_xoff_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXPauseXONFrames")]
            pub tx_pause_xon_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXSingleCollisions")]
            pub tx_single_collisions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXUnicastFrames")]
            pub tx_unicast_frames: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXPFCFrames")]
            pub txpfc_frames: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PortMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::port_metrics::v1_4_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXL")]
            pub cxl: Option<crate::port_metrics::v1_4_0::CXL>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FibreChannel")]
            pub fibre_channel: Option<crate::port_metrics::v1_4_0::FibreChannel>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GenZ")]
            pub gen_z: Option<crate::port_metrics::v1_4_0::GenZ>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Networking")]
            pub networking: Option<crate::port_metrics::v1_4_0::Networking>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeErrors")]
            pub pcie_errors: Option<crate::pcie_device::PCIeErrors>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXBytes")]
            pub rx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RXErrors")]
            pub rx_errors: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SAS")]
            pub sas: Option<Vec<crate::port_metrics::v1_4_0::SAS>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Transceivers")]
            pub transceivers: Option<Vec<crate::port_metrics::v1_4_0::Transceiver>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXBytes")]
            pub tx_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TXErrors")]
            pub tx_errors: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SAS {
            #[serde(skip_serializing_if = "Option::is_none", rename = "InvalidDwordCount")]
            pub invalid_dword_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LossOfDwordSynchronizationCount"
            )]
            pub loss_of_dword_synchronization_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RunningDisparityErrorCount"
            )]
            pub running_disparity_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Transceiver {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RXInputPowerMilliWatts"
            )]
            pub rx_input_power_milli_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupplyVoltage")]
            pub supply_voltage: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXBiasCurrentMilliAmps"
            )]
            pub tx_bias_current_milli_amps: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TXOutputPowerMilliWatts"
            )]
            pub tx_output_power_milli_watts: Option<f64>,
        }
    }
}
pub mod power {
    pub mod v1_7_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power::v1_7_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Power.PowerSupplyReset"
            )]
            pub power_power_supply_reset: Option<crate::power::v1_7_1::PowerSupplyReset>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InputRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputType")]
            pub input_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaximumFrequencyHz")]
            pub maximum_frequency_hz: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaximumVoltage")]
            pub maximum_voltage: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinimumFrequencyHz")]
            pub minimum_frequency_hz: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinimumVoltage")]
            pub minimum_voltage: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutputWattage")]
            pub output_wattage: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum InputType {
            #[default]
            #[serde(rename = "AC")]
            AC,
            #[serde(rename = "DC")]
            DC,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LineInputVoltageType {
            #[default]
            #[serde(rename = "AC120V")]
            AC120V,
            #[serde(rename = "AC240V")]
            AC240V,
            #[serde(rename = "AC277V")]
            AC277V,
            #[serde(rename = "ACHighLine")]
            ACHighLine,
            #[serde(rename = "ACLowLine")]
            ACLowLine,
            #[serde(rename = "ACMidLine")]
            ACMidLine,
            #[serde(rename = "ACWideRange")]
            ACWideRange,
            #[serde(rename = "ACandDCWideRange")]
            ACandDCWideRange,
            #[serde(rename = "DC240V")]
            DC240V,
            #[serde(rename = "DC380V")]
            DC380V,
            #[serde(rename = "DCNeg48V")]
            DCNeg48V,
            #[serde(rename = "Unknown")]
            Unknown,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Power {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power::v1_7_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerControl")]
            pub power_control: Option<Vec<crate::power::v1_7_1::PowerControl>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerControl@odata.count"
            )]
            pub power_control_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplies")]
            pub power_supplies: Option<Vec<crate::power::v1_7_1::PowerSupply>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerSupplies@odata.count"
            )]
            pub power_supplies_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Voltages")]
            pub voltages: Option<Vec<crate::power::v1_7_1::Voltage>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Voltages@odata.count"
            )]
            pub voltages_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power::v1_7_1::PowerControlActions>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerAllocatedWatts"
            )]
            pub power_allocated_watts: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerAvailableWatts"
            )]
            pub power_available_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerCapacityWatts")]
            pub power_capacity_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerConsumedWatts")]
            pub power_consumed_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLimit")]
            pub power_limit: Option<crate::power::v1_7_1::PowerLimit>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerMetrics")]
            pub power_metrics: Option<crate::power::v1_7_1::PowerMetric>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerRequestedWatts"
            )]
            pub power_requested_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControlActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power::v1_7_1::PowerControlOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerControlOemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerLimit {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CorrectionInMs")]
            pub correction_in_ms: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LimitException")]
            pub limit_exception: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LimitInWatts")]
            pub limit_in_watts: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerLimitException {
            #[default]
            #[serde(rename = "HardPowerOff")]
            HardPowerOff,
            #[serde(rename = "LogEventOnly")]
            LogEventOnly,
            #[serde(rename = "NoAction")]
            NoAction,
            #[serde(rename = "Oem")]
            Oem,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerMetric {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AverageConsumedWatts"
            )]
            pub average_consumed_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IntervalInMin")]
            pub interval_in_min: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxConsumedWatts")]
            pub max_consumed_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinConsumedWatts")]
            pub min_consumed_watts: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupply {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power::v1_7_1::PowerSupplyActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EfficiencyPercent")]
            pub efficiency_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputRanges")]
            pub input_ranges: Option<Vec<crate::power::v1_7_1::InputRange>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LastPowerOutputWatts"
            )]
            pub last_power_output_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LineInputVoltage")]
            pub line_input_voltage: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LineInputVoltageType"
            )]
            pub line_input_voltage_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerCapacityWatts")]
            pub power_capacity_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerInputWatts")]
            pub power_input_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOutputWatts")]
            pub power_output_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplyType")]
            pub power_supply_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupplyActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power::v1_7_1::PowerSupplyOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupplyOemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupplyReset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupplyResetRequestBody {
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerSupplyType {
            #[default]
            #[serde(rename = "AC")]
            AC,
            #[serde(rename = "ACorDC")]
            ACorDC,
            #[serde(rename = "DC")]
            DC,
            #[serde(rename = "Unknown")]
            Unknown,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Voltage {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power::v1_7_1::VoltageActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdCritical"
            )]
            pub lower_threshold_critical: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdFatal"
            )]
            pub lower_threshold_fatal: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdNonCritical"
            )]
            pub lower_threshold_non_critical: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxReadingRange")]
            pub max_reading_range: Option<f64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinReadingRange")]
            pub min_reading_range: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingVolts")]
            pub reading_volts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorNumber")]
            pub sensor_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdCritical"
            )]
            pub upper_threshold_critical: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdFatal"
            )]
            pub upper_threshold_fatal: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdNonCritical"
            )]
            pub upper_threshold_non_critical: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VoltageActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power::v1_7_1::VoltageOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VoltageOemActions {}
    }
}
pub mod power_distribution {
    pub mod v1_3_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_distribution::v1_3_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#PowerDistribution.TransferControl"
            )]
            pub power_distribution_transfer_control:
                Option<crate::power_distribution::v1_3_1::TransferControl>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Facility")]
            pub facility: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerDistribution {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_distribution::v1_3_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Branches")]
            pub branches: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "EquipmentType")]
            pub equipment_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Feeders")]
            pub feeders: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::power_distribution::v1_3_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Mains")]
            pub mains: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MainsRedundancy")]
            pub mains_redundancy: Option<crate::redundancy::RedundantGroup>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutletGroups")]
            pub outlet_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Outlets")]
            pub outlets: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplies")]
            pub power_supplies: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerSupplyRedundancy"
            )]
            pub power_supply_redundancy: Option<Vec<crate::redundancy::RedundantGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sensors")]
            pub sensors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Subfeeds")]
            pub subfeeds: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferConfiguration"
            )]
            pub transfer_configuration:
                Option<crate::power_distribution::v1_3_1::TransferConfiguration>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferCriteria")]
            pub transfer_criteria: Option<crate::power_distribution::v1_3_1::TransferCriteria>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerEquipmentType {
            #[default]
            #[serde(rename = "AutomaticTransferSwitch")]
            AutomaticTransferSwitch,
            #[serde(rename = "BatteryShelf")]
            BatteryShelf,
            #[serde(rename = "Bus")]
            Bus,
            #[serde(rename = "FloorPDU")]
            FloorPDU,
            #[serde(rename = "ManualTransferSwitch")]
            ManualTransferSwitch,
            #[serde(rename = "PowerShelf")]
            PowerShelf,
            #[serde(rename = "RackPDU")]
            RackPDU,
            #[serde(rename = "Switchgear")]
            Switchgear,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TransferConfiguration {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ActiveMainsId")]
            pub active_mains_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AutoTransferEnabled"
            )]
            pub auto_transfer_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ClosedTransitionAllowed"
            )]
            pub closed_transition_allowed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ClosedTransitionTimeoutSeconds"
            )]
            pub closed_transition_timeout_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PreferredMainsId")]
            pub preferred_mains_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RetransferDelaySeconds"
            )]
            pub retransfer_delay_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RetransferEnabled")]
            pub retransfer_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferDelaySeconds"
            )]
            pub transfer_delay_seconds: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferInhibit")]
            pub transfer_inhibit: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TransferControl {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TransferControlRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TransferCriteria {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverNominalFrequencyHz"
            )]
            pub over_nominal_frequency_hz: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverVoltageRMSPercentage"
            )]
            pub over_voltage_rms_percentage: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferSensitivity"
            )]
            pub transfer_sensitivity: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnderNominalFrequencyHz"
            )]
            pub under_nominal_frequency_hz: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UnderVoltageRMSPercentage"
            )]
            pub under_voltage_rms_percentage: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TransferSensitivityType {
            #[default]
            #[serde(rename = "High")]
            High,
            #[serde(rename = "Low")]
            Low,
            #[serde(rename = "Medium")]
            Medium,
        }
    }
}
pub mod power_distribution_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PowerDistributionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod power_distribution_metrics {
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_distribution_metrics::v1_3_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#PowerDistributionMetrics.ResetMetrics"
            )]
            pub power_distribution_metrics_reset_metrics:
                Option<crate::power_distribution_metrics::v1_3_0::ResetMetrics>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerDistributionMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AbsoluteHumidity")]
            pub absolute_humidity: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_distribution_metrics::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HumidityPercent")]
            pub humidity_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerLoadPercent")]
            pub power_load_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerWatts")]
            pub power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TemperatureCelsius")]
            pub temperature_celsius: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
    }
}
pub mod power_domain {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_domain::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalBuses")]
            pub electrical_buses: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalBuses@odata.count"
            )]
            pub electrical_buses_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FloorPDUs")]
            pub floor_pd_us: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FloorPDUs@odata.count"
            )]
            pub floor_pd_us_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerShelves")]
            pub power_shelves: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerShelves@odata.count"
            )]
            pub power_shelves_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackPDUs")]
            pub rack_pd_us: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RackPDUs@odata.count"
            )]
            pub rack_pd_us_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switchgear")]
            pub switchgear: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Switchgear@odata.count"
            )]
            pub switchgear_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferSwitches")]
            pub transfer_switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferSwitches@odata.count"
            )]
            pub transfer_switches_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerDomain {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_domain::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::power_domain::v1_2_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
    }
}
pub mod power_domain_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PowerDomainCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod power_equipment {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_equipment::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerEquipment {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_equipment::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalBuses")]
            pub electrical_buses: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FloorPDUs")]
            pub floor_pd_us: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::power_equipment::v1_2_0::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerShelves")]
            pub power_shelves: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackPDUs")]
            pub rack_pd_us: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Switchgear")]
            pub switchgear: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferSwitches")]
            pub transfer_switches: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod power_subsystem {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_subsystem::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerAllocation {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedWatts")]
            pub allocated_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RequestedWatts")]
            pub requested_watts: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSubsystem {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_subsystem::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Allocation")]
            pub allocation: Option<crate::power_subsystem::v1_1_0::PowerAllocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Batteries")]
            pub batteries: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityWatts")]
            pub capacity_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplies")]
            pub power_supplies: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerSupplyRedundancy"
            )]
            pub power_supply_redundancy: Option<Vec<crate::redundancy::RedundantGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
    }
}
pub mod power_supply {
    pub mod v1_5_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_supply::v1_5_1::OemActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#PowerSupply.Reset")]
            pub power_supply_reset: Option<crate::power_supply::v1_5_1::Reset>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EfficiencyRating {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EfficiencyPercent")]
            pub efficiency_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LoadPercent")]
            pub load_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InputRange {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityWatts")]
            pub capacity_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NominalVoltageType")]
            pub nominal_voltage_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LineStatus {
            #[default]
            #[serde(rename = "LossOfInput")]
            LossOfInput,
            #[serde(rename = "Normal")]
            Normal,
            #[serde(rename = "OutOfRange")]
            OutOfRange,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Outlet")]
            pub outlet: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOutlets")]
            pub power_outlets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerOutlets@odata.count"
            )]
            pub power_outlets_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PoweringChassis")]
            pub powering_chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PoweringChassis@odata.count"
            )]
            pub powering_chassis_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OutputRail {
            #[serde(skip_serializing_if = "Option::is_none", rename = "NominalVoltage")]
            pub nominal_voltage: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupply {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_supply::v1_5_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EfficiencyRatings")]
            pub efficiency_ratings: Option<Vec<crate::power_supply::v1_5_1::EfficiencyRating>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceManagerURIs"
            )]
            pub electrical_source_manager_ur_is: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ElectricalSourceNames"
            )]
            pub electrical_source_names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InputNominalVoltageType"
            )]
            pub input_nominal_voltage_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputRanges")]
            pub input_ranges: Option<Vec<crate::power_supply::v1_5_1::InputRange>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LineInputStatus")]
            pub line_input_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::power_supply::v1_5_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OutputNominalVoltageType"
            )]
            pub output_nominal_voltage_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutputRails")]
            pub output_rails: Option<Vec<crate::power_supply::v1_5_1::OutputRail>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseWiringType")]
            pub phase_wiring_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlugType")]
            pub plug_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerCapacityWatts")]
            pub power_capacity_watts: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerSupplyType")]
            pub power_supply_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PowerSupplyType {
            #[default]
            #[serde(rename = "AC")]
            AC,
            #[serde(rename = "ACorDC")]
            ACorDC,
            #[serde(rename = "DC")]
            DC,
            #[serde(rename = "DCRegulator")]
            DCRegulator,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
    }
}
pub mod power_supply_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PowerSupplyCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod power_supply_metrics {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::power_supply_metrics::v1_1_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#PowerSupplyMetrics.ResetMetrics"
            )]
            pub power_supply_metrics_reset_metrics:
                Option<crate::power_supply_metrics::v1_1_0::ResetMetrics>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PowerSupplyMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::power_supply_metrics::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnergykWh")]
            pub energyk_wh: Option<crate::sensor::SensorEnergykWhExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanSpeedPercent")]
            pub fan_speed_percent: Option<crate::sensor::SensorFanExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanSpeedsPercent")]
            pub fan_speeds_percent: Option<Vec<crate::sensor::SensorFanArrayExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FanSpeedsPercent@odata.count"
            )]
            pub fan_speeds_percent_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FrequencyHz")]
            pub frequency_hz: Option<crate::sensor::SensorExcerpt>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputCurrentAmps")]
            pub input_current_amps: Option<crate::sensor::SensorCurrentExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputPowerWatts")]
            pub input_power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InputVoltage")]
            pub input_voltage: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OutputPowerWatts")]
            pub output_power_watts: Option<crate::sensor::SensorPowerExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RailCurrentAmps")]
            pub rail_current_amps: Option<Vec<crate::sensor::SensorCurrentExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RailCurrentAmps@odata.count"
            )]
            pub rail_current_amps_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RailPowerWatts")]
            pub rail_power_watts: Option<Vec<crate::sensor::SensorPowerExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RailPowerWatts@odata.count"
            )]
            pub rail_power_watts_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RailVoltage")]
            pub rail_voltage: Option<Vec<crate::sensor::SensorVoltageExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RailVoltage@odata.count"
            )]
            pub rail_voltage_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TemperatureCelsius")]
            pub temperature_celsius: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
    }
}
pub mod privileges {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PrivilegeType {
        #[default]
        #[serde(rename = "AdministrateStorage")]
        AdministrateStorage,
        #[serde(rename = "AdministrateSystems")]
        AdministrateSystems,
        #[serde(rename = "ConfigureComponents")]
        ConfigureComponents,
        #[serde(rename = "ConfigureCompositionInfrastructure")]
        ConfigureCompositionInfrastructure,
        #[serde(rename = "ConfigureManager")]
        ConfigureManager,
        #[serde(rename = "ConfigureSelf")]
        ConfigureSelf,
        #[serde(rename = "ConfigureUsers")]
        ConfigureUsers,
        #[serde(rename = "Login")]
        Login,
        #[serde(rename = "NoAuth")]
        NoAuth,
        #[serde(rename = "OperateStorageBackup")]
        OperateStorageBackup,
        #[serde(rename = "OperateSystems")]
        OperateSystems,
    }
}
pub mod processor {
    pub mod v1_18_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::processor::v1_18_0::OemActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Processor.Reset")]
            pub processor_reset: Option<crate::processor::v1_18_0::Reset>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Processor.ResetToDefaults"
            )]
            pub processor_reset_to_defaults: Option<crate::processor::v1_18_0::ResetToDefaults>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BaseSpeedPriorityState {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EthernetInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLanes")]
            pub max_lanes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSpeedMbps")]
            pub max_speed_mbps: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FPGA {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExternalInterfaces")]
            pub external_interfaces: Option<Vec<crate::processor::v1_18_0::ProcessorInterface>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareId")]
            pub firmware_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FirmwareManufacturer"
            )]
            pub firmware_manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FpgaType")]
            pub fpga_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostInterface")]
            pub host_interface: Option<crate::processor::v1_18_0::ProcessorInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeVirtualFunctions"
            )]
            pub pcie_virtual_functions: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProgrammableFromHost"
            )]
            pub programmable_from_host: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReconfigurationSlots"
            )]
            pub reconfiguration_slots:
                Option<Vec<crate::processor::v1_18_0::FpgaReconfigurationSlot>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FpgaReconfigurationSlot {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccelerationFunction"
            )]
            pub acceleration_function: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProgrammableFromHost"
            )]
            pub programmable_from_host: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SlotId")]
            pub slot_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FpgaType {
            #[default]
            #[serde(rename = "Discrete")]
            Discrete,
            #[serde(rename = "Integrated")]
            Integrated,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum InstructionSet {
            #[default]
            #[serde(rename = "ARM-A32")]
            ARMA32,
            #[serde(rename = "ARM-A64")]
            ARMA64,
            #[serde(rename = "IA-64")]
            IAN64,
            #[serde(rename = "MIPS32")]
            MIPS32,
            #[serde(rename = "MIPS64")]
            MIPS64,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PowerISA")]
            PowerISA,
            #[serde(rename = "x86")]
            X86,
            #[serde(rename = "x86-64")]
            X86N64,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedProcessors"
            )]
            pub connected_processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConnectedProcessors@odata.count"
            )]
            pub connected_processors_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FabricAdapters")]
            pub fabric_adapters: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FabricAdapters@odata.count"
            )]
            pub fabric_adapters_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GraphicsController")]
            pub graphics_controller: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory@odata.count")]
            pub memory_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MemorySummary {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ECCModeEnabled")]
            pub ecc_mode_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalMemorySizeMiB")]
            pub total_memory_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Processor {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AccelerationFunctions"
            )]
            pub acceleration_functions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::processor::v1_18_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdditionalFirmwareVersions"
            )]
            pub additional_firmware_versions: Option<crate::software_inventory::AdditionalVersions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AppliedOperatingConfig"
            )]
            pub applied_operating_config: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseSpeedMHz")]
            pub base_speed_mhz: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "BaseSpeedPriorityState"
            )]
            pub base_speed_priority_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Family")]
            pub family: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FPGA")]
            pub fpga: Option<crate::processor::v1_18_0::FPGA>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HighSpeedCoreIDs")]
            pub high_speed_core_ids: Option<Vec<i64>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InstructionSet")]
            pub instruction_set: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::processor::v1_18_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxSpeedMHz")]
            pub max_speed_mhz: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxTDPWatts")]
            pub max_tdp_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemorySummary")]
            pub memory_summary: Option<crate::processor::v1_18_0::MemorySummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinSpeedMHz")]
            pub min_speed_mhz: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingConfigs")]
            pub operating_configs: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingSpeedMHz")]
            pub operating_speed_mhz: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OperatingSpeedRangeMHz"
            )]
            pub operating_speed_range_mhz: Option<crate::control::ControlRangeExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProcessorArchitecture"
            )]
            pub processor_architecture: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProcessorId")]
            pub processor_id: Option<crate::processor::v1_18_0::ProcessorId>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProcessorIndex")]
            pub processor_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProcessorMemory")]
            pub processor_memory: Option<Vec<crate::processor::v1_18_0::ProcessorMemory>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProcessorType")]
            pub processor_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replaceable")]
            pub replaceable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Socket")]
            pub socket: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedLimitMHz")]
            pub speed_limit_mhz: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedLocked")]
            pub speed_locked: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubProcessors")]
            pub sub_processors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SystemInterface")]
            pub system_interface: Option<crate::processor::v1_18_0::ProcessorInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TDPWatts")]
            pub tdp_watts: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThrottleCauses")]
            pub throttle_causes: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Throttled")]
            pub throttled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalCores")]
            pub total_cores: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalEnabledCores")]
            pub total_enabled_cores: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalThreads")]
            pub total_threads: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TurboState")]
            pub turbo_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ProcessorArchitecture {
            #[default]
            #[serde(rename = "ARM")]
            ARM,
            #[serde(rename = "IA-64")]
            IAN64,
            #[serde(rename = "MIPS")]
            MIPS,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Power")]
            Power,
            #[serde(rename = "x86")]
            X86,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorId {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EffectiveFamily")]
            pub effective_family: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EffectiveModel")]
            pub effective_model: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IdentificationRegisters"
            )]
            pub identification_registers: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MicrocodeInfo")]
            pub microcode_info: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProtectedIdentificationNumber"
            )]
            pub protected_identification_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Step")]
            pub step: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VendorId")]
            pub vendor_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ethernet")]
            pub ethernet: Option<crate::processor::v1_18_0::EthernetInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceType")]
            pub interface_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIe")]
            pub pcie: Option<crate::pcie_device::PCIeInterface>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorMemory {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityMiB")]
            pub capacity_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IntegratedMemory")]
            pub integrated_memory: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryType")]
            pub memory_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedMHz")]
            pub speed_mhz: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ProcessorMemoryType {
            #[default]
            #[serde(rename = "Cache")]
            Cache,
            #[serde(rename = "DDR")]
            DDR,
            #[serde(rename = "DDR2")]
            DDR2,
            #[serde(rename = "DDR3")]
            DDR3,
            #[serde(rename = "DDR4")]
            DDR4,
            #[serde(rename = "DDR5")]
            DDR5,
            #[serde(rename = "Flash")]
            Flash,
            #[serde(rename = "GDDR")]
            GDDR,
            #[serde(rename = "GDDR2")]
            GDDR2,
            #[serde(rename = "GDDR3")]
            GDDR3,
            #[serde(rename = "GDDR4")]
            GDDR4,
            #[serde(rename = "GDDR5")]
            GDDR5,
            #[serde(rename = "GDDR5X")]
            GDDR5X,
            #[serde(rename = "GDDR6")]
            GDDR6,
            #[serde(rename = "HBM1")]
            HBM1,
            #[serde(rename = "HBM2")]
            HBM2,
            #[serde(rename = "HBM2E")]
            HBM2E,
            #[serde(rename = "HBM3")]
            HBM3,
            #[serde(rename = "L1Cache")]
            L1Cache,
            #[serde(rename = "L2Cache")]
            L2Cache,
            #[serde(rename = "L3Cache")]
            L3Cache,
            #[serde(rename = "L4Cache")]
            L4Cache,
            #[serde(rename = "L5Cache")]
            L5Cache,
            #[serde(rename = "L6Cache")]
            L6Cache,
            #[serde(rename = "L7Cache")]
            L7Cache,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SDRAM")]
            SDRAM,
            #[serde(rename = "SGRAM")]
            SGRAM,
            #[serde(rename = "SRAM")]
            SRAM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ProcessorType {
            #[default]
            #[serde(rename = "Accelerator")]
            Accelerator,
            #[serde(rename = "CPU")]
            CPU,
            #[serde(rename = "Core")]
            Core,
            #[serde(rename = "DSP")]
            DSP,
            #[serde(rename = "FPGA")]
            FPGA,
            #[serde(rename = "GPU")]
            GPU,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Thread")]
            Thread,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SystemInterfaceType {
            #[default]
            #[serde(rename = "AMBA")]
            AMBA,
            #[serde(rename = "CCIX")]
            CCIX,
            #[serde(rename = "CXL")]
            CXL,
            #[serde(rename = "Ethernet")]
            Ethernet,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PCIe")]
            PCIe,
            #[serde(rename = "QPI")]
            QPI,
            #[serde(rename = "UPI")]
            UPI,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ThrottleCause {
            #[default]
            #[serde(rename = "ClockLimit")]
            ClockLimit,
            #[serde(rename = "ManagementDetectedFault")]
            ManagementDetectedFault,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "PowerLimit")]
            PowerLimit,
            #[serde(rename = "ThermalLimit")]
            ThermalLimit,
            #[serde(rename = "Unknown")]
            Unknown,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TurboState {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
        }
    }
}
pub mod processor_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ProcessorCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod processor_metrics {
    pub mod v1_6_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::processor_metrics::v1_6_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ProcessorMetrics.ClearCurrentPeriod"
            )]
            pub processor_metrics_clear_current_period:
                Option<crate::processor_metrics::v1_6_1::ClearCurrentPeriod>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CStateResidency {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Level")]
            pub level: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResidencyPercent")]
            pub residency_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheMiss")]
            pub cache_miss: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CacheMissesPerInstruction"
            )]
            pub cache_misses_per_instruction: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HitRatio")]
            pub hit_ratio: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Level")]
            pub level: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OccupancyBytes")]
            pub occupancy_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OccupancyPercent")]
            pub occupancy_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheMetricsTotal {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentPeriod")]
            pub current_period: Option<crate::processor_metrics::v1_6_1::CurrentPeriod>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifeTime")]
            pub life_time: Option<crate::processor_metrics::v1_6_1::LifeTime>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriod {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriodRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CoreMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CStateResidency")]
            pub c_state_residency: Option<Vec<crate::processor_metrics::v1_6_1::CStateResidency>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreCache")]
            pub core_cache: Option<Vec<crate::processor_metrics::v1_6_1::CacheMetrics>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreId")]
            pub core_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableCoreErrorCount"
            )]
            pub correctable_core_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableOtherErrorCount"
            )]
            pub correctable_other_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InstructionsPerCycle"
            )]
            pub instructions_per_cycle: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IOStallCount")]
            pub io_stall_count: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MemoryStallCount")]
            pub memory_stall_count: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableCoreErrorCount"
            )]
            pub uncorrectable_core_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableOtherErrorCount"
            )]
            pub uncorrectable_other_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UnhaltedCycles")]
            pub unhalted_cycles: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CurrentPeriod {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LifeTime {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProcessorMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::processor_metrics::v1_6_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AverageFrequencyMHz"
            )]
            pub average_frequency_mhz: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BandwidthPercent")]
            pub bandwidth_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cache")]
            pub cache: Option<Vec<crate::processor_metrics::v1_6_1::CacheMetrics>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheMetricsTotal")]
            pub cache_metrics_total: Option<crate::processor_metrics::v1_6_1::CacheMetricsTotal>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsumedPowerWatt")]
            pub consumed_power_watt: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreMetrics")]
            pub core_metrics: Option<Vec<crate::processor_metrics::v1_6_1::CoreMetrics>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoreVoltage")]
            pub core_voltage: Option<crate::sensor::SensorVoltageExcerpt>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableCoreErrorCount"
            )]
            pub correctable_core_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableOtherErrorCount"
            )]
            pub correctable_other_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FrequencyRatio")]
            pub frequency_ratio: Option<f64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KernelPercent")]
            pub kernel_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocalMemoryBandwidthBytes"
            )]
            pub local_memory_bandwidth_bytes: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperatingSpeedMHz")]
            pub operating_speed_mhz: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeErrors")]
            pub pcie_errors: Option<crate::pcie_device::PCIeErrors>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PowerLimitThrottleDuration"
            )]
            pub power_limit_throttle_duration: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteMemoryBandwidthBytes"
            )]
            pub remote_memory_bandwidth_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TemperatureCelsius")]
            pub temperature_celsius: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalLimitThrottleDuration"
            )]
            pub thermal_limit_throttle_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThrottlingCelsius")]
            pub throttling_celsius: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableCoreErrorCount"
            )]
            pub uncorrectable_core_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableOtherErrorCount"
            )]
            pub uncorrectable_other_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserPercent")]
            pub user_percent: Option<f64>,
        }
    }
}
pub mod protocol {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum Protocol {
        #[default]
        #[serde(rename = "AHCI")]
        AHCI,
        #[serde(rename = "CXL")]
        CXL,
        #[serde(rename = "DVI")]
        DVI,
        #[serde(rename = "DisplayPort")]
        DisplayPort,
        #[serde(rename = "Ethernet")]
        Ethernet,
        #[serde(rename = "FC")]
        FC,
        #[serde(rename = "FCP")]
        FCP,
        #[serde(rename = "FCoE")]
        FCoE,
        #[serde(rename = "FICON")]
        FICON,
        #[serde(rename = "FTP")]
        FTP,
        #[serde(rename = "GenZ")]
        GenZ,
        #[serde(rename = "HDMI")]
        HDMI,
        #[serde(rename = "HTTP")]
        HTTP,
        #[serde(rename = "HTTPS")]
        HTTPS,
        #[serde(rename = "I2C")]
        I2C,
        #[serde(rename = "InfiniBand")]
        InfiniBand,
        #[serde(rename = "MultiProtocol")]
        MultiProtocol,
        #[serde(rename = "NFSv3")]
        NFSv3,
        #[serde(rename = "NFSv4")]
        NFSv4,
        #[serde(rename = "NVLink")]
        NVLink,
        #[serde(rename = "NVMe")]
        NVMe,
        #[serde(rename = "NVMeOverFabrics")]
        NVMeOverFabrics,
        #[serde(rename = "OEM")]
        OEM,
        #[serde(rename = "PCIe")]
        PCIe,
        #[serde(rename = "RoCE")]
        RoCE,
        #[serde(rename = "RoCEv2")]
        RoCEv2,
        #[serde(rename = "SAS")]
        SAS,
        #[serde(rename = "SATA")]
        SATA,
        #[serde(rename = "SFTP")]
        SFTP,
        #[serde(rename = "SMB")]
        SMB,
        #[serde(rename = "TCP")]
        TCP,
        #[serde(rename = "TFTP")]
        TFTP,
        #[serde(rename = "UDP")]
        UDP,
        #[serde(rename = "UHCI")]
        UHCI,
        #[serde(rename = "USB")]
        USB,
        #[serde(rename = "VGA")]
        VGA,
        #[serde(rename = "iSCSI")]
        ISCSI,
        #[serde(rename = "iWARP")]
        IWARP,
    }
}
pub mod pump {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::pump::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Pump {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::pump::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Filters")]
            pub filters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProductionDate")]
            pub production_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PumpSpeedPercent")]
            pub pump_speed_percent: Option<crate::sensor::SensorPumpExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PumpType")]
            pub pump_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceHours")]
            pub service_hours: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PumpType {
            #[default]
            #[serde(rename = "Compressor")]
            Compressor,
            #[serde(rename = "Liquid")]
            Liquid,
        }
    }
}
pub mod pump_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct PumpCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod redundancy {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Redundancy {
        RedundancyV1N0N10Redundancy(crate::redundancy::v1_0_10::Redundancy),
        RedundancyV1N1N8Redundancy(crate::redundancy::v1_1_8::Redundancy),
        RedundancyV1N2N6Redundancy(crate::redundancy::v1_2_6::Redundancy),
        RedundancyV1N3N6Redundancy(crate::redundancy::v1_3_6::Redundancy),
        RedundancyV1N4N1Redundancy(crate::redundancy::v1_4_1::Redundancy),
        OdataV4IdRef(crate::odata_v4::IdRef),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum RedundantGroup {
        RedundancyV1N4N1RedundantGroup(crate::redundancy::v1_4_1::RedundantGroup),
    }
    pub mod v1_0_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Redundancy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumSupported")]
            pub max_num_supported: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(rename = "MinNumNeeded")]
            pub min_num_needed: Option<i64>,
            #[serde(rename = "Mode")]
            pub mode: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "RedundancySet")]
            pub redundancy_set: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancySet@odata.count"
            )]
            pub redundancy_set_odata_count: Option<i64>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyMode {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "N+m")]
            NM,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
    }
    pub mod v1_1_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Redundancy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumSupported")]
            pub max_num_supported: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(rename = "MinNumNeeded")]
            pub min_num_needed: Option<i64>,
            #[serde(rename = "Mode")]
            pub mode: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RedundancyEnabled")]
            pub redundancy_enabled: Option<bool>,
            #[serde(rename = "RedundancySet")]
            pub redundancy_set: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancySet@odata.count"
            )]
            pub redundancy_set_odata_count: Option<i64>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyMode {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "N+m")]
            NM,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
    }
    pub mod v1_2_6 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::redundancy::v1_2_6::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Redundancy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::redundancy::v1_2_6::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumSupported")]
            pub max_num_supported: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(rename = "MinNumNeeded")]
            pub min_num_needed: Option<i64>,
            #[serde(rename = "Mode")]
            pub mode: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RedundancyEnabled")]
            pub redundancy_enabled: Option<bool>,
            #[serde(rename = "RedundancySet")]
            pub redundancy_set: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancySet@odata.count"
            )]
            pub redundancy_set_odata_count: Option<i64>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyMode {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "N+m")]
            NM,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
    }
    pub mod v1_3_6 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::redundancy::v1_3_6::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Redundancy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::redundancy::v1_3_6::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumSupported")]
            pub max_num_supported: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(rename = "MinNumNeeded")]
            pub min_num_needed: Option<i64>,
            #[serde(rename = "Mode")]
            pub mode: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RedundancyEnabled")]
            pub redundancy_enabled: Option<bool>,
            #[serde(rename = "RedundancySet")]
            pub redundancy_set: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancySet@odata.count"
            )]
            pub redundancy_set_odata_count: Option<i64>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyMode {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "N+m")]
            NM,
            #[serde(rename = "NotRedundant")]
            NotRedundant,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
    }
    pub mod v1_4_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::redundancy::v1_4_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Redundancy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::redundancy::v1_4_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxNumSupported")]
            pub max_num_supported: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(rename = "MinNumNeeded")]
            pub min_num_needed: Option<i64>,
            #[serde(rename = "Mode")]
            pub mode: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RedundancyEnabled")]
            pub redundancy_enabled: Option<bool>,
            #[serde(rename = "RedundancySet")]
            pub redundancy_set: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancySet@odata.count"
            )]
            pub redundancy_set_odata_count: Option<i64>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyMode {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "N+m")]
            NM,
            #[serde(rename = "NotRedundant")]
            NotRedundant,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RedundancyType {
            #[default]
            #[serde(rename = "Failover")]
            Failover,
            #[serde(rename = "NPlusM")]
            NPlusM,
            #[serde(rename = "NotRedundant")]
            NotRedundant,
            #[serde(rename = "Sharing")]
            Sharing,
            #[serde(rename = "Sparing")]
            Sparing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RedundantGroup {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxSupportedInGroup"
            )]
            pub max_supported_in_group: Option<i64>,
            #[serde(rename = "MinNeededInGroup")]
            pub min_needed_in_group: Option<i64>,
            #[serde(rename = "RedundancyGroup")]
            pub redundancy_group: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RedundancyGroup@odata.count"
            )]
            pub redundancy_group_odata_count: Option<i64>,
            #[serde(rename = "RedundancyType")]
            pub redundancy_type: Option<String>,
            #[serde(rename = "Status")]
            pub status: crate::resource::Status,
        }
    }
}
pub mod registered_client {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::registered_client::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ClientType {
            #[default]
            #[serde(rename = "Configure")]
            Configure,
            #[serde(rename = "Monitor")]
            Monitor,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ManagedResource {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "IncludesSubordinates"
            )]
            pub includes_subordinates: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedResourceURI")]
            pub managed_resource_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PreferExclusive")]
            pub prefer_exclusive: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RegisteredClient {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::registered_client::v1_1_0::Actions>,
            #[serde(rename = "ClientType")]
            pub client_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientURI")]
            pub client_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Context")]
            pub context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedDate")]
            pub created_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExpirationDate")]
            pub expiration_date: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedResources")]
            pub managed_resources: Option<Vec<crate::registered_client::v1_1_0::ManagedResource>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubContext")]
            pub sub_context: Option<String>,
        }
    }
}
pub mod registered_client_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct RegisteredClientCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod reservoir {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::reservoir::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reservoir {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::reservoir::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityLiters")]
            pub capacity_liters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Coolant")]
            pub coolant: Option<crate::cooling_loop::Coolant>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Filters")]
            pub filters: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FluidLevelPercent")]
            pub fluid_level_percent: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FluidLevelStatus")]
            pub fluid_level_status: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InternalPressurekPa"
            )]
            pub internal_pressurek_pa: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReservoirType")]
            pub reservoir_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserLabel")]
            pub user_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReservoirType {
            #[default]
            #[serde(rename = "Immersion")]
            Immersion,
            #[serde(rename = "Inline")]
            Inline,
            #[serde(rename = "Overflow")]
            Overflow,
            #[serde(rename = "Reserve")]
            Reserve,
        }
    }
}
pub mod reservoir_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ReservoirCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod resource {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct Condition {
        #[serde(skip_serializing_if = "Option::is_none", rename = "LogEntry")]
        pub log_entry: Option<crate::odata_v4::IdRef>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Message")]
        pub message: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "MessageArgs")]
        pub message_args: Option<Vec<String>>,
        #[serde(rename = "MessageId")]
        pub message_id: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "OriginOfCondition")]
        pub origin_of_condition: Option<crate::odata_v4::IdRef>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Resolution")]
        pub resolution: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
        pub severity: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
        pub timestamp: Option<String>,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum Health {
        #[default]
        #[serde(rename = "Critical")]
        Critical,
        #[serde(rename = "OK")]
        OK,
        #[serde(rename = "Warning")]
        Warning,
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Identifier {
        ResourceV1N10N5Identifier(crate::resource::v1_10_5::Identifier),
        ResourceV1N11N4Identifier(crate::resource::v1_11_4::Identifier),
        ResourceV1N12N3Identifier(crate::resource::v1_12_3::Identifier),
        ResourceV1N13N2Identifier(crate::resource::v1_13_2::Identifier),
        ResourceV1N14N1Identifier(crate::resource::v1_14_1::Identifier),
        ResourceV1N15N0Identifier(crate::resource::v1_15_0::Identifier),
        ResourceV1N16N0Identifier(crate::resource::v1_16_0::Identifier),
        ResourceV1N1N15Identifier(crate::resource::v1_1_15::Identifier),
        ResourceV1N2N14Identifier(crate::resource::v1_2_14::Identifier),
        ResourceV1N3N13Identifier(crate::resource::v1_3_13::Identifier),
        ResourceV1N4N12Identifier(crate::resource::v1_4_12::Identifier),
        ResourceV1N5N11Identifier(crate::resource::v1_5_11::Identifier),
        ResourceV1N6N11Identifier(crate::resource::v1_6_11::Identifier),
        ResourceV1N7N10Identifier(crate::resource::v1_7_10::Identifier),
        ResourceV1N8N10Identifier(crate::resource::v1_8_10::Identifier),
        ResourceV1N9N8Identifier(crate::resource::v1_9_8::Identifier),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum IndicatorLED {
        #[default]
        #[serde(rename = "Blinking")]
        Blinking,
        #[serde(rename = "Lit")]
        Lit,
        #[serde(rename = "Off")]
        Off,
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Location {
        ResourceV1N10N5Location(crate::resource::v1_10_5::Location),
        ResourceV1N11N4Location(crate::resource::v1_11_4::Location),
        ResourceV1N12N3Location(crate::resource::v1_12_3::Location),
        ResourceV1N13N2Location(crate::resource::v1_13_2::Location),
        ResourceV1N14N1Location(crate::resource::v1_14_1::Location),
        ResourceV1N15N0Location(crate::resource::v1_15_0::Location),
        ResourceV1N16N0Location(crate::resource::v1_16_0::Location),
        ResourceV1N1N15Location(crate::resource::v1_1_15::Location),
        ResourceV1N2N14Location(crate::resource::v1_2_14::Location),
        ResourceV1N3N13Location(crate::resource::v1_3_13::Location),
        ResourceV1N4N12Location(crate::resource::v1_4_12::Location),
        ResourceV1N5N11Location(crate::resource::v1_5_11::Location),
        ResourceV1N6N11Location(crate::resource::v1_6_11::Location),
        ResourceV1N7N10Location(crate::resource::v1_7_10::Location),
        ResourceV1N8N10Location(crate::resource::v1_8_10::Location),
        ResourceV1N9N8Location(crate::resource::v1_9_8::Location),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct Oem {}
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum PowerState {
        #[default]
        #[serde(rename = "Off")]
        Off,
        #[serde(rename = "On")]
        On,
        #[serde(rename = "Paused")]
        Paused,
        #[serde(rename = "PoweringOff")]
        PoweringOff,
        #[serde(rename = "PoweringOn")]
        PoweringOn,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ResetType {
        #[default]
        #[serde(rename = "ForceOff")]
        ForceOff,
        #[serde(rename = "ForceOn")]
        ForceOn,
        #[serde(rename = "ForceRestart")]
        ForceRestart,
        #[serde(rename = "GracefulRestart")]
        GracefulRestart,
        #[serde(rename = "GracefulShutdown")]
        GracefulShutdown,
        #[serde(rename = "Nmi")]
        Nmi,
        #[serde(rename = "On")]
        On,
        #[serde(rename = "Pause")]
        Pause,
        #[serde(rename = "PowerCycle")]
        PowerCycle,
        #[serde(rename = "PushPowerButton")]
        PushPowerButton,
        #[serde(rename = "Resume")]
        Resume,
        #[serde(rename = "Suspend")]
        Suspend,
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Resource {
        ResourceV1N0N13Resource(crate::resource::v1_0_13::Resource),
        ResourceV1N10N5Resource(crate::resource::v1_10_5::Resource),
        ResourceV1N11N4Resource(crate::resource::v1_11_4::Resource),
        ResourceV1N12N3Resource(crate::resource::v1_12_3::Resource),
        ResourceV1N13N2Resource(crate::resource::v1_13_2::Resource),
        ResourceV1N14N1Resource(crate::resource::v1_14_1::Resource),
        ResourceV1N15N0Resource(crate::resource::v1_15_0::Resource),
        ResourceV1N16N0Resource(crate::resource::v1_16_0::Resource),
        ResourceV1N1N15Resource(crate::resource::v1_1_15::Resource),
        ResourceV1N2N14Resource(crate::resource::v1_2_14::Resource),
        ResourceV1N3N13Resource(crate::resource::v1_3_13::Resource),
        ResourceV1N4N12Resource(crate::resource::v1_4_12::Resource),
        ResourceV1N5N11Resource(crate::resource::v1_5_11::Resource),
        ResourceV1N6N11Resource(crate::resource::v1_6_11::Resource),
        ResourceV1N7N10Resource(crate::resource::v1_7_10::Resource),
        ResourceV1N8N10Resource(crate::resource::v1_8_10::Resource),
        ResourceV1N9N8Resource(crate::resource::v1_9_8::Resource),
        OdataV4IdRef(crate::odata_v4::IdRef),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum State {
        #[default]
        #[serde(rename = "Absent")]
        Absent,
        #[serde(rename = "Deferring")]
        Deferring,
        #[serde(rename = "Disabled")]
        Disabled,
        #[serde(rename = "Enabled")]
        Enabled,
        #[serde(rename = "InTest")]
        InTest,
        #[serde(rename = "Qualified")]
        Qualified,
        #[serde(rename = "Quiesced")]
        Quiesced,
        #[serde(rename = "StandbyOffline")]
        StandbyOffline,
        #[serde(rename = "StandbySpare")]
        StandbySpare,
        #[serde(rename = "Starting")]
        Starting,
        #[serde(rename = "UnavailableOffline")]
        UnavailableOffline,
        #[serde(rename = "Updating")]
        Updating,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct Status {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Conditions")]
        pub conditions: Option<Vec<crate::resource::Condition>>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Health")]
        pub health: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "HealthRollup")]
        pub health_rollup: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "State")]
        pub state: Option<String>,
    }
    pub mod v1_0_13 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_10_5 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_10_5::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_10_5::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_10_5::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_10_5::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_11_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_11_4::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_11_4::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_11_4::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_11_4::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_12_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_12_3::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_12_3::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_12_3::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_12_3::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Backplane")]
            Backplane,
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_13_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_13_2::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_13_2::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_13_2::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_13_2::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Backplane")]
            Backplane,
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Embedded")]
            Embedded,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_14_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "MACAddress")]
            MACAddress,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_14_1::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_14_1::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_14_1::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_14_1::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Backplane")]
            Backplane,
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Embedded")]
            Embedded,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_15_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "GCXLID")]
            GCXLID,
            #[serde(rename = "MACAddress")]
            MACAddress,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_15_0::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_15_0::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_15_0::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_15_0::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Backplane")]
            Backplane,
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Embedded")]
            Embedded,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_16_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "GCXLID")]
            GCXLID,
            #[serde(rename = "MACAddress")]
            MACAddress,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NGUID")]
            NGUID,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_16_0::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_16_0::PartLocation>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PartLocationContext"
            )]
            pub part_location_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_16_0::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_16_0::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Backplane")]
            Backplane,
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Embedded")]
            Embedded,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_1_15 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_2_14 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_3_13 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_3_13::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_3_13::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_4_12 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_4_12::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_4_12::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_5_11 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_5_11::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_5_11::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_5_11::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_6_11 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_6_11::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_6_11::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_6_11::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_7_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_7_10::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_7_10::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_7_10::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_7_10::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_8_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_8_10::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_8_10::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_8_10::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_8_10::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_9_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ContactInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContactName")]
            pub contact_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EmailAddress")]
            pub email_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhoneNumber")]
            pub phone_number: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DurableNameFormat {
            #[default]
            #[serde(rename = "EUI")]
            EUI,
            #[serde(rename = "FC_WWN")]
            FCWWN,
            #[serde(rename = "NAA")]
            NAA,
            #[serde(rename = "NQN")]
            NQN,
            #[serde(rename = "NSID")]
            NSID,
            #[serde(rename = "UUID")]
            UUID,
            #[serde(rename = "iQN")]
            IQN,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Identifier {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableName")]
            pub durable_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DurableNameFormat")]
            pub durable_name_format: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Location {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AltitudeMeters")]
            pub altitude_meters: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Contacts")]
            pub contacts: Option<Vec<crate::resource::v1_9_8::ContactInfo>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Info")]
            pub info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InfoFormat")]
            pub info_format: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Latitude")]
            pub latitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Longitude")]
            pub longitude: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartLocation")]
            pub part_location: Option<crate::resource::v1_9_8::PartLocation>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Placement")]
            pub placement: Option<crate::resource::v1_9_8::Placement>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalAddress")]
            pub postal_address: Option<crate::resource::v1_9_8::PostalAddress>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum LocationType {
            #[default]
            #[serde(rename = "Bay")]
            Bay,
            #[serde(rename = "Connector")]
            Connector,
            #[serde(rename = "Slot")]
            Slot,
            #[serde(rename = "Socket")]
            Socket,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Orientation {
            #[default]
            #[serde(rename = "BackToFront")]
            BackToFront,
            #[serde(rename = "BottomToTop")]
            BottomToTop,
            #[serde(rename = "FrontToBack")]
            FrontToBack,
            #[serde(rename = "LeftToRight")]
            LeftToRight,
            #[serde(rename = "RightToLeft")]
            RightToLeft,
            #[serde(rename = "TopToBottom")]
            TopToBottom,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PartLocation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationOrdinalValue"
            )]
            pub location_ordinal_value: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LocationType")]
            pub location_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Orientation")]
            pub orientation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reference")]
            pub reference: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceLabel")]
            pub service_label: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Placement {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Rack")]
            pub rack: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffset")]
            pub rack_offset: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RackOffsetUnits")]
            pub rack_offset_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Row")]
            pub row: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct PostalAddress {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalCode")]
            pub additional_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalInfo")]
            pub additional_info: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Building")]
            pub building: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "City")]
            pub city: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Community")]
            pub community: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Country")]
            pub country: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "District")]
            pub district: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Division")]
            pub division: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Floor")]
            pub floor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "GPSCoords")]
            pub gps_coords: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumber")]
            pub house_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HouseNumberSuffix")]
            pub house_number_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Landmark")]
            pub landmark: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LeadingStreetDirection"
            )]
            pub leading_street_direction: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Neighborhood")]
            pub neighborhood: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PlaceType")]
            pub place_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "POBox")]
            pub po_box: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PostalCode")]
            pub postal_code: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Road")]
            pub road: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadBranch")]
            pub road_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPostModifier")]
            pub road_post_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadPreModifier")]
            pub road_pre_modifier: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSection")]
            pub road_section: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoadSubBranch")]
            pub road_sub_branch: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Room")]
            pub room: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Seat")]
            pub seat: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Street")]
            pub street: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StreetSuffix")]
            pub street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Territory")]
            pub territory: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrailingStreetSuffix"
            )]
            pub trailing_street_suffix: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Unit")]
            pub unit: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum RackUnits {
            #[default]
            #[serde(rename = "EIA_310")]
            EIAN310,
            #[serde(rename = "OpenU")]
            OpenU,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Reference {
            #[default]
            #[serde(rename = "Bottom")]
            Bottom,
            #[serde(rename = "Front")]
            Front,
            #[serde(rename = "Left")]
            Left,
            #[serde(rename = "Middle")]
            Middle,
            #[serde(rename = "Rear")]
            Rear,
            #[serde(rename = "Right")]
            Right,
            #[serde(rename = "Top")]
            Top,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Resource {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
}
pub mod resource_block {
    pub mod v1_4_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource_block::v1_4_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CompositionState {
            #[default]
            #[serde(rename = "Composed")]
            Composed,
            #[serde(rename = "ComposedAndAvailable")]
            ComposedAndAvailable,
            #[serde(rename = "Composing")]
            Composing,
            #[serde(rename = "Failed")]
            Failed,
            #[serde(rename = "Unavailable")]
            Unavailable,
            #[serde(rename = "Unused")]
            Unused,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CompositionStatus {
            #[serde(rename = "CompositionState")]
            pub composition_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxCompositions")]
            pub max_compositions: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumberOfCompositions"
            )]
            pub number_of_compositions: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reserved")]
            pub reserved: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SharingCapable")]
            pub sharing_capable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SharingEnabled")]
            pub sharing_enabled: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Chassis@odata.count"
            )]
            pub chassis_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystems")]
            pub computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComputerSystems@odata.count"
            )]
            pub computer_systems_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsumingResourceBlocks"
            )]
            pub consuming_resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsumingResourceBlocks@odata.count"
            )]
            pub consuming_resource_blocks_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyingResourceBlocks"
            )]
            pub supplying_resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupplyingResourceBlocks@odata.count"
            )]
            pub supplying_resource_blocks_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones")]
            pub zones: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Zones@odata.count")]
            pub zones_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PoolType {
            #[default]
            #[serde(rename = "Active")]
            Active,
            #[serde(rename = "Free")]
            Free,
            #[serde(rename = "Unassigned")]
            Unassigned,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResourceBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::resource_block::v1_4_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Client")]
            pub client: Option<String>,
            #[serde(rename = "CompositionStatus")]
            pub composition_status: crate::resource_block::v1_4_1::CompositionStatus,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComputerSystems")]
            pub computer_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComputerSystems@odata.count"
            )]
            pub computer_systems_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives@odata.count")]
            pub drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EthernetInterfaces")]
            pub ethernet_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EthernetInterfaces@odata.count"
            )]
            pub ethernet_interfaces_odata_count: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::resource_block::v1_4_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory")]
            pub memory: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Memory@odata.count")]
            pub memory_odata_count: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NetworkInterfaces")]
            pub network_interfaces: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkInterfaces@odata.count"
            )]
            pub network_interfaces_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Pool")]
            pub pool: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
            #[serde(rename = "ResourceBlockType")]
            pub resource_block_type: Vec<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SimpleStorage")]
            pub simple_storage: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SimpleStorage@odata.count"
            )]
            pub simple_storage_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Storage@odata.count"
            )]
            pub storage_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ResourceBlockType {
            #[default]
            #[serde(rename = "Compute")]
            Compute,
            #[serde(rename = "ComputerSystem")]
            ComputerSystem,
            #[serde(rename = "Expansion")]
            Expansion,
            #[serde(rename = "IndependentResource")]
            IndependentResource,
            #[serde(rename = "Memory")]
            Memory,
            #[serde(rename = "Network")]
            Network,
            #[serde(rename = "Processor")]
            Processor,
            #[serde(rename = "Storage")]
            Storage,
        }
    }
}
pub mod resource_block_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ResourceBlockCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod role {
    pub mod v1_3_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::role::v1_3_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Role {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::role::v1_3_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AlternateRoleId")]
            pub alternate_role_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssignedPrivileges")]
            pub assigned_privileges: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsPredefined")]
            pub is_predefined: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemPrivileges")]
            pub oem_privileges: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Restricted")]
            pub restricted: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RoleId")]
            pub role_id: Option<String>,
        }
    }
}
pub mod role_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct RoleCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod route_entry {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::route_entry::v1_0_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RouteEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::route_entry::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinimumHopCount")]
            pub minimum_hop_count: Option<i64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RawEntryHex")]
            pub raw_entry_hex: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RouteSet")]
            pub route_set: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod route_entry_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct RouteEntryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod route_set_entry {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::route_set_entry::v1_0_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RouteSetEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::route_set_entry::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EgressIdentifier")]
            pub egress_identifier: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HopCount")]
            pub hop_count: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Valid")]
            pub valid: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VCAction")]
            pub vc_action: Option<i64>,
        }
    }
}
pub mod route_set_entry_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct RouteSetEntryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod schedule {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Schedule {
        ScheduleV1N0N3Schedule(crate::schedule::v1_0_3::Schedule),
        ScheduleV1N1N4Schedule(crate::schedule::v1_1_4::Schedule),
        ScheduleV1N2N4Schedule(crate::schedule::v1_2_4::Schedule),
    }
    pub mod v1_0_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DayOfWeek {
            #[default]
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "Friday")]
            Friday,
            #[serde(rename = "Monday")]
            Monday,
            #[serde(rename = "Saturday")]
            Saturday,
            #[serde(rename = "Sunday")]
            Sunday,
            #[serde(rename = "Thursday")]
            Thursday,
            #[serde(rename = "Tuesday")]
            Tuesday,
            #[serde(rename = "Wednesday")]
            Wednesday,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MonthOfYear {
            #[default]
            #[serde(rename = "April")]
            April,
            #[serde(rename = "August")]
            August,
            #[serde(rename = "December")]
            December,
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "February")]
            February,
            #[serde(rename = "January")]
            January,
            #[serde(rename = "July")]
            July,
            #[serde(rename = "June")]
            June,
            #[serde(rename = "March")]
            March,
            #[serde(rename = "May")]
            May,
            #[serde(rename = "November")]
            November,
            #[serde(rename = "October")]
            October,
            #[serde(rename = "September")]
            September,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Schedule {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfMonth")]
            pub enabled_days_of_month: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfWeek")]
            pub enabled_days_of_week: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnabledMonthsOfYear"
            )]
            pub enabled_months_of_year: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitialStartTime")]
            pub initial_start_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lifetime")]
            pub lifetime: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxOccurrences")]
            pub max_occurrences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RecurrenceInterval")]
            pub recurrence_interval: Option<String>,
        }
    }
    pub mod v1_1_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DayOfWeek {
            #[default]
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "Friday")]
            Friday,
            #[serde(rename = "Monday")]
            Monday,
            #[serde(rename = "Saturday")]
            Saturday,
            #[serde(rename = "Sunday")]
            Sunday,
            #[serde(rename = "Thursday")]
            Thursday,
            #[serde(rename = "Tuesday")]
            Tuesday,
            #[serde(rename = "Wednesday")]
            Wednesday,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MonthOfYear {
            #[default]
            #[serde(rename = "April")]
            April,
            #[serde(rename = "August")]
            August,
            #[serde(rename = "December")]
            December,
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "February")]
            February,
            #[serde(rename = "January")]
            January,
            #[serde(rename = "July")]
            July,
            #[serde(rename = "June")]
            June,
            #[serde(rename = "March")]
            March,
            #[serde(rename = "May")]
            May,
            #[serde(rename = "November")]
            November,
            #[serde(rename = "October")]
            October,
            #[serde(rename = "September")]
            September,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Schedule {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfMonth")]
            pub enabled_days_of_month: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfWeek")]
            pub enabled_days_of_week: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledIntervals")]
            pub enabled_intervals: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnabledMonthsOfYear"
            )]
            pub enabled_months_of_year: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitialStartTime")]
            pub initial_start_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lifetime")]
            pub lifetime: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxOccurrences")]
            pub max_occurrences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RecurrenceInterval")]
            pub recurrence_interval: Option<String>,
        }
    }
    pub mod v1_2_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DayOfWeek {
            #[default]
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "Friday")]
            Friday,
            #[serde(rename = "Monday")]
            Monday,
            #[serde(rename = "Saturday")]
            Saturday,
            #[serde(rename = "Sunday")]
            Sunday,
            #[serde(rename = "Thursday")]
            Thursday,
            #[serde(rename = "Tuesday")]
            Tuesday,
            #[serde(rename = "Wednesday")]
            Wednesday,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MonthOfYear {
            #[default]
            #[serde(rename = "April")]
            April,
            #[serde(rename = "August")]
            August,
            #[serde(rename = "December")]
            December,
            #[serde(rename = "Every")]
            Every,
            #[serde(rename = "February")]
            February,
            #[serde(rename = "January")]
            January,
            #[serde(rename = "July")]
            July,
            #[serde(rename = "June")]
            June,
            #[serde(rename = "March")]
            March,
            #[serde(rename = "May")]
            May,
            #[serde(rename = "November")]
            November,
            #[serde(rename = "October")]
            October,
            #[serde(rename = "September")]
            September,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Schedule {
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfMonth")]
            pub enabled_days_of_month: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledDaysOfWeek")]
            pub enabled_days_of_week: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnabledIntervals")]
            pub enabled_intervals: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EnabledMonthsOfYear"
            )]
            pub enabled_months_of_year: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitialStartTime")]
            pub initial_start_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Lifetime")]
            pub lifetime: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxOccurrences")]
            pub max_occurrences: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RecurrenceInterval")]
            pub recurrence_interval: Option<String>,
        }
    }
}
pub mod secure_boot {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::secure_boot::v1_1_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#SecureBoot.ResetKeys"
            )]
            pub secure_boot_reset_keys: Option<crate::secure_boot::v1_1_0::ResetKeys>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetKeys {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetKeysRequestBody {
            #[serde(rename = "ResetKeysType")]
            pub reset_keys_type: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ResetKeysType {
            #[default]
            #[serde(rename = "DeleteAllKeys")]
            DeleteAllKeys,
            #[serde(rename = "DeletePK")]
            DeletePK,
            #[serde(rename = "ResetAllKeysToDefault")]
            ResetAllKeysToDefault,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureBoot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::secure_boot::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecureBootCurrentBoot"
            )]
            pub secure_boot_current_boot: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecureBootDatabases"
            )]
            pub secure_boot_databases: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecureBootEnable")]
            pub secure_boot_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SecureBootMode")]
            pub secure_boot_mode: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SecureBootCurrentBootType {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Enabled")]
            Enabled,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SecureBootModeType {
            #[default]
            #[serde(rename = "AuditMode")]
            AuditMode,
            #[serde(rename = "DeployedMode")]
            DeployedMode,
            #[serde(rename = "SetupMode")]
            SetupMode,
            #[serde(rename = "UserMode")]
            UserMode,
        }
    }
}
pub mod secure_boot_database {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::secure_boot_database::v1_0_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#SecureBootDatabase.ResetKeys"
            )]
            pub secure_boot_database_reset_keys:
                Option<crate::secure_boot_database::v1_0_1::ResetKeys>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetKeys {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetKeysRequestBody {
            #[serde(rename = "ResetKeysType")]
            pub reset_keys_type: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ResetKeysType {
            #[default]
            #[serde(rename = "DeleteAllKeys")]
            DeleteAllKeys,
            #[serde(rename = "ResetAllKeysToDefault")]
            ResetAllKeysToDefault,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecureBootDatabase {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::secure_boot_database::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DatabaseId")]
            pub database_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Signatures")]
            pub signatures: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod secure_boot_database_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SecureBootDatabaseCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod security_policy {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::security_policy::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMAlgorithmSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AEAD")]
            pub aead: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseAsym")]
            pub base_asym: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BaseHash")]
            pub base_hash: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMParameterSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Algorithms")]
            pub algorithms: Option<crate::security_policy::v1_0_0::SPDMAlgorithmSet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Versions")]
            pub versions: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SPDMPolicy {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllowExtendedAlgorithms"
            )]
            pub allow_extended_algorithms: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Allowed")]
            pub allowed: Option<crate::security_policy::v1_0_0::SPDMParameterSet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Denied")]
            pub denied: Option<crate::security_policy::v1_0_0::SPDMParameterSet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RevokedCertificates"
            )]
            pub revoked_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SecureSessionEnabled"
            )]
            pub secure_session_enabled: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrustedCertificates"
            )]
            pub trusted_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerifyCertificate")]
            pub verify_certificate: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityPolicy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::security_policy::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverrideParentManager"
            )]
            pub override_parent_manager: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SPDM")]
            pub spdm: Option<crate::security_policy::v1_0_0::SPDMPolicy>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TLS")]
            pub tls: Option<crate::security_policy::v1_0_0::TLSCommunication>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TLSAlgorithmSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CipherSuites")]
            pub cipher_suites: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SignatureAlgorithms"
            )]
            pub signature_algorithms: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TLSCommunication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Client")]
            pub client: Option<crate::security_policy::v1_0_0::TLSPolicy>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Server")]
            pub server: Option<crate::security_policy::v1_0_0::TLSPolicy>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TLSParameterSet {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Algorithms")]
            pub algorithms: Option<crate::security_policy::v1_0_0::TLSAlgorithmSet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Versions")]
            pub versions: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TLSPolicy {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Allowed")]
            pub allowed: Option<crate::security_policy::v1_0_0::TLSParameterSet>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Denied")]
            pub denied: Option<crate::security_policy::v1_0_0::TLSParameterSet>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RevokedCertificates"
            )]
            pub revoked_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TrustedCertificates"
            )]
            pub trusted_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerifyCertificate")]
            pub verify_certificate: Option<bool>,
        }
    }
}
pub mod sensor {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ElectricalContext {
        #[default]
        #[serde(rename = "Line1")]
        Line1,
        #[serde(rename = "Line1ToLine2")]
        Line1ToLine2,
        #[serde(rename = "Line1ToNeutral")]
        Line1ToNeutral,
        #[serde(rename = "Line1ToNeutralAndL1L2")]
        Line1ToNeutralAndL1L2,
        #[serde(rename = "Line2")]
        Line2,
        #[serde(rename = "Line2ToLine3")]
        Line2ToLine3,
        #[serde(rename = "Line2ToNeutral")]
        Line2ToNeutral,
        #[serde(rename = "Line2ToNeutralAndL1L2")]
        Line2ToNeutralAndL1L2,
        #[serde(rename = "Line2ToNeutralAndL2L3")]
        Line2ToNeutralAndL2L3,
        #[serde(rename = "Line3")]
        Line3,
        #[serde(rename = "Line3ToLine1")]
        Line3ToLine1,
        #[serde(rename = "Line3ToNeutral")]
        Line3ToNeutral,
        #[serde(rename = "Line3ToNeutralAndL3L1")]
        Line3ToNeutralAndL3L1,
        #[serde(rename = "LineToLine")]
        LineToLine,
        #[serde(rename = "LineToNeutral")]
        LineToNeutral,
        #[serde(rename = "Neutral")]
        Neutral,
        #[serde(rename = "Total")]
        Total,
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorArrayExcerpt {
        SensorV1N0N9SensorArrayExcerpt(crate::sensor::v1_0_9::SensorArrayExcerpt),
        SensorV1N1N5SensorArrayExcerpt(crate::sensor::v1_1_5::SensorArrayExcerpt),
        SensorV1N2N3SensorArrayExcerpt(crate::sensor::v1_2_3::SensorArrayExcerpt),
        SensorV1N3N3SensorArrayExcerpt(crate::sensor::v1_3_3::SensorArrayExcerpt),
        SensorV1N4N2SensorArrayExcerpt(crate::sensor::v1_4_2::SensorArrayExcerpt),
        SensorV1N5N1SensorArrayExcerpt(crate::sensor::v1_5_1::SensorArrayExcerpt),
        SensorV1N6N1SensorArrayExcerpt(crate::sensor::v1_6_1::SensorArrayExcerpt),
        SensorV1N7N0SensorArrayExcerpt(crate::sensor::v1_7_0::SensorArrayExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorCurrentExcerpt {
        SensorV1N1N5SensorCurrentExcerpt(crate::sensor::v1_1_5::SensorCurrentExcerpt),
        SensorV1N2N3SensorCurrentExcerpt(crate::sensor::v1_2_3::SensorCurrentExcerpt),
        SensorV1N3N3SensorCurrentExcerpt(crate::sensor::v1_3_3::SensorCurrentExcerpt),
        SensorV1N4N2SensorCurrentExcerpt(crate::sensor::v1_4_2::SensorCurrentExcerpt),
        SensorV1N5N1SensorCurrentExcerpt(crate::sensor::v1_5_1::SensorCurrentExcerpt),
        SensorV1N6N1SensorCurrentExcerpt(crate::sensor::v1_6_1::SensorCurrentExcerpt),
        SensorV1N7N0SensorCurrentExcerpt(crate::sensor::v1_7_0::SensorCurrentExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorEnergykWhExcerpt {
        SensorV1N0N9SensorEnergykWhExcerpt(crate::sensor::v1_0_9::SensorEnergykWhExcerpt),
        SensorV1N1N5SensorEnergykWhExcerpt(crate::sensor::v1_1_5::SensorEnergykWhExcerpt),
        SensorV1N2N3SensorEnergykWhExcerpt(crate::sensor::v1_2_3::SensorEnergykWhExcerpt),
        SensorV1N3N3SensorEnergykWhExcerpt(crate::sensor::v1_3_3::SensorEnergykWhExcerpt),
        SensorV1N4N2SensorEnergykWhExcerpt(crate::sensor::v1_4_2::SensorEnergykWhExcerpt),
        SensorV1N5N1SensorEnergykWhExcerpt(crate::sensor::v1_5_1::SensorEnergykWhExcerpt),
        SensorV1N6N1SensorEnergykWhExcerpt(crate::sensor::v1_6_1::SensorEnergykWhExcerpt),
        SensorV1N7N0SensorEnergykWhExcerpt(crate::sensor::v1_7_0::SensorEnergykWhExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorExcerpt {
        SensorV1N0N9SensorExcerpt(crate::sensor::v1_0_9::SensorExcerpt),
        SensorV1N1N5SensorExcerpt(crate::sensor::v1_1_5::SensorExcerpt),
        SensorV1N2N3SensorExcerpt(crate::sensor::v1_2_3::SensorExcerpt),
        SensorV1N3N3SensorExcerpt(crate::sensor::v1_3_3::SensorExcerpt),
        SensorV1N4N2SensorExcerpt(crate::sensor::v1_4_2::SensorExcerpt),
        SensorV1N5N1SensorExcerpt(crate::sensor::v1_5_1::SensorExcerpt),
        SensorV1N6N1SensorExcerpt(crate::sensor::v1_6_1::SensorExcerpt),
        SensorV1N7N0SensorExcerpt(crate::sensor::v1_7_0::SensorExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorFanArrayExcerpt {
        SensorV1N0N9SensorFanArrayExcerpt(crate::sensor::v1_0_9::SensorFanArrayExcerpt),
        SensorV1N1N5SensorFanArrayExcerpt(crate::sensor::v1_1_5::SensorFanArrayExcerpt),
        SensorV1N2N3SensorFanArrayExcerpt(crate::sensor::v1_2_3::SensorFanArrayExcerpt),
        SensorV1N3N3SensorFanArrayExcerpt(crate::sensor::v1_3_3::SensorFanArrayExcerpt),
        SensorV1N4N2SensorFanArrayExcerpt(crate::sensor::v1_4_2::SensorFanArrayExcerpt),
        SensorV1N5N1SensorFanArrayExcerpt(crate::sensor::v1_5_1::SensorFanArrayExcerpt),
        SensorV1N6N1SensorFanArrayExcerpt(crate::sensor::v1_6_1::SensorFanArrayExcerpt),
        SensorV1N7N0SensorFanArrayExcerpt(crate::sensor::v1_7_0::SensorFanArrayExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorFanExcerpt {
        SensorV1N2N3SensorFanExcerpt(crate::sensor::v1_2_3::SensorFanExcerpt),
        SensorV1N3N3SensorFanExcerpt(crate::sensor::v1_3_3::SensorFanExcerpt),
        SensorV1N4N2SensorFanExcerpt(crate::sensor::v1_4_2::SensorFanExcerpt),
        SensorV1N5N1SensorFanExcerpt(crate::sensor::v1_5_1::SensorFanExcerpt),
        SensorV1N6N1SensorFanExcerpt(crate::sensor::v1_6_1::SensorFanExcerpt),
        SensorV1N7N0SensorFanExcerpt(crate::sensor::v1_7_0::SensorFanExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorPowerExcerpt {
        SensorV1N0N9SensorPowerExcerpt(crate::sensor::v1_0_9::SensorPowerExcerpt),
        SensorV1N1N5SensorPowerExcerpt(crate::sensor::v1_1_5::SensorPowerExcerpt),
        SensorV1N2N3SensorPowerExcerpt(crate::sensor::v1_2_3::SensorPowerExcerpt),
        SensorV1N3N3SensorPowerExcerpt(crate::sensor::v1_3_3::SensorPowerExcerpt),
        SensorV1N4N2SensorPowerExcerpt(crate::sensor::v1_4_2::SensorPowerExcerpt),
        SensorV1N5N1SensorPowerExcerpt(crate::sensor::v1_5_1::SensorPowerExcerpt),
        SensorV1N6N1SensorPowerExcerpt(crate::sensor::v1_6_1::SensorPowerExcerpt),
        SensorV1N7N0SensorPowerExcerpt(crate::sensor::v1_7_0::SensorPowerExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorPumpExcerpt {
        SensorV1N2N3SensorPumpExcerpt(crate::sensor::v1_2_3::SensorPumpExcerpt),
        SensorV1N3N3SensorPumpExcerpt(crate::sensor::v1_3_3::SensorPumpExcerpt),
        SensorV1N4N2SensorPumpExcerpt(crate::sensor::v1_4_2::SensorPumpExcerpt),
        SensorV1N5N1SensorPumpExcerpt(crate::sensor::v1_5_1::SensorPumpExcerpt),
        SensorV1N6N1SensorPumpExcerpt(crate::sensor::v1_6_1::SensorPumpExcerpt),
        SensorV1N7N0SensorPumpExcerpt(crate::sensor::v1_7_0::SensorPumpExcerpt),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum SensorVoltageExcerpt {
        SensorV1N1N5SensorVoltageExcerpt(crate::sensor::v1_1_5::SensorVoltageExcerpt),
        SensorV1N2N3SensorVoltageExcerpt(crate::sensor::v1_2_3::SensorVoltageExcerpt),
        SensorV1N3N3SensorVoltageExcerpt(crate::sensor::v1_3_3::SensorVoltageExcerpt),
        SensorV1N4N2SensorVoltageExcerpt(crate::sensor::v1_4_2::SensorVoltageExcerpt),
        SensorV1N5N1SensorVoltageExcerpt(crate::sensor::v1_5_1::SensorVoltageExcerpt),
        SensorV1N6N1SensorVoltageExcerpt(crate::sensor::v1_6_1::SensorVoltageExcerpt),
        SensorV1N7N0SensorVoltageExcerpt(crate::sensor::v1_7_0::SensorVoltageExcerpt),
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum VoltageType {
        #[default]
        #[serde(rename = "AC")]
        AC,
        #[serde(rename = "DC")]
        DC,
    }
    pub mod v1_0_9 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
    }
    pub mod v1_1_5 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_2_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_3_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_4_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_5_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentkVAh")]
            pub apparent_kvah: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactivekVARh")]
            pub reactive_kvarh: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseAngleDegrees")]
            pub phase_angle_degrees: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_6_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentkVAh")]
            pub apparent_kvah: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactivekVARh")]
            pub reactive_kvarh: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseAngleDegrees")]
            pub phase_angle_degrees: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
    }
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::sensor::v1_7_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Sensor.ResetMetrics"
            )]
            pub sensor_reset_metrics: Option<crate::sensor::v1_7_0::ResetMetrics>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Sensor.ResetToDefaults"
            )]
            pub sensor_reset_to_defaults: Option<crate::sensor::v1_7_0::ResetToDefaults>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ImplementationType {
            #[default]
            #[serde(rename = "PhysicalSensor")]
            PhysicalSensor,
            #[serde(rename = "Reported")]
            Reported,
            #[serde(rename = "Synthesized")]
            Synthesized,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssociatedControls")]
            pub associated_controls: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedControls@odata.count"
            )]
            pub associated_controls_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReadingBasisType {
            #[default]
            #[serde(rename = "Delta")]
            Delta,
            #[serde(rename = "Headroom")]
            Headroom,
            #[serde(rename = "Zero")]
            Zero,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReadingType {
            #[default]
            #[serde(rename = "AbsoluteHumidity")]
            AbsoluteHumidity,
            #[serde(rename = "AirFlow")]
            AirFlow,
            #[serde(rename = "AirFlowCMM")]
            AirFlowCMM,
            #[serde(rename = "Altitude")]
            Altitude,
            #[serde(rename = "Barometric")]
            Barometric,
            #[serde(rename = "ChargeAh")]
            ChargeAh,
            #[serde(rename = "Current")]
            Current,
            #[serde(rename = "EnergyJoules")]
            EnergyJoules,
            #[serde(rename = "EnergyWh")]
            EnergyWh,
            #[serde(rename = "EnergykWh")]
            EnergykWh,
            #[serde(rename = "Frequency")]
            Frequency,
            #[serde(rename = "Heat")]
            Heat,
            #[serde(rename = "Humidity")]
            Humidity,
            #[serde(rename = "LiquidFlow")]
            LiquidFlow,
            #[serde(rename = "LiquidFlowLPM")]
            LiquidFlowLPM,
            #[serde(rename = "LiquidLevel")]
            LiquidLevel,
            #[serde(rename = "Percent")]
            Percent,
            #[serde(rename = "Power")]
            Power,
            #[serde(rename = "Pressure")]
            Pressure,
            #[serde(rename = "PressurePa")]
            PressurePa,
            #[serde(rename = "PressurekPa")]
            PressurekPa,
            #[serde(rename = "Rotational")]
            Rotational,
            #[serde(rename = "Temperature")]
            Temperature,
            #[serde(rename = "Voltage")]
            Voltage,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Sensor {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Accuracy")]
            pub accuracy: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::sensor::v1_7_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdjustedMaxAllowableOperatingValue"
            )]
            pub adjusted_max_allowable_operating_value: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdjustedMinAllowableOperatingValue"
            )]
            pub adjusted_min_allowable_operating_value: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentkVAh")]
            pub apparent_kvah: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AverageReading")]
            pub average_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AveragingInterval")]
            pub averaging_interval: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AveragingIntervalAchieved"
            )]
            pub averaging_interval_achieved: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Calibration")]
            pub calibration: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CalibrationTime")]
            pub calibration_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ElectricalContext")]
            pub electrical_context: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Implementation")]
            pub implementation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::sensor::v1_7_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LoadPercent")]
            pub load_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowestReading")]
            pub lowest_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowestReadingTime")]
            pub lowest_reading_time: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxAllowableOperatingValue"
            )]
            pub max_allowable_operating_value: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinAllowableOperatingValue"
            )]
            pub min_allowable_operating_value: Option<f64>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PeakReading")]
            pub peak_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PeakReadingTime")]
            pub peak_reading_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseAngleDegrees")]
            pub phase_angle_degrees: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Precision")]
            pub precision: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactivekVARh")]
            pub reactive_kvarh: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingBasis")]
            pub reading_basis: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingRangeMax")]
            pub reading_range_max: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingRangeMin")]
            pub reading_range_min: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingTime")]
            pub reading_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingType")]
            pub reading_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensingFrequency")]
            pub sensing_frequency: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensingInterval")]
            pub sensing_interval: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorGroup")]
            pub sensor_group: Option<crate::redundancy::RedundantGroup>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Thresholds")]
            pub thresholds: Option<crate::sensor::v1_7_0::Thresholds>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VoltageType")]
            pub voltage_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorCurrentExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorEnergykWhExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentkVAh")]
            pub apparent_kvah: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifetimeReading")]
            pub lifetime_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactivekVARh")]
            pub reactive_kvarh: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorResetTime")]
            pub sensor_reset_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanArrayExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeviceName")]
            pub device_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalSubContext")]
            pub physical_sub_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorFanExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPowerExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApparentVA")]
            pub apparent_va: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhaseAngleDegrees")]
            pub phase_angle_degrees: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerFactor")]
            pub power_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReactiveVAR")]
            pub reactive_var: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorPumpExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedRPM")]
            pub speed_rpm: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SensorVoltageExcerpt {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CrestFactor")]
            pub crest_factor: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataSourceUri")]
            pub data_source_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "THDPercent")]
            pub thd_percent: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Threshold {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Activation")]
            pub activation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DwellTime")]
            pub dwell_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HysteresisDuration")]
            pub hysteresis_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HysteresisReading")]
            pub hysteresis_reading: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ThresholdActivation {
            #[default]
            #[serde(rename = "Decreasing")]
            Decreasing,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Either")]
            Either,
            #[serde(rename = "Increasing")]
            Increasing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Thresholds {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerCaution")]
            pub lower_caution: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerCautionUser")]
            pub lower_caution_user: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerCritical")]
            pub lower_critical: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerCriticalUser")]
            pub lower_critical_user: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerFatal")]
            pub lower_fatal: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperCaution")]
            pub upper_caution: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperCautionUser")]
            pub upper_caution_user: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperCritical")]
            pub upper_critical: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperCriticalUser")]
            pub upper_critical_user: Option<crate::sensor::v1_7_0::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperFatal")]
            pub upper_fatal: Option<crate::sensor::v1_7_0::Threshold>,
        }
    }
}
pub mod sensor_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SensorCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod serial_interface {
    pub mod v1_1_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::serial_interface::v1_1_8::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum BitRate {
            #[default]
            #[serde(rename = "115200")]
            N115200,
            #[serde(rename = "1200")]
            N1200,
            #[serde(rename = "19200")]
            N19200,
            #[serde(rename = "230400")]
            N230400,
            #[serde(rename = "2400")]
            N2400,
            #[serde(rename = "38400")]
            N38400,
            #[serde(rename = "4800")]
            N4800,
            #[serde(rename = "57600")]
            N57600,
            #[serde(rename = "9600")]
            N9600,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectorType {
            #[default]
            #[serde(rename = "DB25 Female")]
            DB25Female,
            #[serde(rename = "DB25 Male")]
            DB25Male,
            #[serde(rename = "DB9 Female")]
            DB9Female,
            #[serde(rename = "DB9 Male")]
            DB9Male,
            #[serde(rename = "RJ11")]
            RJ11,
            #[serde(rename = "RJ45")]
            RJ45,
            #[serde(rename = "USB")]
            USB,
            #[serde(rename = "mUSB")]
            MUSB,
            #[serde(rename = "uUSB")]
            UUSB,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DataBits {
            #[default]
            #[serde(rename = "5")]
            N5,
            #[serde(rename = "6")]
            N6,
            #[serde(rename = "7")]
            N7,
            #[serde(rename = "8")]
            N8,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum FlowControl {
            #[default]
            #[serde(rename = "Hardware")]
            Hardware,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Software")]
            Software,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum Parity {
            #[default]
            #[serde(rename = "Even")]
            Even,
            #[serde(rename = "Mark")]
            Mark,
            #[serde(rename = "None")]
            None,
            #[serde(rename = "Odd")]
            Odd,
            #[serde(rename = "Space")]
            Space,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum PinOut {
            #[default]
            #[serde(rename = "Cisco")]
            Cisco,
            #[serde(rename = "Cyclades")]
            Cyclades,
            #[serde(rename = "Digi")]
            Digi,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SerialInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::serial_interface::v1_1_8::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BitRate")]
            pub bit_rate: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectorType")]
            pub connector_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataBits")]
            pub data_bits: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FlowControl")]
            pub flow_control: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InterfaceEnabled")]
            pub interface_enabled: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Parity")]
            pub parity: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PinOut")]
            pub pin_out: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignalType")]
            pub signal_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StopBits")]
            pub stop_bits: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SignalType {
            #[default]
            #[serde(rename = "Rs232")]
            Rs232,
            #[serde(rename = "Rs485")]
            Rs485,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum StopBits {
            #[default]
            #[serde(rename = "1")]
            N1,
            #[serde(rename = "2")]
            N2,
        }
    }
}
pub mod serial_interface_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SerialInterfaceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod service_conditions {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::service_conditions::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ServiceConditions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::service_conditions::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Conditions")]
            pub conditions: Option<Vec<crate::resource::Condition>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HealthRollup")]
            pub health_rollup: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
}
pub mod service_root {
    pub mod v1_16_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DeepOperations {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeepPATCH")]
            pub deep_patch: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeepPOST")]
            pub deep_post: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLevels")]
            pub max_levels: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Expand {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExpandAll")]
            pub expand_all: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Levels")]
            pub levels: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxLevels")]
            pub max_levels: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NoLinks")]
            pub no_links: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagerProvidingService"
            )]
            pub manager_providing_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(rename = "Sessions")]
            pub sessions: crate::odata_v4::IdRef,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ProtocolFeaturesSupported {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeepOperations")]
            pub deep_operations: Option<crate::service_root::v1_16_0::DeepOperations>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExcerptQuery")]
            pub excerpt_query: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ExpandQuery")]
            pub expand_query: Option<crate::service_root::v1_16_0::Expand>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FilterQuery")]
            pub filter_query: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MultipleHTTPRequests"
            )]
            pub multiple_http_requests: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OnlyMemberQuery")]
            pub only_member_query: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SelectQuery")]
            pub select_query: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ServiceRoot {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccountService")]
            pub account_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AggregationService")]
            pub aggregation_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Cables")]
            pub cables: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CertificateService")]
            pub certificate_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComponentIntegrity")]
            pub component_integrity: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CompositionService")]
            pub composition_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventService")]
            pub event_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fabrics")]
            pub fabrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Facilities")]
            pub facilities: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JobService")]
            pub job_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JsonSchemas")]
            pub json_schemas: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "KeyService")]
            pub key_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LicenseService")]
            pub license_service: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Links")]
            pub links: crate::service_root::v1_16_0::Links,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Managers")]
            pub managers: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeDomains")]
            pub nvme_domains: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerEquipment")]
            pub power_equipment: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Product")]
            pub product: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ProtocolFeaturesSupported"
            )]
            pub protocol_features_supported:
                Option<crate::service_root::v1_16_0::ProtocolFeaturesSupported>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RedfishVersion")]
            pub redfish_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RegisteredClients")]
            pub registered_clients: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Registries")]
            pub registries: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlocks")]
            pub resource_blocks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceConditions")]
            pub service_conditions: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServiceIdentification"
            )]
            pub service_identification: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SessionService")]
            pub session_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageSystems")]
            pub storage_systems: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Systems")]
            pub systems: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Tasks")]
            pub tasks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TelemetryService")]
            pub telemetry_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThermalEquipment")]
            pub thermal_equipment: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpdateService")]
            pub update_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Vendor")]
            pub vendor: Option<String>,
        }
    }
}
pub mod session {
    pub mod v1_6_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::session::v1_6_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Session {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::session::v1_6_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ClientOriginIPAddress"
            )]
            pub client_origin_ip_address: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Context")]
            pub context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedTime")]
            pub created_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OemSessionType")]
            pub oem_session_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SessionType")]
            pub session_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Token")]
            pub token: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserName")]
            pub user_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum SessionTypes {
            #[default]
            #[serde(rename = "HostConsole")]
            HostConsole,
            #[serde(rename = "IPMI")]
            IPMI,
            #[serde(rename = "KVMIP")]
            KVMIP,
            #[serde(rename = "ManagerConsole")]
            ManagerConsole,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "Redfish")]
            Redfish,
            #[serde(rename = "VirtualMedia")]
            VirtualMedia,
            #[serde(rename = "WebUI")]
            WebUI,
        }
    }
}
pub mod session_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SessionCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod session_service {
    pub mod v1_1_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::session_service::v1_1_8::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SessionService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::session_service::v1_1_8::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SessionTimeout")]
            pub session_timeout: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Sessions")]
            pub sessions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
    }
}
pub mod signature {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum SignatureTypeRegistry {
        #[default]
        #[serde(rename = "UEFI")]
        UEFI,
    }
    pub mod v1_0_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::signature::v1_0_2::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Signature {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::signature::v1_0_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignatureString")]
            pub signature_string: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SignatureType")]
            pub signature_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SignatureTypeRegistry"
            )]
            pub signature_type_registry: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiSignatureOwner")]
            pub uefi_signature_owner: Option<String>,
        }
    }
}
pub mod signature_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SignatureCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod simple_storage {
    pub mod v1_3_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::simple_storage::v1_3_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Device {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityBytes")]
            pub capacity_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Storage")]
            pub storage: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SimpleStorage {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::simple_storage::v1_3_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Devices")]
            pub devices: Option<Vec<crate::simple_storage::v1_3_1::Device>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::simple_storage::v1_3_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiDevicePath")]
            pub uefi_device_path: Option<String>,
        }
    }
}
pub mod simple_storage_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SimpleStorageCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod software_inventory {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum AdditionalVersions {
        SoftwareInventoryV1N7N0AdditionalVersions(
            crate::software_inventory::v1_7_0::AdditionalVersions,
        ),
        SoftwareInventoryV1N8N0AdditionalVersions(
            crate::software_inventory::v1_8_0::AdditionalVersions,
        ),
        SoftwareInventoryV1N9N0AdditionalVersions(
            crate::software_inventory::v1_9_0::AdditionalVersions,
        ),
    }
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum MeasurementBlock {
        SoftwareInventoryV1N4N0MeasurementBlock(
            crate::software_inventory::v1_4_0::MeasurementBlock,
        ),
        SoftwareInventoryV1N5N0MeasurementBlock(
            crate::software_inventory::v1_5_0::MeasurementBlock,
        ),
        SoftwareInventoryV1N6N0MeasurementBlock(
            crate::software_inventory::v1_6_0::MeasurementBlock,
        ),
        SoftwareInventoryV1N7N0MeasurementBlock(
            crate::software_inventory::v1_7_0::MeasurementBlock,
        ),
        SoftwareInventoryV1N8N0MeasurementBlock(
            crate::software_inventory::v1_8_0::MeasurementBlock,
        ),
        SoftwareInventoryV1N9N0MeasurementBlock(
            crate::software_inventory::v1_9_0::MeasurementBlock,
        ),
    }
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
    }
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
    }
    pub mod v1_6_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
    }
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AdditionalVersions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Bootloader")]
            pub bootloader: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Kernel")]
            pub kernel: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Microcode")]
            pub microcode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
    }
    pub mod v1_8_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AdditionalVersions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Bootloader")]
            pub bootloader: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Kernel")]
            pub kernel: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Microcode")]
            pub microcode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OSDistribution")]
            pub os_distribution: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
    }
    pub mod v1_9_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::software_inventory::v1_9_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AdditionalVersions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Bootloader")]
            pub bootloader: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Kernel")]
            pub kernel: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Microcode")]
            pub microcode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OSDistribution")]
            pub os_distribution: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MeasurementBlock {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementIndex")]
            pub measurement_index: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MeasurementSize")]
            pub measurement_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MeasurementSpecification"
            )]
            pub measurement_specification: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SoftwareInventory {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::software_inventory::v1_9_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AdditionalVersions")]
            pub additional_versions: Option<crate::software_inventory::v1_9_0::AdditionalVersions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowestSupportedVersion"
            )]
            pub lowest_supported_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurement")]
            pub measurement: Option<crate::software_inventory::MeasurementBlock>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReleaseDate")]
            pub release_date: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareId")]
            pub software_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UefiDevicePaths")]
            pub uefi_device_paths: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Updateable")]
            pub updateable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Version")]
            pub version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VersionScheme")]
            pub version_scheme: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteProtected")]
            pub write_protected: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum VersionScheme {
            #[default]
            #[serde(rename = "DotIntegerNotation")]
            DotIntegerNotation,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SemVer")]
            SemVer,
        }
    }
}
pub mod software_inventory_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SoftwareInventoryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod storage {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum StorageController {
        StorageV1N0N11StorageController(crate::storage::v1_0_11::StorageController),
        StorageV1N10N1StorageController(crate::storage::v1_10_1::StorageController),
        StorageV1N11N0StorageController(crate::storage::v1_11_0::StorageController),
        StorageV1N12N0StorageController(crate::storage::v1_12_0::StorageController),
        StorageV1N13N0StorageController(crate::storage::v1_13_0::StorageController),
        StorageV1N14N0StorageController(crate::storage::v1_14_0::StorageController),
        StorageV1N15N0StorageController(crate::storage::v1_15_0::StorageController),
        StorageV1N1N10StorageController(crate::storage::v1_1_10::StorageController),
        StorageV1N2N8StorageController(crate::storage::v1_2_8::StorageController),
        StorageV1N3N8StorageController(crate::storage::v1_3_8::StorageController),
        StorageV1N4N8StorageController(crate::storage::v1_4_8::StorageController),
        StorageV1N5N6StorageController(crate::storage::v1_5_6::StorageController),
        StorageV1N6N5StorageController(crate::storage::v1_6_5::StorageController),
        StorageV1N7N4StorageController(crate::storage::v1_7_4::StorageController),
        StorageV1N8N3StorageController(crate::storage::v1_8_3::StorageController),
        StorageV1N9N2StorageController(crate::storage::v1_9_2::StorageController),
        OdataV4IdRef(crate::odata_v4::IdRef),
    }
    pub mod v1_0_11 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
    }
    pub mod v1_10_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_10_1::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_10_1::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_10_1::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_10_1::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_10_1::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_11_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_11_0::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_11_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_11_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_11_0::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_11_0::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_12_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_12_0::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_12_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_12_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_12_0::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_12_0::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_13_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_13_0::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_13_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_13_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_13_0::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_13_0::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_14_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_14_0::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_14_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_14_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_14_0::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_14_0::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_15_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_15_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Storage.ResetToDefaults"
            )]
            pub storage_reset_to_defaults: Option<crate::storage::v1_15_0::ResetToDefaults>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Storage.SetEncryptionKey"
            )]
            pub storage_set_encryption_key: Option<crate::storage::v1_15_0::SetEncryptionKey>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum AutoVolumeCreate {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "NonRAID")]
            NonRAID,
            #[serde(rename = "RAID0")]
            RAID0,
            #[serde(rename = "RAID1")]
            RAID1,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EncryptionMode {
            #[default]
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "UseExternalKey")]
            UseExternalKey,
            #[serde(rename = "UseLocalKey")]
            UseLocalKey,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum HotspareActivationPolicy {
            #[default]
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "OnDriveFailure")]
            OnDriveFailure,
            #[serde(rename = "OnDrivePredictedFailure")]
            OnDrivePredictedFailure,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enclosures")]
            pub enclosures: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Enclosures@odata.count"
            )]
            pub enclosures_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HostingStorageSystems"
            )]
            pub hosting_storage_systems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HostingStorageSystems@odata.count"
            )]
            pub hosting_storage_systems_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeoFDiscoverySubysystems"
            )]
            pub nvme_of_discovery_subysystems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeoFDiscoverySubysystems@odata.count"
            )]
            pub nvme_of_discovery_subysystems_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SimpleStorage")]
            pub simple_storage: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetToDefaultsRequestBody {
            #[serde(rename = "ResetType")]
            pub reset_type: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ResetToDefaultsType {
            #[default]
            #[serde(rename = "PreserveVolumes")]
            PreserveVolumes,
            #[serde(rename = "ResetAll")]
            ResetAll,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetEncryptionKey {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SetEncryptionKeyRequestBody {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CurrentEncryptionKey"
            )]
            pub current_encryption_key: Option<String>,
            #[serde(rename = "EncryptionKey")]
            pub encryption_key: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EncryptionKeyIdentifier"
            )]
            pub encryption_key_identifier: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Storage {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_15_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AutoVolumeCreate")]
            pub auto_volume_create: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Connections")]
            pub connections: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyGroups")]
            pub consistency_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Controllers")]
            pub controllers: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives@odata.count")]
            pub drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionMode")]
            pub encryption_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndpointGroups")]
            pub endpoint_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FileSystems")]
            pub file_systems: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HotspareActivationPolicy"
            )]
            pub hotspare_activation_policy: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_15_0::Links>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocalEncryptionKeyIdentifier"
            )]
            pub local_encryption_key_identifier: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageControllers")]
            pub storage_controllers: Option<Vec<crate::storage::v1_15_0::StorageController>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageControllers@odata.count"
            )]
            pub storage_controllers_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageGroups")]
            pub storage_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StoragePools")]
            pub storage_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Volumes")]
            pub volumes: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_15_0::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_15_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_15_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_15_0::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_15_0::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_1_10 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_1_10::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
    }
    pub mod v1_2_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_2_8::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_2_8::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_2_8::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_3_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_3_8::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_3_8::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_3_8::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_4_8 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_4_8::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_4_8::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_4_8::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_5_6 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_5_6::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_5_6::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_5_6::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_5_6::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_6_5 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_6_5::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_6_5::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_6_5::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_6_5::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_7_4 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_7_4::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_7_4::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_7_4::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_7_4::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_7_4::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_8_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_8_3::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_8_3::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_8_3::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_8_3::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_8_3::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
    pub mod v1_9_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage::v1_9_2::StorageControllerActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage::v1_9_2::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage::v1_9_2::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage::v1_9_2::StorageControllerLinks>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage::v1_9_2::StorageControllerOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerLinks {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageServices")]
            pub storage_services: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageServices@odata.count"
            )]
            pub storage_services_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerOemActions {}
    }
}
pub mod storage_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct StorageCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod storage_controller {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum NVMeSMARTCriticalWarnings {
        StorageControllerV1N0N2NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_0_2::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N1N1NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_1_1::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N2N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_2_0::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N3N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_3_0::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N4N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_4_0::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N5N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_5_0::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N6N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_6_0::NVMeSMARTCriticalWarnings,
        ),
        StorageControllerV1N7N0NVMeSMARTCriticalWarnings(
            crate::storage_controller::v1_7_0::NVMeSMARTCriticalWarnings,
        ),
    }
    pub mod v1_0_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_1_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_5_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_6_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
    }
    pub mod v1_7_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ANAAccessState {
            #[default]
            #[serde(rename = "Inaccessible")]
            Inaccessible,
            #[serde(rename = "NonOptimized")]
            NonOptimized,
            #[serde(rename = "Optimized")]
            Optimized,
            #[serde(rename = "PersistentLoss")]
            PersistentLoss,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ANACharacteristics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessState")]
            pub access_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Volume")]
            pub volume: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage_controller::v1_7_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#StorageController.AttachNamespaces"
            )]
            pub storage_controller_attach_namespaces:
                Option<crate::storage_controller::v1_7_0::AttachNamespaces>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#StorageController.DetachNamespaces"
            )]
            pub storage_controller_detach_namespaces:
                Option<crate::storage_controller::v1_7_0::DetachNamespaces>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#StorageController.SecurityReceive"
            )]
            pub storage_controller_security_receive:
                Option<crate::storage_controller::v1_7_0::SecurityReceive>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#StorageController.SecuritySend"
            )]
            pub storage_controller_security_send:
                Option<crate::storage_controller::v1_7_0::SecuritySend>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AttachDetachNamespacesResponse {
            #[serde(rename = "AttachedVolumes")]
            pub attached_volumes: Vec<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AttachedVolumes@odata.count"
            )]
            pub attached_volumes_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AttachNamespaces {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AttachNamespacesRequestBody {
            #[serde(rename = "Namespaces")]
            pub namespaces: Vec<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CacheSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PersistentCacheSizeMiB"
            )]
            pub persistent_cache_size_mi_b: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(rename = "TotalCacheSizeMiB")]
            pub total_cache_size_mi_b: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DetachNamespaces {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DetachNamespacesRequestBody {
            #[serde(rename = "Namespaces")]
            pub namespaces: Vec<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AttachedVolumes")]
            pub attached_volumes: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AttachedVolumes@odata.count"
            )]
            pub attached_volumes_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Batteries")]
            pub batteries: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Batteries@odata.count"
            )]
            pub batteries_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions"
            )]
            pub network_device_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NetworkDeviceFunctions@odata.count"
            )]
            pub network_device_functions_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeDiscoveredSubsystems"
            )]
            pub nvme_discovered_subsystems: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeDiscoveredSubsystems@odata.count"
            )]
            pub nvme_discovered_subsystems_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeFunctions")]
            pub pcie_functions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "PCIeFunctions@odata.count"
            )]
            pub pcie_functions_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeControllerAttributes {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReportsNamespaceGranularity"
            )]
            pub reports_namespace_granularity: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReportsUUIDList")]
            pub reports_uuid_list: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Supports128BitHostId"
            )]
            pub supports128_bit_host_id: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsEnduranceGroups"
            )]
            pub supports_endurance_groups: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsExceedingPowerOfNonOperationalState"
            )]
            pub supports_exceeding_power_of_non_operational_state: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportsNVMSets")]
            pub supports_nvm_sets: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsPredictableLatencyMode"
            )]
            pub supports_predictable_latency_mode: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsReadRecoveryLevels"
            )]
            pub supports_read_recovery_levels: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsReservations"
            )]
            pub supports_reservations: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsSQAssociations"
            )]
            pub supports_sq_associations: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsTrafficBasedKeepAlive"
            )]
            pub supports_traffic_based_keep_alive: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeControllerProperties {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllocatedCompletionQueues"
            )]
            pub allocated_completion_queues: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AllocatedSubmissionQueues"
            )]
            pub allocated_submission_queues: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ANACharacteristics")]
            pub ana_characteristics:
                Option<Vec<crate::storage_controller::v1_7_0::ANACharacteristics>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerType")]
            pub controller_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxQueueSize")]
            pub max_queue_size: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeControllerAttributes"
            )]
            pub nvme_controller_attributes:
                Option<crate::storage_controller::v1_7_0::NVMeControllerAttributes>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeSMARTCriticalWarnings"
            )]
            pub nvme_smart_critical_warnings:
                Option<crate::storage_controller::v1_7_0::NVMeSMARTCriticalWarnings>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeVersion")]
            pub nvme_version: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum NVMeControllerType {
            #[default]
            #[serde(rename = "Admin")]
            Admin,
            #[serde(rename = "Discovery")]
            Discovery,
            #[serde(rename = "IO")]
            IO,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTCriticalWarnings {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaInReadOnly")]
            pub media_in_read_only: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OverallSubsystemDegraded"
            )]
            pub overall_subsystem_degraded: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PMRUnreliable")]
            pub pmr_unreliable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerBackupFailed")]
            pub power_backup_failed: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityWornOut"
            )]
            pub spare_capacity_worn_out: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Rates {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyCheckRatePercent"
            )]
            pub consistency_check_rate_percent: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RebuildRatePercent")]
            pub rebuild_rate_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransformationRatePercent"
            )]
            pub transformation_rate_percent: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityReceive {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityReceiveRequestBody {
            #[serde(rename = "AllocationLength")]
            pub allocation_length: i64,
            #[serde(rename = "SecurityProtocol")]
            pub security_protocol: i64,
            #[serde(rename = "SecurityProtocolSpecific")]
            pub security_protocol_specific: i64,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecurityReceiveResponse {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Data")]
            pub data: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecuritySend {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SecuritySendRequestBody {
            #[serde(rename = "Data")]
            pub data: String,
            #[serde(rename = "SecurityProtocol")]
            pub security_protocol: i64,
            #[serde(rename = "SecurityProtocolSpecific")]
            pub security_protocol_specific: i64,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage_controller::v1_7_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheSummary")]
            pub cache_summary: Option<crate::storage_controller::v1_7_0::CacheSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ControllerRates")]
            pub controller_rates: Option<crate::storage_controller::v1_7_0::Rates>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::storage_controller::v1_7_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeControllerProperties"
            )]
            pub nvme_controller_properties:
                Option<crate::storage_controller::v1_7_0::NVMeControllerProperties>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeInterface")]
            pub pcie_interface: Option<crate::pcie_device::PCIeInterface>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpeedGbps")]
            pub speed_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedControllerProtocols"
            )]
            pub supported_controller_protocols: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedDeviceProtocols"
            )]
            pub supported_device_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedRAIDTypes")]
            pub supported_raid_types: Option<Vec<String>>,
        }
    }
}
pub mod storage_controller_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct StorageControllerCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod storage_controller_metrics {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum NVMeSMARTMetrics {
        StorageControllerMetricsV1N0N0NVMeSMARTMetrics(
            crate::storage_controller_metrics::v1_0_0::NVMeSMARTMetrics,
        ),
    }
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::storage_controller_metrics::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EGCriticalWarningSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NamespacesInReadOnlyMode"
            )]
            pub namespaces_in_read_only_mode: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReliabilityDegraded"
            )]
            pub reliability_degraded: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareCapacityUnderThreshold"
            )]
            pub spare_capacity_under_threshold: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeSMARTMetrics {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AvailableSparePercent"
            )]
            pub available_spare_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AvailableSpareThresholdPercent"
            )]
            pub available_spare_threshold_percent: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CompositeTemperatureCelsius"
            )]
            pub composite_temperature_celsius: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ControllerBusyTimeMinutes"
            )]
            pub controller_busy_time_minutes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CriticalCompositeTempTimeMinutes"
            )]
            pub critical_composite_temp_time_minutes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CriticalWarnings")]
            pub critical_warnings: Option<crate::storage_controller::NVMeSMARTCriticalWarnings>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataUnitsRead")]
            pub data_units_read: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DataUnitsWritten")]
            pub data_units_written: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "EGCriticalWarningSummary"
            )]
            pub eg_critical_warning_summary:
                Option<crate::storage_controller_metrics::v1_0_0::EGCriticalWarningSummary>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostReadCommands")]
            pub host_read_commands: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HostWriteCommands")]
            pub host_write_commands: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MediaAndDataIntegrityErrors"
            )]
            pub media_and_data_integrity_errors: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NumberOfErrorInformationLogEntries"
            )]
            pub number_of_error_information_log_entries: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentageUsed")]
            pub percentage_used: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerCycles")]
            pub power_cycles: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerOnHours")]
            pub power_on_hours: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureSensorsCelsius"
            )]
            pub temperature_sensors_celsius: Option<Vec<f64>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalMgmtTemp1TotalTimeSeconds"
            )]
            pub thermal_mgmt_temp1_total_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalMgmtTemp1TransitionCount"
            )]
            pub thermal_mgmt_temp1_transition_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalMgmtTemp2TotalTimeSeconds"
            )]
            pub thermal_mgmt_temp2_total_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ThermalMgmtTemp2TransitionCount"
            )]
            pub thermal_mgmt_temp2_transition_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UnsafeShutdowns")]
            pub unsafe_shutdowns: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "WarningCompositeTempTimeMinutes"
            )]
            pub warning_composite_temp_time_minutes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StorageControllerMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::storage_controller_metrics::v1_0_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableParityErrorCount"
            )]
            pub correctable_parity_error_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeSMART")]
            pub nvme_smart: Option<crate::storage_controller_metrics::NVMeSMARTMetrics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StateChangeCount")]
            pub state_change_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableParityErrorCount"
            )]
            pub uncorrectable_parity_error_count: Option<i64>,
        }
    }
}
pub mod storage_replica_info {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ReplicaFaultDomain {
        #[default]
        #[serde(rename = "Local")]
        Local,
        #[serde(rename = "Remote")]
        Remote,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ReplicaType {
        #[default]
        #[serde(rename = "Clone")]
        Clone,
        #[serde(rename = "Mirror")]
        Mirror,
        #[serde(rename = "Snapshot")]
        Snapshot,
        #[serde(rename = "TokenizedClone")]
        TokenizedClone,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ReplicaUpdateMode {
        #[default]
        #[serde(rename = "Active")]
        Active,
        #[serde(rename = "Adaptive")]
        Adaptive,
        #[serde(rename = "Asynchronous")]
        Asynchronous,
        #[serde(rename = "Synchronous")]
        Synchronous,
    }
    pub mod v1_4_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConsistencyState {
            #[default]
            #[serde(rename = "Consistent")]
            Consistent,
            #[serde(rename = "Inconsistent")]
            Inconsistent,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConsistencyStatus {
            #[default]
            #[serde(rename = "Consistent")]
            Consistent,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "InError")]
            InError,
            #[serde(rename = "InProgress")]
            InProgress,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConsistencyType {
            #[default]
            #[serde(rename = "SequentiallyConsistent")]
            SequentiallyConsistent,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ReplicaInfo {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyEnabled")]
            pub consistency_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyState")]
            pub consistency_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyStatus")]
            pub consistency_status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyType")]
            pub consistency_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DataProtectionLineOfService"
            )]
            pub data_protection_line_of_service: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "FailedCopyStopsHostIO"
            )]
            pub failed_copy_stops_host_io: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentSynced")]
            pub percent_synced: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteSourceReplica"
            )]
            pub remote_source_replica: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Replica")]
            pub replica: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaFaultDomain")]
            pub replica_fault_domain: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaPriority")]
            pub replica_priority: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplicaProgressStatus"
            )]
            pub replica_progress_status: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplicaReadOnlyAccess"
            )]
            pub replica_read_only_access: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplicaRecoveryMode"
            )]
            pub replica_recovery_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaRole")]
            pub replica_role: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaSkewBytes")]
            pub replica_skew_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaState")]
            pub replica_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaType")]
            pub replica_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaUpdateMode")]
            pub replica_update_mode: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RequestedReplicaState"
            )]
            pub requested_replica_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SourceReplica")]
            pub source_replica: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SyncMaintained")]
            pub sync_maintained: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UndiscoveredElement"
            )]
            pub undiscovered_element: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenActivated")]
            pub when_activated: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenDeactivated")]
            pub when_deactivated: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenEstablished")]
            pub when_established: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenSuspended")]
            pub when_suspended: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenSynced")]
            pub when_synced: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WhenSynchronized")]
            pub when_synchronized: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaPriority {
            #[default]
            #[serde(rename = "High")]
            High,
            #[serde(rename = "Low")]
            Low,
            #[serde(rename = "Same")]
            Same,
            #[serde(rename = "Urgent")]
            Urgent,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaProgressStatus {
            #[default]
            #[serde(rename = "Aborting")]
            Aborting,
            #[serde(rename = "Completed")]
            Completed,
            #[serde(rename = "Detaching")]
            Detaching,
            #[serde(rename = "Dormant")]
            Dormant,
            #[serde(rename = "FailingBack")]
            FailingBack,
            #[serde(rename = "FailingOver")]
            FailingOver,
            #[serde(rename = "Fracturing")]
            Fracturing,
            #[serde(rename = "Initializing")]
            Initializing,
            #[serde(rename = "Mixed")]
            Mixed,
            #[serde(rename = "Pending")]
            Pending,
            #[serde(rename = "Preparing")]
            Preparing,
            #[serde(rename = "RequiresActivate")]
            RequiresActivate,
            #[serde(rename = "RequiresDetach")]
            RequiresDetach,
            #[serde(rename = "RequiresFracture")]
            RequiresFracture,
            #[serde(rename = "RequiresResume")]
            RequiresResume,
            #[serde(rename = "RequiresResync")]
            RequiresResync,
            #[serde(rename = "RequiresSplit")]
            RequiresSplit,
            #[serde(rename = "Restoring")]
            Restoring,
            #[serde(rename = "Resyncing")]
            Resyncing,
            #[serde(rename = "Splitting")]
            Splitting,
            #[serde(rename = "Suspending")]
            Suspending,
            #[serde(rename = "Synchronizing")]
            Synchronizing,
            #[serde(rename = "Terminating")]
            Terminating,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaReadOnlyAccess {
            #[default]
            #[serde(rename = "Both")]
            Both,
            #[serde(rename = "ReplicaElement")]
            ReplicaElement,
            #[serde(rename = "SourceElement")]
            SourceElement,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaRecoveryMode {
            #[default]
            #[serde(rename = "Automatic")]
            Automatic,
            #[serde(rename = "Manual")]
            Manual,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaRole {
            #[default]
            #[serde(rename = "Source")]
            Source,
            #[serde(rename = "Target")]
            Target,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReplicaState {
            #[default]
            #[serde(rename = "Aborted")]
            Aborted,
            #[serde(rename = "Broken")]
            Broken,
            #[serde(rename = "Failedover")]
            Failedover,
            #[serde(rename = "Fractured")]
            Fractured,
            #[serde(rename = "Inactive")]
            Inactive,
            #[serde(rename = "Initialized")]
            Initialized,
            #[serde(rename = "Invalid")]
            Invalid,
            #[serde(rename = "Mixed")]
            Mixed,
            #[serde(rename = "Partitioned")]
            Partitioned,
            #[serde(rename = "Prepared")]
            Prepared,
            #[serde(rename = "Restored")]
            Restored,
            #[serde(rename = "Skewed")]
            Skewed,
            #[serde(rename = "Split")]
            Split,
            #[serde(rename = "Suspended")]
            Suspended,
            #[serde(rename = "Synchronized")]
            Synchronized,
            #[serde(rename = "Unsynchronized")]
            Unsynchronized,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum UndiscoveredElement {
            #[default]
            #[serde(rename = "ReplicaElement")]
            ReplicaElement,
            #[serde(rename = "SourceElement")]
            SourceElement,
        }
    }
}
pub mod switch {
    pub mod v1_9_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::switch::v1_9_1::OemActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Switch.Reset")]
            pub switch_reset: Option<crate::switch::v1_9_1::Reset>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CXL {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxVCSsSupported")]
            pub max_vc_ss_supported: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalNumbervPPBs")]
            pub total_numberv_pp_bs: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VCS")]
            pub vcs: Option<crate::switch::v1_9_1::VCSSwitch>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Chassis")]
            pub chassis: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ManagedBy")]
            pub managed_by: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ManagedBy@odata.count"
            )]
            pub managed_by_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<crate::odata_v4::IdRef>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Reset {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResetType")]
            pub reset_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Switch {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::switch::v1_9_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AssetTag")]
            pub asset_tag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CurrentBandwidthGbps"
            )]
            pub current_bandwidth_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CXL")]
            pub cxl: Option<crate::switch::v1_9_1::CXL>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DomainID")]
            pub domain_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Enabled")]
            pub enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EnvironmentMetrics")]
            pub environment_metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsManaged")]
            pub is_managed: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::switch::v1_9_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LocationIndicatorActive"
            )]
            pub location_indicator_active: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogServices")]
            pub log_services: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxBandwidthGbps")]
            pub max_bandwidth_gbps: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Measurements")]
            pub measurements: Option<Vec<crate::software_inventory::MeasurementBlock>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PowerState")]
            pub power_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportedProtocols")]
            pub supported_protocols: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SwitchType")]
            pub switch_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TotalSwitchWidth")]
            pub total_switch_width: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VCSSwitch {
            #[serde(skip_serializing_if = "Option::is_none", rename = "HDMDecoders")]
            pub hdm_decoders: Option<i64>,
        }
    }
}
pub mod switch_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct SwitchCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod switch_metrics {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::switch_metrics::v1_0_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#SwitchMetrics.ClearCurrentPeriod"
            )]
            pub switch_metrics_clear_current_period:
                Option<crate::switch_metrics::v1_0_0::ClearCurrentPeriod>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriod {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearCurrentPeriodRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CurrentPeriod {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InternalMemoryMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CurrentPeriod")]
            pub current_period: Option<crate::switch_metrics::v1_0_0::CurrentPeriod>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LifeTime")]
            pub life_time: Option<crate::switch_metrics::v1_0_0::LifeTime>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LifeTime {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CorrectableECCErrorCount"
            )]
            pub correctable_ecc_error_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UncorrectableECCErrorCount"
            )]
            pub uncorrectable_ecc_error_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SwitchMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::switch_metrics::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InternalMemoryMetrics"
            )]
            pub internal_memory_metrics:
                Option<crate::switch_metrics::v1_0_0::InternalMemoryMetrics>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeErrors")]
            pub pcie_errors: Option<crate::pcie_device::PCIeErrors>,
        }
    }
}
pub mod task {
    pub mod v1_7_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::task::v1_7_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CreatedResources")]
            pub created_resources: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CreatedResources@odata.count"
            )]
            pub created_resources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Payload {
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpHeaders")]
            pub http_headers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpOperation")]
            pub http_operation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JsonBody")]
            pub json_body: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TargetUri")]
            pub target_uri: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Task {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::task::v1_7_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndTime")]
            pub end_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EstimatedDuration")]
            pub estimated_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HidePayload")]
            pub hide_payload: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::task::v1_7_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Messages")]
            pub messages: Option<Vec<crate::message::Message>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Payload")]
            pub payload: Option<crate::task::v1_7_1::Payload>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentComplete")]
            pub percent_complete: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StartTime")]
            pub start_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SubTasks")]
            pub sub_tasks: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TaskMonitor")]
            pub task_monitor: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TaskState")]
            pub task_state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TaskStatus")]
            pub task_status: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TaskState {
            #[default]
            #[serde(rename = "Cancelled")]
            Cancelled,
            #[serde(rename = "Cancelling")]
            Cancelling,
            #[serde(rename = "Completed")]
            Completed,
            #[serde(rename = "Exception")]
            Exception,
            #[serde(rename = "Interrupted")]
            Interrupted,
            #[serde(rename = "Killed")]
            Killed,
            #[serde(rename = "New")]
            New,
            #[serde(rename = "Pending")]
            Pending,
            #[serde(rename = "Running")]
            Running,
            #[serde(rename = "Service")]
            Service,
            #[serde(rename = "Starting")]
            Starting,
            #[serde(rename = "Stopping")]
            Stopping,
            #[serde(rename = "Suspended")]
            Suspended,
        }
    }
}
pub mod task_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct TaskCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod task_service {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::task_service::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum OverWritePolicy {
            #[default]
            #[serde(rename = "Manual")]
            Manual,
            #[serde(rename = "Oldest")]
            Oldest,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TaskService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::task_service::v1_2_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CompletedTaskOverWritePolicy"
            )]
            pub completed_task_over_write_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DateTime")]
            pub date_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LifeCycleEventOnTaskStateChange"
            )]
            pub life_cycle_event_on_task_state_change: Option<bool>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TaskAutoDeleteTimeoutMinutes"
            )]
            pub task_auto_delete_timeout_minutes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Tasks")]
            pub tasks: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod telemetry_service {
    pub mod v1_3_2 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::telemetry_service::v1_3_2::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#TelemetryService.ClearMetricReports"
            )]
            pub telemetry_service_clear_metric_reports:
                Option<crate::telemetry_service::v1_3_2::ClearMetricReports>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#TelemetryService.ResetMetricReportDefinitionsToDefaults"
            )]
            pub telemetry_service_reset_metric_report_definitions_to_defaults:
                Option<crate::telemetry_service::v1_3_2::ResetMetricReportDefinitionsToDefaults>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#TelemetryService.ResetTriggersToDefaults"
            )]
            pub telemetry_service_reset_triggers_to_defaults:
                Option<crate::telemetry_service::v1_3_2::ResetTriggersToDefaults>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#TelemetryService.SubmitTestMetricReport"
            )]
            pub telemetry_service_submit_test_metric_report:
                Option<crate::telemetry_service::v1_3_2::SubmitTestMetricReport>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearMetricReports {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ClearMetricReportsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum CollectionFunction {
            #[default]
            #[serde(rename = "Average")]
            Average,
            #[serde(rename = "Maximum")]
            Maximum,
            #[serde(rename = "Minimum")]
            Minimum,
            #[serde(rename = "Summation")]
            Summation,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct MetricValue {
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricDefinition")]
            pub metric_definition: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricId")]
            pub metric_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperty")]
            pub metric_property: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricValue")]
            pub metric_value: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Timestamp")]
            pub timestamp: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricReportDefinitionsToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricReportDefinitionsToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetTriggersToDefaults {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetTriggersToDefaultsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SubmitTestMetricReport {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SubmitTestMetricReportRequestBody {
            #[serde(rename = "GeneratedMetricReportValues")]
            pub generated_metric_report_values: Vec<crate::telemetry_service::v1_3_2::MetricValue>,
            #[serde(rename = "MetricReportName")]
            pub metric_report_name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricReportValues")]
            pub metric_report_values: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TelemetryService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::telemetry_service::v1_3_2::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogService")]
            pub log_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxReports")]
            pub max_reports: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricDefinitions")]
            pub metric_definitions: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitions"
            )]
            pub metric_report_definitions: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricReports")]
            pub metric_reports: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinCollectionInterval"
            )]
            pub min_collection_interval: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportedCollectionFunctions"
            )]
            pub supported_collection_functions: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Triggers")]
            pub triggers: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod thermal {
    pub mod v1_7_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Fan {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal::v1_7_1::FanActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Assembly")]
            pub assembly: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanName")]
            pub fan_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HotPluggable")]
            pub hot_pluggable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IndicatorLED")]
            pub indicator_led: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Location")]
            pub location: Option<crate::resource::Location>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdCritical"
            )]
            pub lower_threshold_critical: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdFatal"
            )]
            pub lower_threshold_fatal: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdNonCritical"
            )]
            pub lower_threshold_non_critical: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxReadingRange")]
            pub max_reading_range: Option<i64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MinReadingRange")]
            pub min_reading_range: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingUnits")]
            pub reading_units: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorNumber")]
            pub sensor_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdCritical"
            )]
            pub upper_threshold_critical: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdFatal"
            )]
            pub upper_threshold_fatal: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdNonCritical"
            )]
            pub upper_threshold_non_critical: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FanActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal::v1_7_1::FanOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct FanOemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ReadingUnits {
            #[default]
            #[serde(rename = "Percent")]
            Percent,
            #[serde(rename = "RPM")]
            RPM,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Temperature {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal::v1_7_1::TemperatureActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdjustedMaxAllowableOperatingValue"
            )]
            pub adjusted_max_allowable_operating_value: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AdjustedMinAllowableOperatingValue"
            )]
            pub adjusted_min_allowable_operating_value: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeltaPhysicalContext"
            )]
            pub delta_physical_context: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DeltaReadingCelsius"
            )]
            pub delta_reading_celsius: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdCritical"
            )]
            pub lower_threshold_critical: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdFatal"
            )]
            pub lower_threshold_fatal: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowerThresholdNonCritical"
            )]
            pub lower_threshold_non_critical: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerThresholdUser")]
            pub lower_threshold_user: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxAllowableOperatingValue"
            )]
            pub max_allowable_operating_value: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaxReadingRangeTemp"
            )]
            pub max_reading_range_temp: Option<f64>,
            #[serde(rename = "MemberId")]
            pub member_id: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinAllowableOperatingValue"
            )]
            pub min_allowable_operating_value: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MinReadingRangeTemp"
            )]
            pub min_reading_range_temp: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PhysicalContext")]
            pub physical_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadingCelsius")]
            pub reading_celsius: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RelatedItem")]
            pub related_item: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelatedItem@odata.count"
            )]
            pub related_item_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SensorNumber")]
            pub sensor_number: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdCritical"
            )]
            pub upper_threshold_critical: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdFatal"
            )]
            pub upper_threshold_fatal: Option<f64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "UpperThresholdNonCritical"
            )]
            pub upper_threshold_non_critical: Option<f64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperThresholdUser")]
            pub upper_threshold_user: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TemperatureActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal::v1_7_1::TemperatureOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TemperatureOemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Thermal {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal::v1_7_1::ThermalActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fans")]
            pub fans: Option<Vec<crate::thermal::v1_7_1::Fan>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fans@odata.count")]
            pub fans_odata_count: Option<i64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Redundancy")]
            pub redundancy: Option<Vec<crate::redundancy::Redundancy>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Redundancy@odata.count"
            )]
            pub redundancy_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Temperatures")]
            pub temperatures: Option<Vec<crate::thermal::v1_7_1::Temperature>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Temperatures@odata.count"
            )]
            pub temperatures_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ThermalActions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal::v1_7_1::ThermalOemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ThermalOemActions {}
    }
}
pub mod thermal_equipment {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal_equipment::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ThermalEquipment {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal_equipment::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CDUs")]
            pub cd_us: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolingLoops")]
            pub cooling_loops: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HeatExchangers")]
            pub heat_exchangers: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ImmersionUnits")]
            pub immersion_units: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
    }
}
pub mod thermal_metrics {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal_metrics::v1_2_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#ThermalMetrics.ResetMetrics"
            )]
            pub thermal_metrics_reset_metrics: Option<crate::thermal_metrics::v1_2_0::ResetMetrics>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HeaterSummary {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalPrePowerOnHeatingTimeSeconds"
            )]
            pub total_pre_power_on_heating_time_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TotalRuntimeHeatingTimeSeconds"
            )]
            pub total_runtime_heating_time_seconds: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResetMetricsRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TemperatureSummary {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ambient")]
            pub ambient: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Exhaust")]
            pub exhaust: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Intake")]
            pub intake: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Internal")]
            pub internal: Option<crate::sensor::SensorExcerpt>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ThermalMetrics {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal_metrics::v1_2_0::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AirFlowCubicMetersPerMinute"
            )]
            pub air_flow_cubic_meters_per_minute: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeltaPressurekPa")]
            pub delta_pressurek_pa: Option<crate::sensor::SensorExcerpt>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HeaterSummary")]
            pub heater_summary: Option<crate::thermal_metrics::v1_2_0::HeaterSummary>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureReadingsCelsius"
            )]
            pub temperature_readings_celsius: Option<Vec<crate::sensor::SensorArrayExcerpt>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureReadingsCelsius@odata.count"
            )]
            pub temperature_readings_celsius_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TemperatureSummaryCelsius"
            )]
            pub temperature_summary_celsius:
                Option<crate::thermal_metrics::v1_2_0::TemperatureSummary>,
        }
    }
}
pub mod thermal_subsystem {
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::thermal_subsystem::v1_2_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ThermalSubsystem {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::thermal_subsystem::v1_2_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CoolantConnectors")]
            pub coolant_connectors: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FanRedundancy")]
            pub fan_redundancy: Option<Vec<crate::redundancy::RedundantGroup>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Fans")]
            pub fans: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Heaters")]
            pub heaters: Option<crate::odata_v4::IdRef>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ThermalMetrics")]
            pub thermal_metrics: Option<crate::odata_v4::IdRef>,
        }
    }
}
pub mod triggers {
    pub mod v1_3_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::triggers::v1_3_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct DiscreteTrigger {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DwellTime")]
            pub dwell_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Severity")]
            pub severity: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Value")]
            pub value: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum DiscreteTriggerConditionEnum {
            #[default]
            #[serde(rename = "Changed")]
            Changed,
            #[serde(rename = "Specified")]
            Specified,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitions"
            )]
            pub metric_report_definitions: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetricReportDefinitions@odata.count"
            )]
            pub metric_report_definitions_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MetricTypeEnum {
            #[default]
            #[serde(rename = "Discrete")]
            Discrete,
            #[serde(rename = "Numeric")]
            Numeric,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Threshold {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Activation")]
            pub activation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DwellTime")]
            pub dwell_time: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Reading")]
            pub reading: Option<f64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ThresholdActivation {
            #[default]
            #[serde(rename = "Decreasing")]
            Decreasing,
            #[serde(rename = "Disabled")]
            Disabled,
            #[serde(rename = "Either")]
            Either,
            #[serde(rename = "Increasing")]
            Increasing,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Thresholds {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerCritical")]
            pub lower_critical: Option<crate::triggers::v1_3_1::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LowerWarning")]
            pub lower_warning: Option<crate::triggers::v1_3_1::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperCritical")]
            pub upper_critical: Option<crate::triggers::v1_3_1::Threshold>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UpperWarning")]
            pub upper_warning: Option<crate::triggers::v1_3_1::Threshold>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TriggerActionEnum {
            #[default]
            #[serde(rename = "LogToLogService")]
            LogToLogService,
            #[serde(rename = "RedfishEvent")]
            RedfishEvent,
            #[serde(rename = "RedfishMetricReport")]
            RedfishMetricReport,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Triggers {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::triggers::v1_3_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DiscreteTriggerCondition"
            )]
            pub discrete_trigger_condition: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DiscreteTriggers")]
            pub discrete_triggers: Option<Vec<crate::triggers::v1_3_1::DiscreteTrigger>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EventTriggers")]
            pub event_triggers: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HysteresisDuration")]
            pub hysteresis_duration: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HysteresisReading")]
            pub hysteresis_reading: Option<f64>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::triggers::v1_3_1::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricIds")]
            pub metric_ids: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricProperties")]
            pub metric_properties: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MetricType")]
            pub metric_type: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NumericThresholds")]
            pub numeric_thresholds: Option<crate::triggers::v1_3_1::Thresholds>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TriggerActions")]
            pub trigger_actions: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Wildcards")]
            pub wildcards: Option<Vec<crate::triggers::v1_3_1::Wildcard>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Wildcard {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Name")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Values")]
            pub values: Option<Vec<String>>,
        }
    }
}
pub mod triggers_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct TriggersCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod trusted_component {
    pub mod v1_1_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::trusted_component::v1_1_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ActiveSoftwareImage"
            )]
            pub active_software_image: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ComponentIntegrity")]
            pub component_integrity: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentIntegrity@odata.count"
            )]
            pub component_integrity_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentsProtected"
            )]
            pub components_protected: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ComponentsProtected@odata.count"
            )]
            pub components_protected_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IntegratedInto")]
            pub integrated_into: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareImages")]
            pub software_images: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SoftwareImages@odata.count"
            )]
            pub software_images_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TPM {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapabilitiesVendorID"
            )]
            pub capabilities_vendor_id: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HardwareInterfaceVendorID"
            )]
            pub hardware_interface_vendor_id: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct TrustedComponent {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::trusted_component::v1_1_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareVersion")]
            pub firmware_version: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::trusted_component::v1_1_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TPM")]
            pub tpm: Option<crate::trusted_component::v1_1_0::TPM>,
            #[serde(rename = "TrustedComponentType")]
            pub trusted_component_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UUID")]
            pub uuid: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TrustedComponentType {
            #[default]
            #[serde(rename = "Discrete")]
            Discrete,
            #[serde(rename = "Integrated")]
            Integrated,
        }
    }
}
pub mod trusted_component_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct TrustedComponentCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod update_service {
    pub mod v1_11_3 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::update_service::v1_11_3::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#UpdateService.SimpleUpdate"
            )]
            pub update_service_simple_update: Option<crate::update_service::v1_11_3::SimpleUpdate>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#UpdateService.StartUpdate"
            )]
            pub update_service_start_update: Option<crate::update_service::v1_11_3::StartUpdate>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ApplyTime {
            #[default]
            #[serde(rename = "AtMaintenanceWindowStart")]
            AtMaintenanceWindowStart,
            #[serde(rename = "Immediate")]
            Immediate,
            #[serde(rename = "InMaintenanceWindowOnReset")]
            InMaintenanceWindowOnReset,
            #[serde(rename = "OnReset")]
            OnReset,
            #[serde(rename = "OnStartUpdateRequest")]
            OnStartUpdateRequest,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HttpPushUriApplyTime {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ApplyTime")]
            pub apply_time: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaintenanceWindowDurationInSeconds"
            )]
            pub maintenance_window_duration_in_seconds: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MaintenanceWindowStartTime"
            )]
            pub maintenance_window_start_time: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct HttpPushUriOptions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ForceUpdate")]
            pub force_update: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HttpPushUriApplyTime"
            )]
            pub http_push_uri_apply_time:
                Option<crate::update_service::v1_11_3::HttpPushUriApplyTime>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SimpleUpdate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SimpleUpdateRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "ForceUpdate")]
            pub force_update: Option<bool>,
            #[serde(rename = "ImageURI")]
            pub image_uri: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Targets")]
            pub targets: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferProtocol")]
            pub transfer_protocol: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Username")]
            pub username: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StartUpdate {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct StartUpdateRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TransferProtocolType {
            #[default]
            #[serde(rename = "CIFS")]
            CIFS,
            #[serde(rename = "FTP")]
            FTP,
            #[serde(rename = "HTTP")]
            HTTP,
            #[serde(rename = "HTTPS")]
            HTTPS,
            #[serde(rename = "NFS")]
            NFS,
            #[serde(rename = "NSF")]
            NSF,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SCP")]
            SCP,
            #[serde(rename = "SFTP")]
            SFTP,
            #[serde(rename = "TFTP")]
            TFTP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct UpdateService {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::update_service::v1_11_3::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientCertificates")]
            pub client_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "FirmwareInventory")]
            pub firmware_inventory: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpPushUri")]
            pub http_push_uri: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpPushUriOptions")]
            pub http_push_uri_options: Option<crate::update_service::v1_11_3::HttpPushUriOptions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HttpPushUriOptionsBusy"
            )]
            pub http_push_uri_options_busy: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "HttpPushUriTargets")]
            pub http_push_uri_targets: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "HttpPushUriTargetsBusy"
            )]
            pub http_push_uri_targets_busy: Option<bool>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxImageSizeBytes")]
            pub max_image_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MultipartHttpPushUri"
            )]
            pub multipart_http_push_uri: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteServerCertificates"
            )]
            pub remote_server_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServiceEnabled")]
            pub service_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SoftwareInventory")]
            pub software_inventory: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "VerifyRemoteServerCertificate"
            )]
            pub verify_remote_server_certificate: Option<bool>,
        }
    }
}
pub mod usb_controller {
    pub mod v1_0_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::usb_controller::v1_0_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PCIeDevice")]
            pub pcie_device: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Processors")]
            pub processors: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Processors@odata.count"
            )]
            pub processors_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct USBController {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::usb_controller::v1_0_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::usb_controller::v1_0_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PartNumber")]
            pub part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Ports")]
            pub ports: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SerialNumber")]
            pub serial_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SKU")]
            pub sku: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SparePartNumber")]
            pub spare_part_number: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
        }
    }
}
pub mod usb_controller_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct USBControllerCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod vcat_entry {
    pub mod v1_0_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::vcat_entry::v1_0_1::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VCATEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::vcat_entry::v1_0_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RawEntryHex")]
            pub raw_entry_hex: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VCEntries")]
            pub vc_entries: Option<Vec<crate::vcat_entry::v1_0_1::VCATableEntry>>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VCATableEntry {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Threshold")]
            pub threshold: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VCMask")]
            pub vc_mask: Option<String>,
        }
    }
}
pub mod vcat_entry_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct VCATEntryCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod virtual_media {
    pub mod v1_6_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::virtual_media::v1_6_1::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#VirtualMedia.EjectMedia"
            )]
            pub virtual_media_eject_media: Option<crate::virtual_media::v1_6_1::EjectMedia>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#VirtualMedia.InsertMedia"
            )]
            pub virtual_media_insert_media: Option<crate::virtual_media::v1_6_1::InsertMedia>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ConnectedVia {
            #[default]
            #[serde(rename = "Applet")]
            Applet,
            #[serde(rename = "NotConnected")]
            NotConnected,
            #[serde(rename = "Oem")]
            Oem,
            #[serde(rename = "URI")]
            URI,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EjectMedia {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct EjectMediaRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum EjectPolicy {
            #[default]
            #[serde(rename = "AfterUse")]
            AfterUse,
            #[serde(rename = "OnPowerOff")]
            OnPowerOff,
            #[serde(rename = "Persistent")]
            Persistent,
            #[serde(rename = "Session")]
            Session,
            #[serde(rename = "Timed")]
            Timed,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InsertMedia {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InsertMediaRequestBody {
            #[serde(rename = "Image")]
            pub image: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Inserted")]
            pub inserted: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferMethod")]
            pub transfer_method: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferProtocolType"
            )]
            pub transfer_protocol_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserName")]
            pub user_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteProtected")]
            pub write_protected: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum MediaType {
            #[default]
            #[serde(rename = "CD")]
            CD,
            #[serde(rename = "DVD")]
            DVD,
            #[serde(rename = "Floppy")]
            Floppy,
            #[serde(rename = "USBStick")]
            USBStick,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TransferMethod {
            #[default]
            #[serde(rename = "Stream")]
            Stream,
            #[serde(rename = "Upload")]
            Upload,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum TransferProtocolType {
            #[default]
            #[serde(rename = "CIFS")]
            CIFS,
            #[serde(rename = "FTP")]
            FTP,
            #[serde(rename = "HTTP")]
            HTTP,
            #[serde(rename = "HTTPS")]
            HTTPS,
            #[serde(rename = "NFS")]
            NFS,
            #[serde(rename = "OEM")]
            OEM,
            #[serde(rename = "SCP")]
            SCP,
            #[serde(rename = "SFTP")]
            SFTP,
            #[serde(rename = "TFTP")]
            TFTP,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VirtualMedia {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::virtual_media::v1_6_1::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Certificates")]
            pub certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientCertificates")]
            pub client_certificates: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConnectedVia")]
            pub connected_via: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EjectPolicy")]
            pub eject_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EjectTimeout")]
            pub eject_timeout: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Image")]
            pub image: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ImageName")]
            pub image_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Inserted")]
            pub inserted: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaTypes")]
            pub media_types: Option<Vec<String>>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Password")]
            pub password: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "TransferMethod")]
            pub transfer_method: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "TransferProtocolType"
            )]
            pub transfer_protocol_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "UserName")]
            pub user_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VerifyCertificate")]
            pub verify_certificate: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteProtected")]
            pub write_protected: Option<bool>,
        }
    }
}
pub mod virtual_media_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct VirtualMediaCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod vlan_network_interface {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum VLAN {
        VLanNetworkInterfaceV1N0N9VLAN(crate::vlan_network_interface::v1_0_9::VLAN),
        VLanNetworkInterfaceV1N1N5VLAN(crate::vlan_network_interface::v1_1_5::VLAN),
        VLanNetworkInterfaceV1N2N0VLAN(crate::vlan_network_interface::v1_2_0::VLAN),
        VLanNetworkInterfaceV1N3N0VLAN(crate::vlan_network_interface::v1_3_0::VLAN),
    }
    pub mod v1_0_9 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLAN {
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANEnable")]
            pub vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANId")]
            pub vlan_id: Option<i64>,
        }
    }
    pub mod v1_1_5 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLAN {
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANEnable")]
            pub vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANId")]
            pub vlan_id: Option<i64>,
        }
    }
    pub mod v1_2_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLAN {
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANEnable")]
            pub vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANId")]
            pub vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANPriority")]
            pub vlan_priority: Option<i64>,
        }
    }
    pub mod v1_3_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::vlan_network_interface::v1_3_0::OemActions>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLAN {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Tagged")]
            pub tagged: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANEnable")]
            pub vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANId")]
            pub vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANPriority")]
            pub vlan_priority: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct VLanNetworkInterface {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::vlan_network_interface::v1_3_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANEnable")]
            pub vlan_enable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANId")]
            pub vlan_id: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VLANPriority")]
            pub vlan_priority: Option<i64>,
        }
    }
}
pub mod vlan_network_interface_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct VLanNetworkInterfaceCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod volume {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum EncryptionTypes {
        #[default]
        #[serde(rename = "ControllerAssisted")]
        ControllerAssisted,
        #[serde(rename = "NativeDriveEncryption")]
        NativeDriveEncryption,
        #[serde(rename = "SoftwareAssisted")]
        SoftwareAssisted,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum InitializeMethod {
        #[default]
        #[serde(rename = "Background")]
        Background,
        #[serde(rename = "Foreground")]
        Foreground,
        #[serde(rename = "Skip")]
        Skip,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum InitializeType {
        #[default]
        #[serde(rename = "Fast")]
        Fast,
        #[serde(rename = "Slow")]
        Slow,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum LBAFormatType {
        #[default]
        #[serde(rename = "LBAFormat0")]
        LBAFormat0,
        #[serde(rename = "LBAFormat1")]
        LBAFormat1,
        #[serde(rename = "LBAFormat10")]
        LBAFormat10,
        #[serde(rename = "LBAFormat11")]
        LBAFormat11,
        #[serde(rename = "LBAFormat12")]
        LBAFormat12,
        #[serde(rename = "LBAFormat13")]
        LBAFormat13,
        #[serde(rename = "LBAFormat14")]
        LBAFormat14,
        #[serde(rename = "LBAFormat15")]
        LBAFormat15,
        #[serde(rename = "LBAFormat2")]
        LBAFormat2,
        #[serde(rename = "LBAFormat3")]
        LBAFormat3,
        #[serde(rename = "LBAFormat4")]
        LBAFormat4,
        #[serde(rename = "LBAFormat5")]
        LBAFormat5,
        #[serde(rename = "LBAFormat6")]
        LBAFormat6,
        #[serde(rename = "LBAFormat7")]
        LBAFormat7,
        #[serde(rename = "LBAFormat8")]
        LBAFormat8,
        #[serde(rename = "LBAFormat9")]
        LBAFormat9,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum LBARelativePerformanceType {
        #[default]
        #[serde(rename = "Best")]
        Best,
        #[serde(rename = "Better")]
        Better,
        #[serde(rename = "Degraded")]
        Degraded,
        #[serde(rename = "Good")]
        Good,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum NamespaceType {
        #[default]
        #[serde(rename = "Block")]
        Block,
        #[serde(rename = "Computational")]
        Computational,
        #[serde(rename = "KeyValue")]
        KeyValue,
        #[serde(rename = "ZNS")]
        ZNS,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum OperationType {
        #[default]
        #[serde(rename = "ChangeRAIDType")]
        ChangeRAIDType,
        #[serde(rename = "CheckConsistency")]
        CheckConsistency,
        #[serde(rename = "Compress")]
        Compress,
        #[serde(rename = "Decrypt")]
        Decrypt,
        #[serde(rename = "Deduplicate")]
        Deduplicate,
        #[serde(rename = "Delete")]
        Delete,
        #[serde(rename = "Encrypt")]
        Encrypt,
        #[serde(rename = "Format")]
        Format,
        #[serde(rename = "Initialize")]
        Initialize,
        #[serde(rename = "Rebuild")]
        Rebuild,
        #[serde(rename = "Replicate")]
        Replicate,
        #[serde(rename = "Resize")]
        Resize,
        #[serde(rename = "Sanitize")]
        Sanitize,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum RAIDType {
        #[default]
        #[serde(rename = "None")]
        None,
        #[serde(rename = "RAID0")]
        RAID0,
        #[serde(rename = "RAID00")]
        RAID00,
        #[serde(rename = "RAID01")]
        RAID01,
        #[serde(rename = "RAID1")]
        RAID1,
        #[serde(rename = "RAID10")]
        RAID10,
        #[serde(rename = "RAID10E")]
        RAID10E,
        #[serde(rename = "RAID10Triple")]
        RAID10Triple,
        #[serde(rename = "RAID1E")]
        RAID1E,
        #[serde(rename = "RAID1Triple")]
        RAID1Triple,
        #[serde(rename = "RAID3")]
        RAID3,
        #[serde(rename = "RAID4")]
        RAID4,
        #[serde(rename = "RAID5")]
        RAID5,
        #[serde(rename = "RAID50")]
        RAID50,
        #[serde(rename = "RAID6")]
        RAID6,
        #[serde(rename = "RAID60")]
        RAID60,
        #[serde(rename = "RAID6TP")]
        RAID6TP,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum ReadCachePolicyType {
        #[default]
        #[serde(rename = "AdaptiveReadAhead")]
        AdaptiveReadAhead,
        #[serde(rename = "Off")]
        Off,
        #[serde(rename = "ReadAhead")]
        ReadAhead,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum VolumeType {
        #[default]
        #[serde(rename = "Mirrored")]
        Mirrored,
        #[serde(rename = "NonRedundant")]
        NonRedundant,
        #[serde(rename = "RawDevice")]
        RawDevice,
        #[serde(rename = "SpannedMirrors")]
        SpannedMirrors,
        #[serde(rename = "SpannedStripesWithParity")]
        SpannedStripesWithParity,
        #[serde(rename = "StripedWithParity")]
        StripedWithParity,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum VolumeUsageType {
        #[default]
        #[serde(rename = "CacheOnly")]
        CacheOnly,
        #[serde(rename = "Data")]
        Data,
        #[serde(rename = "ReplicationReserve")]
        ReplicationReserve,
        #[serde(rename = "SystemData")]
        SystemData,
        #[serde(rename = "SystemReserve")]
        SystemReserve,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum WriteCachePolicyType {
        #[default]
        #[serde(rename = "Off")]
        Off,
        #[serde(rename = "ProtectedWriteBack")]
        ProtectedWriteBack,
        #[serde(rename = "UnprotectedWriteBack")]
        UnprotectedWriteBack,
        #[serde(rename = "WriteThrough")]
        WriteThrough,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum WriteCacheStateType {
        #[default]
        #[serde(rename = "Degraded")]
        Degraded,
        #[serde(rename = "Protected")]
        Protected,
        #[serde(rename = "Unprotected")]
        Unprotected,
    }
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub enum WriteHoleProtectionPolicyType {
        #[default]
        #[serde(rename = "DistributedLog")]
        DistributedLog,
        #[serde(rename = "Journaling")]
        Journaling,
        #[serde(rename = "Oem")]
        Oem,
        #[serde(rename = "Off")]
        Off,
    }
    pub mod v1_9_0 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::volume::v1_9_0::OemActions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.AssignReplicaTarget"
            )]
            pub volume_assign_replica_target: Option<crate::volume::v1_9_0::AssignReplicaTarget>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.ChangeRAIDLayout"
            )]
            pub volume_change_raid_layout: Option<crate::volume::v1_9_0::ChangeRAIDLayout>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.CheckConsistency"
            )]
            pub volume_check_consistency: Option<crate::volume::v1_9_0::CheckConsistency>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.CreateReplicaTarget"
            )]
            pub volume_create_replica_target: Option<crate::volume::v1_9_0::CreateReplicaTarget>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.ForceEnable"
            )]
            pub volume_force_enable: Option<crate::volume::v1_9_0::ForceEnable>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Volume.Initialize")]
            pub volume_initialize: Option<crate::volume::v1_9_0::Initialize>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.RemoveReplicaRelationship"
            )]
            pub volume_remove_replica_relationship:
                Option<crate::volume::v1_9_0::RemoveReplicaRelationship>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.ResumeReplication"
            )]
            pub volume_resume_replication: Option<crate::volume::v1_9_0::ResumeReplication>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.ReverseReplicationRelationship"
            )]
            pub volume_reverse_replication_relationship:
                Option<crate::volume::v1_9_0::ReverseReplicationRelationship>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.SplitReplication"
            )]
            pub volume_split_replication: Option<crate::volume::v1_9_0::SplitReplication>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Volume.SuspendReplication"
            )]
            pub volume_suspend_replication: Option<crate::volume::v1_9_0::SuspendReplication>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AssignReplicaTarget {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AssignReplicaTargetRequestBody {
            #[serde(rename = "ReplicaType")]
            pub replica_type: String,
            #[serde(rename = "ReplicaUpdateMode")]
            pub replica_update_mode: String,
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ChangeRAIDLayout {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ChangeRAIDLayoutRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaSpanCount")]
            pub media_span_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RAIDType")]
            pub raid_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StripSizeBytes")]
            pub strip_size_bytes: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CheckConsistency {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CheckConsistencyRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CreateReplicaTarget {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct CreateReplicaTargetRequestBody {
            #[serde(rename = "ReplicaType")]
            pub replica_type: String,
            #[serde(rename = "ReplicaUpdateMode")]
            pub replica_update_mode: String,
            #[serde(rename = "TargetStoragePool")]
            pub target_storage_pool: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VolumeName")]
            pub volume_name: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ForceEnable {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ForceEnableRequestBody {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Initialize {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct InitializeRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitializeMethod")]
            pub initialize_method: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitializeType")]
            pub initialize_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct LBAFormat {
            #[serde(skip_serializing_if = "Option::is_none", rename = "LBADataSizeBytes")]
            pub lba_data_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LBAFormatType")]
            pub lba_format_type: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LBAMetadataSizeBytes"
            )]
            pub lba_metadata_size_bytes: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RelativePerformance"
            )]
            pub relative_performance: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheDataVolumes")]
            pub cache_data_volumes: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CacheDataVolumes@odata.count"
            )]
            pub cache_data_volumes_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CacheVolumeSource")]
            pub cache_volume_source: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClassOfService")]
            pub class_of_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ClientEndpoints")]
            pub client_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ClientEndpoints@odata.count"
            )]
            pub client_endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ConsistencyGroups")]
            pub consistency_groups: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ConsistencyGroups@odata.count"
            )]
            pub consistency_groups_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Controllers")]
            pub controllers: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Controllers@odata.count"
            )]
            pub controllers_odata_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DedicatedSpareDrives"
            )]
            pub dedicated_spare_drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DedicatedSpareDrives@odata.count"
            )]
            pub dedicated_spare_drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives")]
            pub drives: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Drives@odata.count")]
            pub drives_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "JournalingMedia")]
            pub journaling_media: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OwningStorageResource"
            )]
            pub owning_storage_resource: Option<crate::odata_v4::IdRef>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "OwningStorageService"
            )]
            pub owning_storage_service: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ServerEndpoints")]
            pub server_endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ServerEndpoints@odata.count"
            )]
            pub server_endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SpareResourceSets")]
            pub spare_resource_sets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SpareResourceSets@odata.count"
            )]
            pub spare_resource_sets_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageGroups")]
            pub storage_groups: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "StorageGroups@odata.count"
            )]
            pub storage_groups_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NVMeNamespaceProperties {
            #[serde(skip_serializing_if = "Option::is_none", rename = "FormattedLBASize")]
            pub formatted_lba_size: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsShareable")]
            pub is_shareable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LBAFormat")]
            pub lba_format: Option<crate::volume::v1_9_0::LBAFormat>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LBAFormats")]
            pub lba_formats: Option<Vec<crate::volume::v1_9_0::LBAFormat>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LBAFormatsSupported"
            )]
            pub lba_formats_supported: Option<Vec<String>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "MetadataTransferredAtEndOfDataLBA"
            )]
            pub metadata_transferred_at_end_of_data_lba: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NamespaceFeatures")]
            pub namespace_features: Option<crate::volume::v1_9_0::NamespaceFeatures>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NamespaceId")]
            pub namespace_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NamespaceType")]
            pub namespace_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NumberLBAFormats")]
            pub number_lba_formats: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "NVMeVersion")]
            pub nvme_version: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Type")]
            pub r#type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct NamespaceFeatures {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsAtomicTransactionSize"
            )]
            pub supports_atomic_transaction_size: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsDeallocatedOrUnwrittenLBError"
            )]
            pub supports_deallocated_or_unwritten_lb_error: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsIOPerformanceHints"
            )]
            pub supports_io_performance_hints: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "SupportsNGUIDReuse")]
            pub supports_nguid_reuse: Option<bool>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "SupportsThinProvisioning"
            )]
            pub supports_thin_provisioning: Option<bool>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Operation {
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AssociatedFeaturesRegistry"
            )]
            pub associated_features_registry: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Operation")]
            pub operation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OperationName")]
            pub operation_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "PercentageComplete")]
            pub percentage_complete: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveReplicaRelationship {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveReplicaRelationshipRequestBody {
            #[serde(skip_serializing_if = "Option::is_none", rename = "DeleteTargetVolume")]
            pub delete_target_volume: Option<bool>,
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResumeReplication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ResumeReplicationRequestBody {
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ReverseReplicationRelationship {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct ReverseReplicationRelationshipRequestBody {
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SplitReplication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SplitReplicationRequestBody {
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SuspendReplication {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct SuspendReplicationRequestBody {
            #[serde(rename = "TargetVolume")]
            pub target_volume: String,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Volume {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AccessCapabilities")]
            pub access_capabilities: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::volume::v1_9_0::Actions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "AllocatedPools")]
            pub allocated_pools: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "BlockSizeBytes")]
            pub block_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Capacity")]
            pub capacity: Option<crate::capacity::v1_0_0::Capacity>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacityBytes")]
            pub capacity_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "CapacitySources")]
            pub capacity_sources: Option<Vec<crate::capacity::CapacitySource>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "CapacitySources@odata.count"
            )]
            pub capacity_sources_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Compressed")]
            pub compressed: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Connections")]
            pub connections: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Connections@odata.count"
            )]
            pub connections_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Deduplicated")]
            pub deduplicated: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "DisplayName")]
            pub display_name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Encrypted")]
            pub encrypted: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EncryptionTypes")]
            pub encryption_types: Option<Vec<String>>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InitializeMethod")]
            pub initialize_method: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IOPerfModeEnabled")]
            pub io_perf_mode_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IOStatistics")]
            pub io_statistics: Option<crate::io_statistics::v1_0_1::IOStatistics>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "IsBootCapable")]
            pub is_boot_capable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::volume::v1_9_0::Links>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "LogicalUnitNumber")]
            pub logical_unit_number: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "LowSpaceWarningThresholdPercents"
            )]
            pub low_space_warning_threshold_percents: Option<Vec<i64>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Manufacturer")]
            pub manufacturer: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MaxBlockSizeBytes")]
            pub max_block_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "MediaSpanCount")]
            pub media_span_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Metrics")]
            pub metrics: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Model")]
            pub model: Option<String>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "NVMeNamespaceProperties"
            )]
            pub nvme_namespace_properties: Option<crate::volume::v1_9_0::NVMeNamespaceProperties>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Operations")]
            pub operations: Option<Vec<crate::volume::v1_9_0::Operation>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "OptimumIOSizeBytes")]
            pub optimum_io_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ProvisioningPolicy")]
            pub provisioning_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "RAIDType")]
            pub raid_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReadCachePolicy")]
            pub read_cache_policy: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RecoverableCapacitySourceCount"
            )]
            pub recoverable_capacity_source_count: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemainingCapacityPercent"
            )]
            pub remaining_capacity_percent: Option<i64>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "RemoteReplicaTargets"
            )]
            pub remote_replica_targets: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaInfo")]
            pub replica_info: Option<crate::storage_replica_info::v1_4_0::ReplicaInfo>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicaTargets")]
            pub replica_targets: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ReplicaTargets@odata.count"
            )]
            pub replica_targets_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ReplicationEnabled")]
            pub replication_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StorageGroups")]
            pub storage_groups: Option<crate::odata_v4::IdRef>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "StripSizeBytes")]
            pub strip_size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VolumeType")]
            pub volume_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "VolumeUsage")]
            pub volume_usage: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteCachePolicy")]
            pub write_cache_policy: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "WriteCacheState")]
            pub write_cache_state: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "WriteHoleProtectionPolicy"
            )]
            pub write_hole_protection_policy: Option<String>,
        }
    }
}
pub mod volume_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct VolumeCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
pub mod zone {
    pub mod v1_6_1 {
        use serde::{Deserialize, Serialize};
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Actions {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::zone::v1_6_1::OemActions>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "#Zone.AddEndpoint")]
            pub zone_add_endpoint: Option<crate::zone::v1_6_1::AddEndpoint>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "#Zone.RemoveEndpoint"
            )]
            pub zone_remove_endpoint: Option<crate::zone::v1_6_1::RemoveEndpoint>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddEndpoint {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct AddEndpointRequestBody {
            #[serde(rename = "Endpoint")]
            pub endpoint: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndpointETag")]
            pub endpoint_etag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ZoneETag")]
            pub zone_etag: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ExternalAccessibility {
            #[default]
            #[serde(rename = "GloballyAccessible")]
            GloballyAccessible,
            #[serde(rename = "NoInternalRouting")]
            NoInternalRouting,
            #[serde(rename = "NonZonedAccessible")]
            NonZonedAccessible,
            #[serde(rename = "ZoneOnly")]
            ZoneOnly,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Links {
            #[serde(skip_serializing_if = "Option::is_none", rename = "AddressPools")]
            pub address_pools: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "AddressPools@odata.count"
            )]
            pub address_pools_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContainedByZones")]
            pub contained_by_zones: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ContainedByZones@odata.count"
            )]
            pub contained_by_zones_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ContainsZones")]
            pub contains_zones: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ContainsZones@odata.count"
            )]
            pub contains_zones_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Endpoints")]
            pub endpoints: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "Endpoints@odata.count"
            )]
            pub endpoints_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "InvolvedSwitches")]
            pub involved_switches: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "InvolvedSwitches@odata.count"
            )]
            pub involved_switches_odata_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ResourceBlocks")]
            pub resource_blocks: Option<Vec<crate::odata_v4::IdRef>>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ResourceBlocks@odata.count"
            )]
            pub resource_blocks_odata_count: Option<i64>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct OemActions {}
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveEndpoint {
            #[serde(skip_serializing_if = "Option::is_none", rename = "target")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "title")]
            pub title: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct RemoveEndpointRequestBody {
            #[serde(rename = "Endpoint")]
            pub endpoint: crate::odata_v4::IdRef,
            #[serde(skip_serializing_if = "Option::is_none", rename = "EndpointETag")]
            pub endpoint_etag: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ZoneETag")]
            pub zone_etag: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub struct Zone {
            #[serde(skip_serializing_if = "Option::is_none", rename = "Actions")]
            pub actions: Option<crate::zone::v1_6_1::Actions>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "DefaultRoutingEnabled"
            )]
            pub default_routing_enabled: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
            pub description: Option<String>,
            #[serde(
                skip_serializing_if = "Option::is_none",
                rename = "ExternalAccessibility"
            )]
            pub external_accessibility: Option<String>,
            #[serde(rename = "Id")]
            pub id: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Identifiers")]
            pub identifiers: Option<Vec<crate::resource::Identifier>>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Links")]
            pub links: Option<crate::zone::v1_6_1::Links>,
            #[serde(rename = "Name")]
            pub name: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
            pub odata_context: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
            pub odata_etag: Option<String>,
            #[serde(rename = "@odata.id")]
            pub odata_id: String,
            #[serde(rename = "@odata.type")]
            pub odata_type: String,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
            pub oem: Option<crate::resource::Oem>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "Status")]
            pub status: Option<crate::resource::Status>,
            #[serde(skip_serializing_if = "Option::is_none", rename = "ZoneType")]
            pub zone_type: Option<String>,
        }
        #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
        pub enum ZoneType {
            #[default]
            #[serde(rename = "Default")]
            Default,
            #[serde(rename = "ZoneOfEndpoints")]
            ZoneOfEndpoints,
            #[serde(rename = "ZoneOfResourceBlocks")]
            ZoneOfResourceBlocks,
            #[serde(rename = "ZoneOfZones")]
            ZoneOfZones,
        }
    }
}
pub mod zone_collection {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
    pub struct ZoneCollection {
        #[serde(skip_serializing_if = "Option::is_none", rename = "Description")]
        pub description: Option<String>,
        #[serde(rename = "Members")]
        pub members: Vec<crate::odata_v4::IdRef>,
        #[serde(rename = "Members@odata.count")]
        pub members_odata_count: i64,
        #[serde(
            skip_serializing_if = "Option::is_none",
            rename = "Members@odata.nextLink"
        )]
        pub members_odata_next_link: Option<String>,
        #[serde(rename = "Name")]
        pub name: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.context")]
        pub odata_context: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none", rename = "@odata.etag")]
        pub odata_etag: Option<String>,
        #[serde(rename = "@odata.id")]
        pub odata_id: String,
        #[serde(rename = "@odata.type")]
        pub odata_type: String,
        #[serde(skip_serializing_if = "Option::is_none", rename = "Oem")]
        pub oem: Option<crate::resource::Oem>,
    }
}
